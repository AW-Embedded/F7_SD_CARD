
F7_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000917c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095f4  080095f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095fc  080095fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000070  08009674  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000818  08009674  00020818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f00  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003071  00000000  00000000  00033fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00037018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00037f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293b2  00000000  00000000  00038cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016881  00000000  00000000  00062072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef1df  00000000  00000000  000788f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167ad2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  00167b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009334 	.word	0x08009334

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08009334 	.word	0x08009334

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_DMA_Init+0x48>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a0f      	ldr	r2, [pc, #60]	; (800060c <MX_DMA_Init+0x48>)
 80005d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_DMA_Init+0x48>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	203b      	movs	r0, #59	; 0x3b
 80005e8:	f001 fa21 	bl	8001a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005ec:	203b      	movs	r0, #59	; 0x3b
 80005ee:	f001 fa3a 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2045      	movs	r0, #69	; 0x45
 80005f8:	f001 fa19 	bl	8001a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005fc:	2045      	movs	r0, #69	; 0x45
 80005fe:	f001 fa32 	bl	8001a66 <HAL_NVIC_EnableIRQ>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800

08000610 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b090      	sub	sp, #64	; 0x40
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000626:	4bad      	ldr	r3, [pc, #692]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4aac      	ldr	r2, [pc, #688]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4baa      	ldr	r3, [pc, #680]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0310 	and.w	r3, r3, #16
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
 800063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063e:	4ba7      	ldr	r3, [pc, #668]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4aa6      	ldr	r2, [pc, #664]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4ba4      	ldr	r3, [pc, #656]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4ba1      	ldr	r3, [pc, #644]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4aa0      	ldr	r2, [pc, #640]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b9e      	ldr	r3, [pc, #632]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	623b      	str	r3, [r7, #32]
 800066c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	4b9b      	ldr	r3, [pc, #620]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a9a      	ldr	r2, [pc, #616]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000674:	f043 0308 	orr.w	r3, r3, #8
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b98      	ldr	r3, [pc, #608]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0308 	and.w	r3, r3, #8
 8000682:	61fb      	str	r3, [r7, #28]
 8000684:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b95      	ldr	r3, [pc, #596]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a94      	ldr	r2, [pc, #592]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b92      	ldr	r3, [pc, #584]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b8f      	ldr	r3, [pc, #572]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a8e      	ldr	r2, [pc, #568]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b8c      	ldr	r3, [pc, #560]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006b6:	4b89      	ldr	r3, [pc, #548]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a88      	ldr	r2, [pc, #544]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b86      	ldr	r3, [pc, #536]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ce:	4b83      	ldr	r3, [pc, #524]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a82      	ldr	r2, [pc, #520]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b80      	ldr	r3, [pc, #512]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006e6:	4b7d      	ldr	r3, [pc, #500]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a7c      	ldr	r2, [pc, #496]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b7a      	ldr	r3, [pc, #488]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006fe:	4b77      	ldr	r3, [pc, #476]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a76      	ldr	r2, [pc, #472]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b74      	ldr	r3, [pc, #464]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0320 	and.w	r3, r3, #32
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	4b71      	ldr	r3, [pc, #452]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a70      	ldr	r2, [pc, #448]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b6e      	ldr	r3, [pc, #440]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2120      	movs	r1, #32
 8000732:	486b      	ldr	r0, [pc, #428]	; (80008e0 <MX_GPIO_Init+0x2d0>)
 8000734:	f001 ff1c 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f241 010c 	movw	r1, #4108	; 0x100c
 800073e:	4869      	ldr	r0, [pc, #420]	; (80008e4 <MX_GPIO_Init+0x2d4>)
 8000740:	f001 ff16 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2108      	movs	r1, #8
 8000748:	4867      	ldr	r0, [pc, #412]	; (80008e8 <MX_GPIO_Init+0x2d8>)
 800074a:	f001 ff11 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000754:	4865      	ldr	r0, [pc, #404]	; (80008ec <MX_GPIO_Init+0x2dc>)
 8000756:	f001 ff0b 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	21c8      	movs	r1, #200	; 0xc8
 800075e:	4864      	ldr	r0, [pc, #400]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000760:	f001 ff06 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000774:	230e      	movs	r3, #14
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077c:	4619      	mov	r1, r3
 800077e:	485d      	ldr	r0, [pc, #372]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 8000780:	f001 fd32 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000784:	2308      	movs	r3, #8
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000794:	4619      	mov	r1, r3
 8000796:	4857      	ldr	r0, [pc, #348]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 8000798:	f001 fd26 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800079c:	2304      	movs	r3, #4
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007ac:	2309      	movs	r3, #9
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	484f      	ldr	r0, [pc, #316]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 80007b8:	f001 fd16 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007bc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ce:	230b      	movs	r3, #11
 80007d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d6:	4619      	mov	r1, r3
 80007d8:	4845      	ldr	r0, [pc, #276]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80007da:	f001 fd05 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007f0:	230c      	movs	r3, #12
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f8:	4619      	mov	r1, r3
 80007fa:	483e      	ldr	r0, [pc, #248]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 80007fc:	f001 fcf4 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000800:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000806:	2312      	movs	r3, #18
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000812:	2304      	movs	r3, #4
 8000814:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081a:	4619      	mov	r1, r3
 800081c:	4836      	ldr	r0, [pc, #216]	; (80008f8 <MX_GPIO_Init+0x2e8>)
 800081e:	f001 fce3 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000822:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000834:	230a      	movs	r3, #10
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083c:	4619      	mov	r1, r3
 800083e:	482e      	ldr	r0, [pc, #184]	; (80008f8 <MX_GPIO_Init+0x2e8>)
 8000840:	f001 fcd2 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000844:	2310      	movs	r3, #16
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000854:	2302      	movs	r3, #2
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085c:	4619      	mov	r1, r3
 800085e:	4826      	ldr	r0, [pc, #152]	; (80008f8 <MX_GPIO_Init+0x2e8>)
 8000860:	f001 fcc2 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000874:	2308      	movs	r3, #8
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <MX_GPIO_Init+0x2d0>)
 8000880:	f001 fcb2 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000896:	2301      	movs	r3, #1
 8000898:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089e:	4619      	mov	r1, r3
 80008a0:	4816      	ldr	r0, [pc, #88]	; (80008fc <MX_GPIO_Init+0x2ec>)
 80008a2:	f001 fca1 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008a6:	2360      	movs	r3, #96	; 0x60
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008b6:	230d      	movs	r3, #13
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 80008c2:	f001 fc91 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008d6:	230a      	movs	r3, #10
 80008d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008da:	e011      	b.n	8000900 <MX_GPIO_Init+0x2f0>
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40022000 	.word	0x40022000
 80008e8:	40022800 	.word	0x40022800
 80008ec:	40021c00 	.word	0x40021c00
 80008f0:	40021800 	.word	0x40021800
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000904:	4619      	mov	r1, r3
 8000906:	48bd      	ldr	r0, [pc, #756]	; (8000bfc <MX_GPIO_Init+0x5ec>)
 8000908:	f001 fc6e 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800090c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800091e:	230c      	movs	r3, #12
 8000920:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000926:	4619      	mov	r1, r3
 8000928:	48b5      	ldr	r0, [pc, #724]	; (8000c00 <MX_GPIO_Init+0x5f0>)
 800092a:	f001 fc5d 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800092e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000940:	230e      	movs	r3, #14
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000948:	4619      	mov	r1, r3
 800094a:	48ae      	ldr	r0, [pc, #696]	; (8000c04 <MX_GPIO_Init+0x5f4>)
 800094c:	f001 fc4c 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000962:	4619      	mov	r1, r3
 8000964:	48a7      	ldr	r0, [pc, #668]	; (8000c04 <MX_GPIO_Init+0x5f4>)
 8000966:	f001 fc3f 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097c:	4619      	mov	r1, r3
 800097e:	48a2      	ldr	r0, [pc, #648]	; (8000c08 <MX_GPIO_Init+0x5f8>)
 8000980:	f001 fc32 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000984:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000996:	230c      	movs	r3, #12
 8000998:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	4899      	ldr	r0, [pc, #612]	; (8000c08 <MX_GPIO_Init+0x5f8>)
 80009a2:	f001 fc21 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80009a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b8:	230a      	movs	r3, #10
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	4892      	ldr	r0, [pc, #584]	; (8000c0c <MX_GPIO_Init+0x5fc>)
 80009c4:	f001 fc10 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80009c8:	23f0      	movs	r3, #240	; 0xf0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009d8:	230a      	movs	r3, #10
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e0:	4619      	mov	r1, r3
 80009e2:	488b      	ldr	r0, [pc, #556]	; (8000c10 <MX_GPIO_Init+0x600>)
 80009e4:	f001 fc00 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009e8:	23f7      	movs	r3, #247	; 0xf7
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009f8:	230e      	movs	r3, #14
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4884      	ldr	r0, [pc, #528]	; (8000c14 <MX_GPIO_Init+0x604>)
 8000a04:	f001 fbf0 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a1a:	2309      	movs	r3, #9
 8000a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a22:	4619      	mov	r1, r3
 8000a24:	4876      	ldr	r0, [pc, #472]	; (8000c00 <MX_GPIO_Init+0x5f0>)
 8000a26:	f001 fbdf 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a44:	4619      	mov	r1, r3
 8000a46:	486e      	ldr	r0, [pc, #440]	; (8000c00 <MX_GPIO_Init+0x5f0>)
 8000a48:	f001 fbce 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a60:	4619      	mov	r1, r3
 8000a62:	4869      	ldr	r0, [pc, #420]	; (8000c08 <MX_GPIO_Init+0x5f8>)
 8000a64:	f001 fbc0 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a78:	230d      	movs	r3, #13
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a80:	4619      	mov	r1, r3
 8000a82:	4861      	ldr	r0, [pc, #388]	; (8000c08 <MX_GPIO_Init+0x5f8>)
 8000a84:	f001 fbb0 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000a88:	f241 030c 	movw	r3, #4108	; 0x100c
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	485b      	ldr	r0, [pc, #364]	; (8000c10 <MX_GPIO_Init+0x600>)
 8000aa2:	f001 fba1 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4857      	ldr	r0, [pc, #348]	; (8000c18 <MX_GPIO_Init+0x608>)
 8000abc:	f001 fb94 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000ac0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ada:	4619      	mov	r1, r3
 8000adc:	484f      	ldr	r0, [pc, #316]	; (8000c1c <MX_GPIO_Init+0x60c>)
 8000ade:	f001 fb83 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000ae2:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000af4:	230e      	movs	r3, #14
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afc:	4619      	mov	r1, r3
 8000afe:	4844      	ldr	r0, [pc, #272]	; (8000c10 <MX_GPIO_Init+0x600>)
 8000b00:	f001 fb72 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b04:	2308      	movs	r3, #8
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	483e      	ldr	r0, [pc, #248]	; (8000c14 <MX_GPIO_Init+0x604>)
 8000b1c:	f001 fb64 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b32:	230d      	movs	r3, #13
 8000b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4830      	ldr	r0, [pc, #192]	; (8000c00 <MX_GPIO_Init+0x5f0>)
 8000b3e:	f001 fb53 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b42:	2310      	movs	r3, #16
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b52:	4619      	mov	r1, r3
 8000b54:	482c      	ldr	r0, [pc, #176]	; (8000c08 <MX_GPIO_Init+0x5f8>)
 8000b56:	f001 fb47 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b5a:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	482c      	ldr	r0, [pc, #176]	; (8000c20 <MX_GPIO_Init+0x610>)
 8000b70:	f001 fb3a 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b84:	2305      	movs	r3, #5
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4820      	ldr	r0, [pc, #128]	; (8000c10 <MX_GPIO_Init+0x600>)
 8000b90:	f001 fb2a 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000baa:	4619      	mov	r1, r3
 8000bac:	481c      	ldr	r0, [pc, #112]	; (8000c20 <MX_GPIO_Init+0x610>)
 8000bae:	f001 fb1b 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000bb2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bc4:	230d      	movs	r3, #13
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <MX_GPIO_Init+0x610>)
 8000bd0:	f001 fb0a 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000be4:	2302      	movs	r3, #2
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <MX_GPIO_Init+0x600>)
 8000bf0:	f001 fafa 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	e014      	b.n	8000c24 <MX_GPIO_Init+0x614>
 8000bfa:	bf00      	nop
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40021800 	.word	0x40021800
 8000c04:	40022400 	.word	0x40022400
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40022000 	.word	0x40022000
 8000c14:	40022800 	.word	0x40022800
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40021400 	.word	0x40021400
 8000c20:	40021c00 	.word	0x40021c00
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4895      	ldr	r0, [pc, #596]	; (8000e94 <MX_GPIO_Init+0x884>)
 8000c3e:	f001 fad3 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c48:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c56:	4619      	mov	r1, r3
 8000c58:	488f      	ldr	r0, [pc, #572]	; (8000e98 <MX_GPIO_Init+0x888>)
 8000c5a:	f001 fac5 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c5e:	23c0      	movs	r3, #192	; 0xc0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c76:	4619      	mov	r1, r3
 8000c78:	4888      	ldr	r0, [pc, #544]	; (8000e9c <MX_GPIO_Init+0x88c>)
 8000c7a:	f001 fab5 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c7e:	2310      	movs	r3, #16
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c8e:	230a      	movs	r3, #10
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4881      	ldr	r0, [pc, #516]	; (8000ea0 <MX_GPIO_Init+0x890>)
 8000c9a:	f001 faa5 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c9e:	2328      	movs	r3, #40	; 0x28
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cae:	230c      	movs	r3, #12
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4879      	ldr	r0, [pc, #484]	; (8000ea0 <MX_GPIO_Init+0x890>)
 8000cba:	f001 fa95 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000cbe:	23c8      	movs	r3, #200	; 0xc8
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4873      	ldr	r0, [pc, #460]	; (8000ea4 <MX_GPIO_Init+0x894>)
 8000cd6:	f001 fa87 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000cda:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	486e      	ldr	r0, [pc, #440]	; (8000ea8 <MX_GPIO_Init+0x898>)
 8000cf0:	f001 fa7a 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d04:	230c      	movs	r3, #12
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4863      	ldr	r0, [pc, #396]	; (8000e9c <MX_GPIO_Init+0x88c>)
 8000d10:	f001 fa6a 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d14:	2305      	movs	r3, #5
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d24:	230a      	movs	r3, #10
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	485b      	ldr	r0, [pc, #364]	; (8000e9c <MX_GPIO_Init+0x88c>)
 8000d30:	f001 fa5a 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d34:	2332      	movs	r3, #50	; 0x32
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d44:	230b      	movs	r3, #11
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4853      	ldr	r0, [pc, #332]	; (8000e9c <MX_GPIO_Init+0x88c>)
 8000d50:	f001 fa4a 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d54:	2304      	movs	r3, #4
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d64:	2309      	movs	r3, #9
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	484f      	ldr	r0, [pc, #316]	; (8000eac <MX_GPIO_Init+0x89c>)
 8000d70:	f001 fa3a 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d86:	2309      	movs	r3, #9
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4847      	ldr	r0, [pc, #284]	; (8000eb0 <MX_GPIO_Init+0x8a0>)
 8000d92:	f001 fa29 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d96:	2304      	movs	r3, #4
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	483e      	ldr	r0, [pc, #248]	; (8000ea4 <MX_GPIO_Init+0x894>)
 8000daa:	f001 fa1d 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dae:	2386      	movs	r3, #134	; 0x86
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dbe:	230b      	movs	r3, #11
 8000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4832      	ldr	r0, [pc, #200]	; (8000e94 <MX_GPIO_Init+0x884>)
 8000dca:	f001 fa0d 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dde:	4619      	mov	r1, r3
 8000de0:	482c      	ldr	r0, [pc, #176]	; (8000e94 <MX_GPIO_Init+0x884>)
 8000de2:	f001 fa01 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000de6:	2350      	movs	r3, #80	; 0x50
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000df6:	230d      	movs	r3, #13
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4824      	ldr	r0, [pc, #144]	; (8000e94 <MX_GPIO_Init+0x884>)
 8000e02:	f001 f9f1 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e06:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0c:	2312      	movs	r3, #18
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e20:	4619      	mov	r1, r3
 8000e22:	481f      	ldr	r0, [pc, #124]	; (8000ea0 <MX_GPIO_Init+0x890>)
 8000e24:	f001 f9e0 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e28:	2328      	movs	r3, #40	; 0x28
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e38:	230a      	movs	r3, #10
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e40:	4619      	mov	r1, r3
 8000e42:	4814      	ldr	r0, [pc, #80]	; (8000e94 <MX_GPIO_Init+0x884>)
 8000e44:	f001 f9d0 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e48:	2340      	movs	r3, #64	; 0x40
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e58:	2309      	movs	r3, #9
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e60:	4619      	mov	r1, r3
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <MX_GPIO_Init+0x890>)
 8000e64:	f001 f9c0 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e68:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e82:	4619      	mov	r1, r3
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <MX_GPIO_Init+0x89c>)
 8000e86:	f001 f9af 	bl	80021e8 <HAL_GPIO_Init>

}
 8000e8a:	bf00      	nop
 8000e8c:	3740      	adds	r7, #64	; 0x40
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40022000 	.word	0x40022000
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40021c00 	.word	0x40021c00
 8000ea4:	40021800 	.word	0x40021800
 8000ea8:	40021400 	.word	0x40021400
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	40020c00 	.word	0x40020c00

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fc5c 	bl	8001776 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f899 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f7ff fba5 	bl	8000610 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000ec6:	f000 f99b 	bl	8001200 <MX_SDMMC1_SD_Init>
  MX_DMA_Init();
 8000eca:	f7ff fb7b 	bl	80005c4 <MX_DMA_Init>
  MX_FATFS_Init();
 8000ece:	f005 f959 	bl	8006184 <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000ed2:	f000 fb75 	bl	80015c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(500);
 8000ed6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000eda:	f000 fca9 	bl	8001830 <HAL_Delay>
  //uint8_t bufferText[] = "Hello";
  //HAL_UART_Transmit(&huart1, &bufferText[0], sizeof(bufferText), 100);

  /* Mount SD before file operations - power up / card swap */
  res = sd_mount();
 8000ede:	f000 f91d 	bl	800111c <sd_mount>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if(res != FR_OK)
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <main+0x44>
      myprintf("sd_mount error (%i)\r\n", res);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	482f      	ldr	r0, [pc, #188]	; (8000fb0 <main+0xfc>)
 8000ef2:	f000 f8e7 	bl	80010c4 <myprintf>
 8000ef6:	e002      	b.n	8000efe <main+0x4a>
  else
      myprintf("SD Mounted\r\n");
 8000ef8:	482e      	ldr	r0, [pc, #184]	; (8000fb4 <main+0x100>)
 8000efa:	f000 f8e3 	bl	80010c4 <myprintf>

  /* FatFS operations */
  /* Start logging to file */
  sd_append_file("welp.txt", "Test append to file1\r\n", START_LOG, CONT_LOG);
 8000efe:	2300      	movs	r3, #0
 8000f00:	2201      	movs	r2, #1
 8000f02:	492d      	ldr	r1, [pc, #180]	; (8000fb8 <main+0x104>)
 8000f04:	482d      	ldr	r0, [pc, #180]	; (8000fbc <main+0x108>)
 8000f06:	f000 f92f 	bl	8001168 <sd_append_file>

  /* Bulk logging to open file */
  sd_append_file("welp.txt", "Test append to file2\r\n", WRITE_LOG, CONT_LOG);
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	492c      	ldr	r1, [pc, #176]	; (8000fc0 <main+0x10c>)
 8000f10:	482a      	ldr	r0, [pc, #168]	; (8000fbc <main+0x108>)
 8000f12:	f000 f929 	bl	8001168 <sd_append_file>
  sd_append_file("welp.txt", "Test append to file3\r\n", WRITE_LOG, CONT_LOG);
 8000f16:	2300      	movs	r3, #0
 8000f18:	2200      	movs	r2, #0
 8000f1a:	492a      	ldr	r1, [pc, #168]	; (8000fc4 <main+0x110>)
 8000f1c:	4827      	ldr	r0, [pc, #156]	; (8000fbc <main+0x108>)
 8000f1e:	f000 f923 	bl	8001168 <sd_append_file>
  sd_append_file("welp.txt", "Test append to file4\r\n", WRITE_LOG, CONT_LOG);
 8000f22:	2300      	movs	r3, #0
 8000f24:	2200      	movs	r2, #0
 8000f26:	4928      	ldr	r1, [pc, #160]	; (8000fc8 <main+0x114>)
 8000f28:	4824      	ldr	r0, [pc, #144]	; (8000fbc <main+0x108>)
 8000f2a:	f000 f91d 	bl	8001168 <sd_append_file>
  sd_append_file("welp.txt", "Test append to file5\r\n", WRITE_LOG, CONT_LOG);
 8000f2e:	2300      	movs	r3, #0
 8000f30:	2200      	movs	r2, #0
 8000f32:	4926      	ldr	r1, [pc, #152]	; (8000fcc <main+0x118>)
 8000f34:	4821      	ldr	r0, [pc, #132]	; (8000fbc <main+0x108>)
 8000f36:	f000 f917 	bl	8001168 <sd_append_file>

  /* Stop logging to file */
  sd_append_file("welp.txt", "Test append to file6\r\n", WRITE_LOG, END_LOG);
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4924      	ldr	r1, [pc, #144]	; (8000fd0 <main+0x11c>)
 8000f40:	481e      	ldr	r0, [pc, #120]	; (8000fbc <main+0x108>)
 8000f42:	f000 f911 	bl	8001168 <sd_append_file>

  /* Start logging to file */
  sd_append_file("welp.txt", "Test append to file7\r\n", START_LOG, CONT_LOG);
 8000f46:	2300      	movs	r3, #0
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4922      	ldr	r1, [pc, #136]	; (8000fd4 <main+0x120>)
 8000f4c:	481b      	ldr	r0, [pc, #108]	; (8000fbc <main+0x108>)
 8000f4e:	f000 f90b 	bl	8001168 <sd_append_file>

  /* Bulk logging to open file */
  sd_append_file("welp.txt", "Test append to file8\r\n", WRITE_LOG, CONT_LOG);
 8000f52:	2300      	movs	r3, #0
 8000f54:	2200      	movs	r2, #0
 8000f56:	4920      	ldr	r1, [pc, #128]	; (8000fd8 <main+0x124>)
 8000f58:	4818      	ldr	r0, [pc, #96]	; (8000fbc <main+0x108>)
 8000f5a:	f000 f905 	bl	8001168 <sd_append_file>
  sd_append_file("welp.txt", "Test append to file9\r\n", WRITE_LOG, CONT_LOG);
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2200      	movs	r2, #0
 8000f62:	491e      	ldr	r1, [pc, #120]	; (8000fdc <main+0x128>)
 8000f64:	4815      	ldr	r0, [pc, #84]	; (8000fbc <main+0x108>)
 8000f66:	f000 f8ff 	bl	8001168 <sd_append_file>
  sd_append_file("welp.txt", "Test append to file10\r\n", WRITE_LOG, CONT_LOG);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	491c      	ldr	r1, [pc, #112]	; (8000fe0 <main+0x12c>)
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <main+0x108>)
 8000f72:	f000 f8f9 	bl	8001168 <sd_append_file>
  sd_append_file("welp.txt", "Test append to file11\r\n", WRITE_LOG, CONT_LOG);
 8000f76:	2300      	movs	r3, #0
 8000f78:	2200      	movs	r2, #0
 8000f7a:	491a      	ldr	r1, [pc, #104]	; (8000fe4 <main+0x130>)
 8000f7c:	480f      	ldr	r0, [pc, #60]	; (8000fbc <main+0x108>)
 8000f7e:	f000 f8f3 	bl	8001168 <sd_append_file>

  /* Stop logging to file */
  sd_append_file("welp.txt", "Test append to file12\r\n", WRITE_LOG, END_LOG);
 8000f82:	2301      	movs	r3, #1
 8000f84:	2200      	movs	r2, #0
 8000f86:	4918      	ldr	r1, [pc, #96]	; (8000fe8 <main+0x134>)
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <main+0x108>)
 8000f8a:	f000 f8ed 	bl	8001168 <sd_append_file>

  /* Unmount SD after file operations - power down / card swap */
  res = sd_unmount();
 8000f8e:	f000 f8d9 	bl	8001144 <sd_unmount>
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if(res != FR_OK)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <main+0xf4>
      myprintf("sd_unmount error (%i)\r\n", res);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4812      	ldr	r0, [pc, #72]	; (8000fec <main+0x138>)
 8000fa2:	f000 f88f 	bl	80010c4 <myprintf>
 8000fa6:	e002      	b.n	8000fae <main+0xfa>
  else
      myprintf("SD Unmounted\r\n");
 8000fa8:	4811      	ldr	r0, [pc, #68]	; (8000ff0 <main+0x13c>)
 8000faa:	f000 f88b 	bl	80010c4 <myprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <main+0xfa>
 8000fb0:	0800934c 	.word	0x0800934c
 8000fb4:	08009364 	.word	0x08009364
 8000fb8:	08009374 	.word	0x08009374
 8000fbc:	0800938c 	.word	0x0800938c
 8000fc0:	08009398 	.word	0x08009398
 8000fc4:	080093b0 	.word	0x080093b0
 8000fc8:	080093c8 	.word	0x080093c8
 8000fcc:	080093e0 	.word	0x080093e0
 8000fd0:	080093f8 	.word	0x080093f8
 8000fd4:	08009410 	.word	0x08009410
 8000fd8:	08009428 	.word	0x08009428
 8000fdc:	08009440 	.word	0x08009440
 8000fe0:	08009458 	.word	0x08009458
 8000fe4:	08009470 	.word	0x08009470
 8000fe8:	08009488 	.word	0x08009488
 8000fec:	080094a0 	.word	0x080094a0
 8000ff0:	080094b8 	.word	0x080094b8

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	; 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2230      	movs	r2, #48	; 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f007 fd06 	bl	8008a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <SystemClock_Config+0xc8>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a27      	ldr	r2, [pc, #156]	; (80010bc <SystemClock_Config+0xc8>)
 800101e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <SystemClock_Config+0xc8>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001030:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <SystemClock_Config+0xcc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <SystemClock_Config+0xcc>)
 800103a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <SystemClock_Config+0xcc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800105c:	2300      	movs	r3, #0
 800105e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001060:	2308      	movs	r3, #8
 8001062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001064:	2332      	movs	r3, #50	; 0x32
 8001066:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800106c:	2302      	movs	r3, #2
 800106e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f001 fa95 	bl	80025a4 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001080:	f000 f846 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001090:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2101      	movs	r1, #1
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fd22 	bl	8002aec <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80010ae:	f000 f82f 	bl	8001110 <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3750      	adds	r7, #80	; 0x50
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <myprintf>:

/* USER CODE BEGIN 4 */
void myprintf(const char *fmt, ...)
{
 80010c4:	b40f      	push	{r0, r1, r2, r3}
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010da:	480b      	ldr	r0, [pc, #44]	; (8001108 <myprintf+0x44>)
 80010dc:	f007 fcce 	bl	8008a7c <vsniprintf>
    va_end(args);

    int len = strlen(buffer);
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <myprintf+0x44>)
 80010e2:	f7ff f895 	bl	8000210 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, 100);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	2364      	movs	r3, #100	; 0x64
 80010f0:	4905      	ldr	r1, [pc, #20]	; (8001108 <myprintf+0x44>)
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <myprintf+0x48>)
 80010f4:	f003 fe49 	bl	8004d8a <HAL_UART_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001102:	b004      	add	sp, #16
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000008c 	.word	0x2000008c
 800110c:	20000508 	.word	0x20000508

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <sd_mount>:
uint8_t testReadBuf[45];


/* Mount drive, default root 0:/ */
FRESULT sd_mount()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
    FRESULT res;

    res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8001122:	2201      	movs	r2, #1
 8001124:	4905      	ldr	r1, [pc, #20]	; (800113c <sd_mount+0x20>)
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <sd_mount+0x24>)
 8001128:	f006 ffcc 	bl	80080c4 <f_mount>
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]

    return res;
 8001130:	79fb      	ldrb	r3, [r7, #7]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000598 	.word	0x20000598
 8001140:	2000059c 	.word	0x2000059c

08001144 <sd_unmount>:


/* Unmount drive, default root 0:/ */
FRESULT sd_unmount()
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
    FRESULT res;

    res = f_mount(NULL, (TCHAR const*)SDPath, 1);
 800114a:	2201      	movs	r2, #1
 800114c:	4905      	ldr	r1, [pc, #20]	; (8001164 <sd_unmount+0x20>)
 800114e:	2000      	movs	r0, #0
 8001150:	f006 ffb8 	bl	80080c4 <f_mount>
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]

    return res;
 8001158:	79fb      	ldrb	r3, [r7, #7]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000598 	.word	0x20000598

08001168 <sd_append_file>:
    return res;
}

/*TODO: Return on error? */
FRESULT sd_append_file(char *name, char* dataStr, bool init, bool closeFile)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	460b      	mov	r3, r1
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	4613      	mov	r3, r2
 800117c:	71bb      	strb	r3, [r7, #6]

    /* Keep these alive between function calls */
    static FIL file;
    static uint32_t countSync = 0;

    countSync++;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <sd_append_file+0x90>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <sd_append_file+0x90>)
 8001186:	6013      	str	r3, [r2, #0]

    /* Only open if first time in */
    if(init == true)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <sd_append_file+0x34>
        res = f_open(&file, name, FA_OPEN_APPEND|FA_READ|FA_WRITE);
 800118e:	2233      	movs	r2, #51	; 0x33
 8001190:	68f9      	ldr	r1, [r7, #12]
 8001192:	481a      	ldr	r0, [pc, #104]	; (80011fc <sd_append_file+0x94>)
 8001194:	f006 ffdc 	bl	8008150 <f_open>
 8001198:	4603      	mov	r3, r0
 800119a:	75fb      	strb	r3, [r7, #23]

    /* Write data string to file */
    res = f_write(&file, dataStr, strlen(dataStr), &bytesWrote);
 800119c:	68b8      	ldr	r0, [r7, #8]
 800119e:	f7ff f837 	bl	8000210 <strlen>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	4814      	ldr	r0, [pc, #80]	; (80011fc <sd_append_file+0x94>)
 80011ac:	f007 f98e 	bl	80084cc <f_write>
 80011b0:	4603      	mov	r3, r0
 80011b2:	75fb      	strb	r3, [r7, #23]

    /* Sync with file system after a number of iterations */
    /* No need to call if file to be closed, as this will sync */
    if((countSync == SYNC_NUM) && (closeFile == false))
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <sd_append_file+0x90>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d10d      	bne.n	80011d8 <sd_append_file+0x70>
 80011bc:	79bb      	ldrb	r3, [r7, #6]
 80011be:	f083 0301 	eor.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d007      	beq.n	80011d8 <sd_append_file+0x70>
    {
        res = f_sync(&file);
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <sd_append_file+0x94>)
 80011ca:	f007 faf4 	bl	80087b6 <f_sync>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]
        countSync = 0;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <sd_append_file+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
    }

    /* Optional close file */
    if(closeFile == true)
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <sd_append_file+0x86>
    {
        res = f_close(&file);
 80011de:	4807      	ldr	r0, [pc, #28]	; (80011fc <sd_append_file+0x94>)
 80011e0:	f007 fb67 	bl	80088b2 <f_close>
 80011e4:	4603      	mov	r3, r0
 80011e6:	75fb      	strb	r3, [r7, #23]
        countSync = 0;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <sd_append_file+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
    }

    return res;
 80011ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000018c 	.word	0x2000018c
 80011fc:	20000190 	.word	0x20000190

08001200 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 8001206:	4a0d      	ldr	r2, [pc, #52]	; (800123c <MX_SDMMC1_SD_Init+0x3c>)
 8001208:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <MX_SDMMC1_SD_Init+0x38>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	200003c0 	.word	0x200003c0
 800123c:	40012c00 	.word	0x40012c00

08001240 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0ac      	sub	sp, #176	; 0xb0
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001258:	f107 0318 	add.w	r3, r7, #24
 800125c:	2284      	movs	r2, #132	; 0x84
 800125e:	2100      	movs	r1, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f007 fbd7 	bl	8008a14 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a73      	ldr	r2, [pc, #460]	; (8001438 <HAL_SD_MspInit+0x1f8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	f040 80de 	bne.w	800142e <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001272:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001276:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001278:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800127c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001280:	f107 0318 	add.w	r3, r7, #24
 8001284:	4618      	mov	r0, r3
 8001286:	f001 fe17 	bl	8002eb8 <HAL_RCCEx_PeriphCLKConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001290:	f7ff ff3e 	bl	8001110 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001294:	4b69      	ldr	r3, [pc, #420]	; (800143c <HAL_SD_MspInit+0x1fc>)
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	4a68      	ldr	r2, [pc, #416]	; (800143c <HAL_SD_MspInit+0x1fc>)
 800129a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800129e:	6453      	str	r3, [r2, #68]	; 0x44
 80012a0:	4b66      	ldr	r3, [pc, #408]	; (800143c <HAL_SD_MspInit+0x1fc>)
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	4b63      	ldr	r3, [pc, #396]	; (800143c <HAL_SD_MspInit+0x1fc>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a62      	ldr	r2, [pc, #392]	; (800143c <HAL_SD_MspInit+0x1fc>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b60      	ldr	r3, [pc, #384]	; (800143c <HAL_SD_MspInit+0x1fc>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c4:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_SD_MspInit+0x1fc>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a5c      	ldr	r2, [pc, #368]	; (800143c <HAL_SD_MspInit+0x1fc>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b5a      	ldr	r3, [pc, #360]	; (800143c <HAL_SD_MspInit+0x1fc>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80012dc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012f6:	230c      	movs	r3, #12
 80012f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001300:	4619      	mov	r1, r3
 8001302:	484f      	ldr	r0, [pc, #316]	; (8001440 <HAL_SD_MspInit+0x200>)
 8001304:	f000 ff70 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8001308:	2304      	movs	r3, #4
 800130a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001320:	230c      	movs	r3, #12
 8001322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800132a:	4619      	mov	r1, r3
 800132c:	4845      	ldr	r0, [pc, #276]	; (8001444 <HAL_SD_MspInit+0x204>)
 800132e:	f000 ff5b 	bl	80021e8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001332:	4b45      	ldr	r3, [pc, #276]	; (8001448 <HAL_SD_MspInit+0x208>)
 8001334:	4a45      	ldr	r2, [pc, #276]	; (800144c <HAL_SD_MspInit+0x20c>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001338:	4b43      	ldr	r3, [pc, #268]	; (8001448 <HAL_SD_MspInit+0x208>)
 800133a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001340:	4b41      	ldr	r3, [pc, #260]	; (8001448 <HAL_SD_MspInit+0x208>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001346:	4b40      	ldr	r3, [pc, #256]	; (8001448 <HAL_SD_MspInit+0x208>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800134c:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <HAL_SD_MspInit+0x208>)
 800134e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001352:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001354:	4b3c      	ldr	r3, [pc, #240]	; (8001448 <HAL_SD_MspInit+0x208>)
 8001356:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800135a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800135c:	4b3a      	ldr	r3, [pc, #232]	; (8001448 <HAL_SD_MspInit+0x208>)
 800135e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001362:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_SD_MspInit+0x208>)
 8001366:	2220      	movs	r2, #32
 8001368:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800136a:	4b37      	ldr	r3, [pc, #220]	; (8001448 <HAL_SD_MspInit+0x208>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001370:	4b35      	ldr	r3, [pc, #212]	; (8001448 <HAL_SD_MspInit+0x208>)
 8001372:	2204      	movs	r2, #4
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001376:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_SD_MspInit+0x208>)
 8001378:	2203      	movs	r2, #3
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800137c:	4b32      	ldr	r3, [pc, #200]	; (8001448 <HAL_SD_MspInit+0x208>)
 800137e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001384:	4b30      	ldr	r3, [pc, #192]	; (8001448 <HAL_SD_MspInit+0x208>)
 8001386:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800138a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800138c:	482e      	ldr	r0, [pc, #184]	; (8001448 <HAL_SD_MspInit+0x208>)
 800138e:	f000 fb85 	bl	8001a9c <HAL_DMA_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001398:	f7ff feba 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <HAL_SD_MspInit+0x208>)
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
 80013a2:	4a29      	ldr	r2, [pc, #164]	; (8001448 <HAL_SD_MspInit+0x208>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013aa:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <HAL_SD_MspInit+0x214>)
 80013ac:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013b4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013b8:	2240      	movs	r2, #64	; 0x40
 80013ba:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013bc:	4b24      	ldr	r3, [pc, #144]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013d8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013dc:	2220      	movs	r2, #32
 80013de:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013e8:	2204      	movs	r2, #4
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013ee:	2203      	movs	r2, #3
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_SD_MspInit+0x210>)
 80013fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001400:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001402:	4813      	ldr	r0, [pc, #76]	; (8001450 <HAL_SD_MspInit+0x210>)
 8001404:	f000 fb4a 	bl	8001a9c <HAL_DMA_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 800140e:	f7ff fe7f 	bl	8001110 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_SD_MspInit+0x210>)
 8001416:	63da      	str	r2, [r3, #60]	; 0x3c
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_SD_MspInit+0x210>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2031      	movs	r0, #49	; 0x31
 8001424:	f000 fb03 	bl	8001a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001428:	2031      	movs	r0, #49	; 0x31
 800142a:	f000 fb1c 	bl	8001a66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800142e:	bf00      	nop
 8001430:	37b0      	adds	r7, #176	; 0xb0
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40012c00 	.word	0x40012c00
 800143c:	40023800 	.word	0x40023800
 8001440:	40020800 	.word	0x40020800
 8001444:	40020c00 	.word	0x40020c00
 8001448:	20000444 	.word	0x20000444
 800144c:	40026458 	.word	0x40026458
 8001450:	200004a4 	.word	0x200004a4
 8001454:	400264a0 	.word	0x400264a0

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_MspInit+0x44>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_MspInit+0x44>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_MspInit+0x44>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_MspInit+0x44>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_MspInit+0x44>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_MspInit+0x44>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f000 f980 	bl	80017f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <SDMMC1_IRQHandler+0x10>)
 80014fa:	f002 fb4d 	bl	8003b98 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200003c0 	.word	0x200003c0

08001508 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <DMA2_Stream3_IRQHandler+0x10>)
 800150e:	f000 fbf5 	bl	8001cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000444 	.word	0x20000444

0800151c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA2_Stream6_IRQHandler+0x10>)
 8001522:	f000 fbeb 	bl	8001cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200004a4 	.word	0x200004a4

08001530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <_sbrk+0x5c>)
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <_sbrk+0x60>)
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <_sbrk+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <_sbrk+0x64>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <_sbrk+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	429a      	cmp	r2, r3
 800155e:	d207      	bcs.n	8001570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001560:	f007 fa2e 	bl	80089c0 <__errno>
 8001564:	4603      	mov	r3, r0
 8001566:	220c      	movs	r2, #12
 8001568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	e009      	b.n	8001584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <_sbrk+0x64>)
 8001580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20050000 	.word	0x20050000
 8001590:	00000800 	.word	0x00000800
 8001594:	20000504 	.word	0x20000504
 8001598:	20000818 	.word	0x20000818

0800159c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_USART1_UART_Init+0x58>)
 80015c6:	4a15      	ldr	r2, [pc, #84]	; (800161c <MX_USART1_UART_Init+0x5c>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_USART1_UART_Init+0x58>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_USART1_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_USART1_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_USART1_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_USART1_UART_Init+0x58>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_USART1_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_USART1_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_USART1_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_USART1_UART_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_USART1_UART_Init+0x58>)
 8001604:	f003 fb73 	bl	8004cee <HAL_UART_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800160e:	f7ff fd7f 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000508 	.word	0x20000508
 800161c:	40011000 	.word	0x40011000

08001620 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0ac      	sub	sp, #176	; 0xb0
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	2284      	movs	r2, #132	; 0x84
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f007 f9e7 	bl	8008a14 <memset>
  if(uartHandle->Instance==USART1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a32      	ldr	r2, [pc, #200]	; (8001714 <HAL_UART_MspInit+0xf4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d15c      	bne.n	800170a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001650:	2340      	movs	r3, #64	; 0x40
 8001652:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001654:	2300      	movs	r3, #0
 8001656:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	4618      	mov	r0, r3
 800165e:	f001 fc2b 	bl	8002eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001668:	f7ff fd52 	bl	8001110 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <HAL_UART_MspInit+0xf8>)
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	4a29      	ldr	r2, [pc, #164]	; (8001718 <HAL_UART_MspInit+0xf8>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6453      	str	r3, [r2, #68]	; 0x44
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <HAL_UART_MspInit+0xf8>)
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_UART_MspInit+0xf8>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	4a23      	ldr	r2, [pc, #140]	; (8001718 <HAL_UART_MspInit+0xf8>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	6313      	str	r3, [r2, #48]	; 0x30
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_UART_MspInit+0xf8>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_UART_MspInit+0xf8>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <HAL_UART_MspInit+0xf8>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_UART_MspInit+0xf8>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016cc:	2307      	movs	r3, #7
 80016ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016d6:	4619      	mov	r1, r3
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <HAL_UART_MspInit+0xfc>)
 80016da:	f000 fd85 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f8:	2307      	movs	r3, #7
 80016fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001702:	4619      	mov	r1, r3
 8001704:	4806      	ldr	r0, [pc, #24]	; (8001720 <HAL_UART_MspInit+0x100>)
 8001706:	f000 fd6f 	bl	80021e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800170a:	bf00      	nop
 800170c:	37b0      	adds	r7, #176	; 0xb0
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40011000 	.word	0x40011000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020400 	.word	0x40020400
 8001720:	40020000 	.word	0x40020000

08001724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800175c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172a:	490e      	ldr	r1, [pc, #56]	; (8001764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001740:	4c0b      	ldr	r4, [pc, #44]	; (8001770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800174e:	f7ff ff25 	bl	800159c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001752:	f007 f93b 	bl	80089cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001756:	f7ff fbad 	bl	8000eb4 <main>
  bx  lr    
 800175a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800175c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001768:	08009604 	.word	0x08009604
  ldr r2, =_sbss
 800176c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001770:	20000818 	.word	0x20000818

08001774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC_IRQHandler>

08001776 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177a:	2003      	movs	r0, #3
 800177c:	f000 f94c 	bl	8001a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001780:	2000      	movs	r0, #0
 8001782:	f000 f805 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001786:	f7ff fe67 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x54>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x58>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f967 	bl	8001a82 <HAL_SYSTICK_Config>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e00e      	b.n	80017dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d80a      	bhi.n	80017da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f92f 	bl	8001a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d0:	4a06      	ldr	r2, [pc, #24]	; (80017ec <HAL_InitTick+0x5c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20000004 	.word	0x20000004

080017f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x20>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x24>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	; (8001814 <HAL_IncTick+0x24>)
 8001802:	6013      	str	r3, [r2, #0]
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000008 	.word	0x20000008
 8001814:	20000590 	.word	0x20000590

08001818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_GetTick+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000590 	.word	0x20000590

08001830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff ffee 	bl	8001818 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d005      	beq.n	8001856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_Delay+0x44>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	461a      	mov	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001856:	bf00      	nop
 8001858:	f7ff ffde 	bl	8001818 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d8f7      	bhi.n	8001858 <HAL_Delay+0x28>
  {
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008

08001878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <__NVIC_SetPriorityGrouping+0x40>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001894:	4013      	ands	r3, r2
 8001896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <__NVIC_SetPriorityGrouping+0x44>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x40>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00
 80018bc:	05fa0000 	.word	0x05fa0000

080018c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <__NVIC_GetPriorityGrouping+0x18>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	f003 0307 	and.w	r3, r3, #7
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	db0b      	blt.n	8001906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	f003 021f 	and.w	r2, r3, #31
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <__NVIC_EnableIRQ+0x38>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	095b      	lsrs	r3, r3, #5
 80018fc:	2001      	movs	r0, #1
 80018fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100

08001918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	6039      	str	r1, [r7, #0]
 8001922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0a      	blt.n	8001942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	b2da      	uxtb	r2, r3
 8001930:	490c      	ldr	r1, [pc, #48]	; (8001964 <__NVIC_SetPriority+0x4c>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	0112      	lsls	r2, r2, #4
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	440b      	add	r3, r1
 800193c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001940:	e00a      	b.n	8001958 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4908      	ldr	r1, [pc, #32]	; (8001968 <__NVIC_SetPriority+0x50>)
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	3b04      	subs	r3, #4
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	440b      	add	r3, r1
 8001956:	761a      	strb	r2, [r3, #24]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	; 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f1c3 0307 	rsb	r3, r3, #7
 8001986:	2b04      	cmp	r3, #4
 8001988:	bf28      	it	cs
 800198a:	2304      	movcs	r3, #4
 800198c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3304      	adds	r3, #4
 8001992:	2b06      	cmp	r3, #6
 8001994:	d902      	bls.n	800199c <NVIC_EncodePriority+0x30>
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3b03      	subs	r3, #3
 800199a:	e000      	b.n	800199e <NVIC_EncodePriority+0x32>
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	f04f 32ff 	mov.w	r2, #4294967295
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa01 f303 	lsl.w	r3, r1, r3
 80019be:	43d9      	mvns	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	4313      	orrs	r3, r2
         );
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e4:	d301      	bcc.n	80019ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00f      	b.n	8001a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <SysTick_Config+0x40>)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f2:	210f      	movs	r1, #15
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f7ff ff8e 	bl	8001918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <SysTick_Config+0x40>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <SysTick_Config+0x40>)
 8001a04:	2207      	movs	r2, #7
 8001a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	e000e010 	.word	0xe000e010

08001a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ff29 	bl	8001878 <__NVIC_SetPriorityGrouping>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b086      	sub	sp, #24
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a40:	f7ff ff3e 	bl	80018c0 <__NVIC_GetPriorityGrouping>
 8001a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	6978      	ldr	r0, [r7, #20]
 8001a4c:	f7ff ff8e 	bl	800196c <NVIC_EncodePriority>
 8001a50:	4602      	mov	r2, r0
 8001a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff5d 	bl	8001918 <__NVIC_SetPriority>
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff31 	bl	80018dc <__NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ffa2 	bl	80019d4 <SysTick_Config>
 8001a90:	4603      	mov	r3, r0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
	...

08001a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff feb6 	bl	8001818 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e099      	b.n	8001bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad8:	e00f      	b.n	8001afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ada:	f7ff fe9d 	bl	8001818 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d908      	bls.n	8001afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2220      	movs	r2, #32
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2203      	movs	r2, #3
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e078      	b.n	8001bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e8      	bne.n	8001ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <HAL_DMA_Init+0x158>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d107      	bne.n	8001b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f023 0307 	bic.w	r3, r3, #7
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d117      	bne.n	8001bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00e      	beq.n	8001bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 faa5 	bl	80020f0 <DMA_CheckFifoParam>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e016      	b.n	8001bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 fa5c 	bl	8002084 <DMA_CalcBaseAndBitshift>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd4:	223f      	movs	r2, #63	; 0x3f
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	f010803f 	.word	0xf010803f

08001bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_DMA_Start_IT+0x26>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e048      	b.n	8001cb0 <HAL_DMA_Start_IT+0xb8>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d137      	bne.n	8001ca2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2202      	movs	r2, #2
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 f9ee 	bl	8002028 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	409a      	lsls	r2, r3
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0216 	orr.w	r2, r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c76:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0208 	orr.w	r2, r2, #8
 8001c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e005      	b.n	8001cae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001caa:	2302      	movs	r3, #2
 8001cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d004      	beq.n	8001cd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00c      	b.n	8001cf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2205      	movs	r2, #5
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0201 	bic.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001d08:	4b8e      	ldr	r3, [pc, #568]	; (8001f44 <HAL_DMA_IRQHandler+0x248>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a8e      	ldr	r2, [pc, #568]	; (8001f48 <HAL_DMA_IRQHandler+0x24c>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0a9b      	lsrs	r3, r3, #10
 8001d14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2208      	movs	r2, #8
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01a      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0204 	bic.w	r2, r2, #4
 8001d4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2208      	movs	r2, #8
 8001d56:	409a      	lsls	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d012      	beq.n	8001d9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f043 0202 	orr.w	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	2204      	movs	r2, #4
 8001da4:	409a      	lsls	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d012      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f043 0204 	orr.w	r2, r3, #4
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	2210      	movs	r2, #16
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d043      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03c      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2210      	movs	r2, #16
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d018      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d108      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d024      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
 8001e2a:	e01f      	b.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
 8001e3c:	e016      	b.n	8001e6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d107      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0208 	bic.w	r2, r2, #8
 8001e5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2220      	movs	r2, #32
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 808f 	beq.w	8001f9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8087 	beq.w	8001f9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2220      	movs	r2, #32
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d136      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0216 	bic.w	r2, r2, #22
 8001eb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x1da>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0208 	bic.w	r2, r2, #8
 8001ee4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	223f      	movs	r2, #63	; 0x3f
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d07e      	beq.n	8002008 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
        }
        return;
 8001f12:	e079      	b.n	8002008 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01d      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d031      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
 8001f40:	e02c      	b.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000
 8001f48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d023      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
 8001f5c:	e01e      	b.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10f      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0210 	bic.w	r2, r2, #16
 8001f7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d032      	beq.n	800200a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d307      	bcc.n	8001fe4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f2      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x2cc>
 8001fe2:	e000      	b.n	8001fe6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fe4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e000      	b.n	800200a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002008:	bf00      	nop
    }
  }
}
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b40      	cmp	r3, #64	; 0x40
 8002054:	d108      	bne.n	8002068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002066:	e007      	b.n	8002078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	60da      	str	r2, [r3, #12]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3b10      	subs	r3, #16
 8002094:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <DMA_CalcBaseAndBitshift+0x60>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <DMA_CalcBaseAndBitshift+0x64>)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d908      	bls.n	80020c4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <DMA_CalcBaseAndBitshift+0x68>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	1d1a      	adds	r2, r3, #4
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	659a      	str	r2, [r3, #88]	; 0x58
 80020c2:	e006      	b.n	80020d2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	461a      	mov	r2, r3
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <DMA_CalcBaseAndBitshift+0x68>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	aaaaaaab 	.word	0xaaaaaaab
 80020e8:	08009524 	.word	0x08009524
 80020ec:	fffffc00 	.word	0xfffffc00

080020f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11f      	bne.n	800214a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d856      	bhi.n	80021be <DMA_CheckFifoParam+0xce>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <DMA_CheckFifoParam+0x28>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	08002129 	.word	0x08002129
 800211c:	0800213b 	.word	0x0800213b
 8002120:	08002129 	.word	0x08002129
 8002124:	080021bf 	.word	0x080021bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d046      	beq.n	80021c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002138:	e043      	b.n	80021c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002142:	d140      	bne.n	80021c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002148:	e03d      	b.n	80021c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002152:	d121      	bne.n	8002198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d837      	bhi.n	80021ca <DMA_CheckFifoParam+0xda>
 800215a:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <DMA_CheckFifoParam+0x70>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002171 	.word	0x08002171
 8002164:	08002177 	.word	0x08002177
 8002168:	08002171 	.word	0x08002171
 800216c:	08002189 	.word	0x08002189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
      break;
 8002174:	e030      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d025      	beq.n	80021ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002186:	e022      	b.n	80021ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002190:	d11f      	bne.n	80021d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002196:	e01c      	b.n	80021d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d903      	bls.n	80021a6 <DMA_CheckFifoParam+0xb6>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d003      	beq.n	80021ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021a4:	e018      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
      break;
 80021aa:	e015      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00e      	beq.n	80021d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
      break;
 80021bc:	e00b      	b.n	80021d6 <DMA_CheckFifoParam+0xe6>
      break;
 80021be:	bf00      	nop
 80021c0:	e00a      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021c2:	bf00      	nop
 80021c4:	e008      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021c6:	bf00      	nop
 80021c8:	e006      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e004      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
 80021d0:	e002      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021d2:	bf00      	nop
 80021d4:	e000      	b.n	80021d8 <DMA_CheckFifoParam+0xe8>
      break;
 80021d6:	bf00      	nop
    }
  } 
  
  return status; 
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e175      	b.n	80024f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 8164 	bne.w	80024ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d005      	beq.n	800223e <HAL_GPIO_Init+0x56>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d017      	beq.n	80022dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80be 	beq.w	80024ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	4b66      	ldr	r3, [pc, #408]	; (800250c <HAL_GPIO_Init+0x324>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	4a65      	ldr	r2, [pc, #404]	; (800250c <HAL_GPIO_Init+0x324>)
 8002378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237c:	6453      	str	r3, [r2, #68]	; 0x44
 800237e:	4b63      	ldr	r3, [pc, #396]	; (800250c <HAL_GPIO_Init+0x324>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800238a:	4a61      	ldr	r2, [pc, #388]	; (8002510 <HAL_GPIO_Init+0x328>)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	3302      	adds	r3, #2
 8002392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	220f      	movs	r2, #15
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_GPIO_Init+0x32c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d037      	beq.n	8002426 <HAL_GPIO_Init+0x23e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a57      	ldr	r2, [pc, #348]	; (8002518 <HAL_GPIO_Init+0x330>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d031      	beq.n	8002422 <HAL_GPIO_Init+0x23a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a56      	ldr	r2, [pc, #344]	; (800251c <HAL_GPIO_Init+0x334>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x236>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a55      	ldr	r2, [pc, #340]	; (8002520 <HAL_GPIO_Init+0x338>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x232>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a54      	ldr	r2, [pc, #336]	; (8002524 <HAL_GPIO_Init+0x33c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x22e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a53      	ldr	r2, [pc, #332]	; (8002528 <HAL_GPIO_Init+0x340>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x22a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_GPIO_Init+0x344>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x226>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a51      	ldr	r2, [pc, #324]	; (8002530 <HAL_GPIO_Init+0x348>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x222>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a50      	ldr	r2, [pc, #320]	; (8002534 <HAL_GPIO_Init+0x34c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x21e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4f      	ldr	r2, [pc, #316]	; (8002538 <HAL_GPIO_Init+0x350>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x21a>
 80023fe:	2309      	movs	r3, #9
 8002400:	e012      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002402:	230a      	movs	r3, #10
 8002404:	e010      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002406:	2308      	movs	r3, #8
 8002408:	e00e      	b.n	8002428 <HAL_GPIO_Init+0x240>
 800240a:	2307      	movs	r3, #7
 800240c:	e00c      	b.n	8002428 <HAL_GPIO_Init+0x240>
 800240e:	2306      	movs	r3, #6
 8002410:	e00a      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002412:	2305      	movs	r3, #5
 8002414:	e008      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002416:	2304      	movs	r3, #4
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x240>
 800241a:	2303      	movs	r3, #3
 800241c:	e004      	b.n	8002428 <HAL_GPIO_Init+0x240>
 800241e:	2302      	movs	r3, #2
 8002420:	e002      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002422:	2301      	movs	r3, #1
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x240>
 8002426:	2300      	movs	r3, #0
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	f002 0203 	and.w	r2, r2, #3
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	4093      	lsls	r3, r2
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002438:	4935      	ldr	r1, [pc, #212]	; (8002510 <HAL_GPIO_Init+0x328>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	3302      	adds	r3, #2
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002446:	4b3d      	ldr	r3, [pc, #244]	; (800253c <HAL_GPIO_Init+0x354>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800246a:	4a34      	ldr	r2, [pc, #208]	; (800253c <HAL_GPIO_Init+0x354>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <HAL_GPIO_Init+0x354>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002494:	4a29      	ldr	r2, [pc, #164]	; (800253c <HAL_GPIO_Init+0x354>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800249a:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_GPIO_Init+0x354>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024be:	4a1f      	ldr	r2, [pc, #124]	; (800253c <HAL_GPIO_Init+0x354>)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <HAL_GPIO_Init+0x354>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <HAL_GPIO_Init+0x354>)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3301      	adds	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b0f      	cmp	r3, #15
 80024f8:	f67f ae86 	bls.w	8002208 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3724      	adds	r7, #36	; 0x24
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800
 8002510:	40013800 	.word	0x40013800
 8002514:	40020000 	.word	0x40020000
 8002518:	40020400 	.word	0x40020400
 800251c:	40020800 	.word	0x40020800
 8002520:	40020c00 	.word	0x40020c00
 8002524:	40021000 	.word	0x40021000
 8002528:	40021400 	.word	0x40021400
 800252c:	40021800 	.word	0x40021800
 8002530:	40021c00 	.word	0x40021c00
 8002534:	40022000 	.word	0x40022000
 8002538:	40022400 	.word	0x40022400
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	887b      	ldrh	r3, [r7, #2]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d002      	beq.n	800255e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e001      	b.n	8002562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e291      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	4b96      	ldr	r3, [pc, #600]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d4:	4b93      	ldr	r3, [pc, #588]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d112      	bne.n	8002606 <HAL_RCC_OscConfig+0x62>
 80025e0:	4b90      	ldr	r3, [pc, #576]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b8d      	ldr	r3, [pc, #564]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x130>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d168      	bne.n	80026d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e26b      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x7a>
 8002610:	4b84      	ldr	r3, [pc, #528]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a83      	ldr	r2, [pc, #524]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0xd8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x9c>
 8002626:	4b7f      	ldr	r3, [pc, #508]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7e      	ldr	r2, [pc, #504]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b7c      	ldr	r3, [pc, #496]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7b      	ldr	r2, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xd8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xc0>
 800264a:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a75      	ldr	r2, [pc, #468]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b73      	ldr	r3, [pc, #460]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a72      	ldr	r2, [pc, #456]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd8>
 8002664:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6e      	ldr	r2, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b6c      	ldr	r3, [pc, #432]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a6b      	ldr	r2, [pc, #428]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff f8c8 	bl	8001818 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff f8c4 	bl	8001818 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e21f      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b61      	ldr	r3, [pc, #388]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe8>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7ff f8b4 	bl	8001818 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff f8b0 	bl	8001818 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e20b      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b57      	ldr	r3, [pc, #348]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x110>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d069      	beq.n	80027b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ee:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x190>
 80026fa:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x17a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1df      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	493d      	ldr	r1, [pc, #244]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e040      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d023      	beq.n	8002784 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b39      	ldr	r3, [pc, #228]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a38      	ldr	r2, [pc, #224]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7ff f866 	bl	8001818 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002750:	f7ff f862 	bl	8001818 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1bd      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002762:	4b30      	ldr	r3, [pc, #192]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4929      	ldr	r1, [pc, #164]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
 8002782:	e018      	b.n	80027b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002784:	4b27      	ldr	r3, [pc, #156]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a26      	ldr	r2, [pc, #152]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7ff f842 	bl	8001818 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002798:	f7ff f83e 	bl	8001818 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e199      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d038      	beq.n	8002834 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d019      	beq.n	80027fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80027cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ce:	4a15      	ldr	r2, [pc, #84]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7ff f81f 	bl	8001818 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027de:	f7ff f81b 	bl	8001818 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e176      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 80027f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x23a>
 80027fc:	e01a      	b.n	8002834 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <HAL_RCC_OscConfig+0x280>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7ff f805 	bl	8001818 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002812:	f7ff f801 	bl	8001818 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d903      	bls.n	8002828 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e15c      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
 8002824:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	4b91      	ldr	r3, [pc, #580]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 800282a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ee      	bne.n	8002812 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a4 	beq.w	800298a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b8b      	ldr	r3, [pc, #556]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	4b88      	ldr	r3, [pc, #544]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a87      	ldr	r2, [pc, #540]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b85      	ldr	r3, [pc, #532]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286a:	4b82      	ldr	r3, [pc, #520]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d118      	bne.n	80028a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002876:	4b7f      	ldr	r3, [pc, #508]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7e      	ldr	r2, [pc, #504]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7fe ffc9 	bl	8001818 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7fe ffc5 	bl	8001818 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	; 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e120      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289c:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <HAL_RCC_OscConfig+0x4d0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x31a>
 80028b0:	4b6f      	ldr	r3, [pc, #444]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a6e      	ldr	r2, [pc, #440]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
 80028bc:	e02d      	b.n	800291a <HAL_RCC_OscConfig+0x376>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0x33c>
 80028c6:	4b6a      	ldr	r3, [pc, #424]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a69      	ldr	r2, [pc, #420]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80028cc:	f023 0301 	bic.w	r3, r3, #1
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
 80028d2:	4b67      	ldr	r3, [pc, #412]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a66      	ldr	r2, [pc, #408]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80028d8:	f023 0304 	bic.w	r3, r3, #4
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
 80028de:	e01c      	b.n	800291a <HAL_RCC_OscConfig+0x376>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x35e>
 80028e8:	4b61      	ldr	r3, [pc, #388]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a60      	ldr	r2, [pc, #384]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80028ee:	f043 0304 	orr.w	r3, r3, #4
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	4b5e      	ldr	r3, [pc, #376]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a5d      	ldr	r2, [pc, #372]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0x376>
 8002902:	4b5b      	ldr	r3, [pc, #364]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a5a      	ldr	r2, [pc, #360]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
 800290e:	4b58      	ldr	r3, [pc, #352]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d015      	beq.n	800294e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002922:	f7fe ff79 	bl	8001818 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	e00a      	b.n	8002940 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292a:	f7fe ff75 	bl	8001818 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f241 3288 	movw	r2, #5000	; 0x1388
 8002938:	4293      	cmp	r3, r2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0ce      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	4b4b      	ldr	r3, [pc, #300]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ee      	beq.n	800292a <HAL_RCC_OscConfig+0x386>
 800294c:	e014      	b.n	8002978 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe ff63 	bl	8001818 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe ff5f 	bl	8001818 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ee      	bne.n	8002956 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002978:	7dfb      	ldrb	r3, [r7, #23]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297e:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a3b      	ldr	r2, [pc, #236]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80a4 	beq.w	8002adc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002994:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d06b      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d149      	bne.n	8002a3c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80029ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe ff30 	bl	8001818 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe ff2c 	bl	8001818 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e087      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ce:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	019b      	lsls	r3, r3, #6
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	085b      	lsrs	r3, r3, #1
 80029f2:	3b01      	subs	r3, #1
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	4313      	orrs	r3, r2
 8002a00:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002a02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a06:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a18      	ldr	r2, [pc, #96]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe ff00 	bl	8001818 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fefc 	bl	8001818 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e057      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x478>
 8002a3a:	e04f      	b.n	8002adc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fee6 	bl	8001818 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a50:	f7fe fee2 	bl	8001818 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e03d      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_RCC_OscConfig+0x4cc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x4ac>
 8002a6e:	e035      	b.n	8002adc <HAL_RCC_OscConfig+0x538>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_RCC_OscConfig+0x544>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d028      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d121      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d11a      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d111      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	085b      	lsrs	r3, r3, #1
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800

08002aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0d0      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d910      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b67      	ldr	r3, [pc, #412]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 020f 	bic.w	r2, r3, #15
 8002b1a:	4965      	ldr	r1, [pc, #404]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b63      	ldr	r3, [pc, #396]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0b8      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b4c:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a58      	ldr	r2, [pc, #352]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b64:	4b53      	ldr	r3, [pc, #332]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	494d      	ldr	r1, [pc, #308]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d040      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d115      	bne.n	8002bce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e07f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bae:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e073      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06b      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bce:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f023 0203 	bic.w	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4936      	ldr	r1, [pc, #216]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be0:	f7fe fe1a 	bl	8001818 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be6:	e00a      	b.n	8002bfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be8:	f7fe fe16 	bl	8001818 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e053      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	4b2d      	ldr	r3, [pc, #180]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 020c 	and.w	r2, r3, #12
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d1eb      	bne.n	8002be8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c10:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d210      	bcs.n	8002c40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 020f 	bic.w	r2, r3, #15
 8002c26:	4922      	ldr	r1, [pc, #136]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e032      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c4c:	4b19      	ldr	r3, [pc, #100]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4916      	ldr	r1, [pc, #88]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c6a:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	490e      	ldr	r1, [pc, #56]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c7e:	f000 f821 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c82:	4602      	mov	r2, r0
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	490a      	ldr	r1, [pc, #40]	; (8002cb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002c90:	5ccb      	ldrb	r3, [r1, r3]
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <HAL_RCC_ClockConfig+0x1d0>)
 8002c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_ClockConfig+0x1d4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fd76 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023c00 	.word	0x40023c00
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	0800950c 	.word	0x0800950c
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc8:	b090      	sub	sp, #64	; 0x40
 8002cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cdc:	4b59      	ldr	r3, [pc, #356]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d00d      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	f200 80a1 	bhi.w	8002e30 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002cf6:	e09b      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cfc:	e09b      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfe:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d02:	e098      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d0e:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d028      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	2200      	movs	r2, #0
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	627a      	str	r2, [r7, #36]	; 0x24
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d30:	fb03 f201 	mul.w	r2, r3, r1
 8002d34:	2300      	movs	r3, #0
 8002d36:	fb00 f303 	mul.w	r3, r0, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a43      	ldr	r2, [pc, #268]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d3e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d44:	460a      	mov	r2, r1
 8002d46:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d4a:	4413      	add	r3, r2
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d50:	2200      	movs	r2, #0
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	61fa      	str	r2, [r7, #28]
 8002d56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d5e:	f7fd faaf 	bl	80002c0 <__aeabi_uldivmod>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4613      	mov	r3, r2
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6a:	e053      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6c:	4b35      	ldr	r3, [pc, #212]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	2200      	movs	r2, #0
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	617a      	str	r2, [r7, #20]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d7e:	f04f 0b00 	mov.w	fp, #0
 8002d82:	4652      	mov	r2, sl
 8002d84:	465b      	mov	r3, fp
 8002d86:	f04f 0000 	mov.w	r0, #0
 8002d8a:	f04f 0100 	mov.w	r1, #0
 8002d8e:	0159      	lsls	r1, r3, #5
 8002d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d94:	0150      	lsls	r0, r2, #5
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d9e:	eb63 090b 	sbc.w	r9, r3, fp
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002db2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002db6:	ebb2 0408 	subs.w	r4, r2, r8
 8002dba:	eb63 0509 	sbc.w	r5, r3, r9
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	00eb      	lsls	r3, r5, #3
 8002dc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dcc:	00e2      	lsls	r2, r4, #3
 8002dce:	4614      	mov	r4, r2
 8002dd0:	461d      	mov	r5, r3
 8002dd2:	eb14 030a 	adds.w	r3, r4, sl
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	eb45 030b 	adc.w	r3, r5, fp
 8002ddc:	607b      	str	r3, [r7, #4]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dea:	4629      	mov	r1, r5
 8002dec:	028b      	lsls	r3, r1, #10
 8002dee:	4621      	mov	r1, r4
 8002df0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002df4:	4621      	mov	r1, r4
 8002df6:	028a      	lsls	r2, r1, #10
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	60fa      	str	r2, [r7, #12]
 8002e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e08:	f7fd fa5a 	bl	80002c0 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4613      	mov	r3, r2
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002e24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e2e:	e002      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3740      	adds	r7, #64	; 0x40
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	00f42400 	.word	0x00f42400
 8002e4c:	017d7840 	.word	0x017d7840

08002e50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e56:	681b      	ldr	r3, [r3, #0]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000000 	.word	0x20000000

08002e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e6c:	f7ff fff0 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	0a9b      	lsrs	r3, r3, #10
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4903      	ldr	r1, [pc, #12]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e7e:	5ccb      	ldrb	r3, [r1, r3]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	0800951c 	.word	0x0800951c

08002e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e94:	f7ff ffdc 	bl	8002e50 <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0b5b      	lsrs	r3, r3, #13
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4903      	ldr	r1, [pc, #12]	; (8002eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	0800951c 	.word	0x0800951c

08002eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d012      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ee0:	4b69      	ldr	r3, [pc, #420]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	4a68      	ldr	r2, [pc, #416]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002eea:	6093      	str	r3, [r2, #8]
 8002eec:	4b66      	ldr	r3, [pc, #408]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef4:	4964      	ldr	r1, [pc, #400]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d017      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f12:	4b5d      	ldr	r3, [pc, #372]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	4959      	ldr	r1, [pc, #356]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f30:	d101      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d017      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f4e:	4b4e      	ldr	r3, [pc, #312]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	494a      	ldr	r1, [pc, #296]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 808b 	beq.w	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b3a      	ldr	r3, [pc, #232]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a39      	ldr	r2, [pc, #228]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa8:	4b37      	ldr	r3, [pc, #220]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fb4:	4b35      	ldr	r3, [pc, #212]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a34      	ldr	r2, [pc, #208]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fc2a 	bl	8001818 <HAL_GetTick>
 8002fc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc8:	f7fe fc26 	bl	8001818 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e357      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fe6:	4b28      	ldr	r3, [pc, #160]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d035      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d02e      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	4a1a      	ldr	r2, [pc, #104]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003024:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800302c:	4b16      	ldr	r3, [pc, #88]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d114      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe fbee 	bl	8001818 <HAL_GetTick>
 800303c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303e:	e00a      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003040:	f7fe fbea 	bl	8001818 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	; 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e319      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0ee      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800306e:	d111      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800307e:	400b      	ands	r3, r1
 8003080:	4901      	ldr	r1, [pc, #4]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
 8003086:	e00b      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003088:	40023800 	.word	0x40023800
 800308c:	40007000 	.word	0x40007000
 8003090:	0ffffcff 	.word	0x0ffffcff
 8003094:	4baa      	ldr	r3, [pc, #680]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4aa9      	ldr	r2, [pc, #676]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800309e:	6093      	str	r3, [r2, #8]
 80030a0:	4ba7      	ldr	r3, [pc, #668]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ac:	49a4      	ldr	r1, [pc, #656]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d010      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030be:	4ba0      	ldr	r3, [pc, #640]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c4:	4a9e      	ldr	r2, [pc, #632]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030ce:	4b9c      	ldr	r3, [pc, #624]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	4999      	ldr	r1, [pc, #612]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ec:	4b94      	ldr	r3, [pc, #592]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030fa:	4991      	ldr	r1, [pc, #580]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800310e:	4b8c      	ldr	r3, [pc, #560]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800311c:	4988      	ldr	r1, [pc, #544]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003130:	4b83      	ldr	r3, [pc, #524]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313e:	4980      	ldr	r1, [pc, #512]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003152:	4b7b      	ldr	r3, [pc, #492]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003158:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	4977      	ldr	r1, [pc, #476]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003174:	4b72      	ldr	r3, [pc, #456]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	496f      	ldr	r1, [pc, #444]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003196:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f023 020c 	bic.w	r2, r3, #12
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a4:	4966      	ldr	r1, [pc, #408]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031b8:	4b61      	ldr	r3, [pc, #388]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	495e      	ldr	r1, [pc, #376]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031da:	4b59      	ldr	r3, [pc, #356]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	4955      	ldr	r1, [pc, #340]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031fc:	4b50      	ldr	r3, [pc, #320]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	494d      	ldr	r1, [pc, #308]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800321e:	4b48      	ldr	r3, [pc, #288]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	4944      	ldr	r1, [pc, #272]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003240:	4b3f      	ldr	r3, [pc, #252]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	493c      	ldr	r1, [pc, #240]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003262:	4b37      	ldr	r3, [pc, #220]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003270:	4933      	ldr	r1, [pc, #204]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003284:	4b2e      	ldr	r3, [pc, #184]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003292:	492b      	ldr	r1, [pc, #172]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d011      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032a6:	4b26      	ldr	r3, [pc, #152]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b4:	4922      	ldr	r1, [pc, #136]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c4:	d101      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032e6:	4b16      	ldr	r3, [pc, #88]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	4912      	ldr	r1, [pc, #72]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003318:	4909      	ldr	r1, [pc, #36]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d006      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80d9 	beq.w	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a01      	ldr	r2, [pc, #4]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800333a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800333e:	e001      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003340:	40023800 	.word	0x40023800
 8003344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003346:	f7fe fa67 	bl	8001818 <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800334e:	f7fe fa63 	bl	8001818 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b64      	cmp	r3, #100	; 0x64
 800335a:	d901      	bls.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e194      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003360:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1f0      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d021      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337c:	2b00      	cmp	r3, #0
 800337e:	d11d      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003380:	4b64      	ldr	r3, [pc, #400]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800338e:	4b61      	ldr	r3, [pc, #388]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003394:	0e1b      	lsrs	r3, r3, #24
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	019a      	lsls	r2, r3, #6
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	431a      	orrs	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	061b      	lsls	r3, r3, #24
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	071b      	lsls	r3, r3, #28
 80033b4:	4957      	ldr	r1, [pc, #348]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02e      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033e6:	d129      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033e8:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033f6:	4b47      	ldr	r3, [pc, #284]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033fc:	0f1b      	lsrs	r3, r3, #28
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	019a      	lsls	r2, r3, #6
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	061b      	lsls	r3, r3, #24
 8003416:	431a      	orrs	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	071b      	lsls	r3, r3, #28
 800341c:	493d      	ldr	r1, [pc, #244]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003424:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800342a:	f023 021f 	bic.w	r2, r3, #31
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003432:	3b01      	subs	r3, #1
 8003434:	4937      	ldr	r1, [pc, #220]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01d      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003448:	4b32      	ldr	r3, [pc, #200]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344e:	0e1b      	lsrs	r3, r3, #24
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003456:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800345c:	0f1b      	lsrs	r3, r3, #28
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	019a      	lsls	r2, r3, #6
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	431a      	orrs	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	061b      	lsls	r3, r3, #24
 8003476:	431a      	orrs	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	071b      	lsls	r3, r3, #28
 800347c:	4925      	ldr	r1, [pc, #148]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d011      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	019a      	lsls	r2, r3, #6
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	071b      	lsls	r3, r3, #28
 80034ac:	4919      	ldr	r1, [pc, #100]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034b4:	4b17      	ldr	r3, [pc, #92]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a16      	ldr	r2, [pc, #88]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fe f9aa 	bl	8001818 <HAL_GetTick>
 80034c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034c8:	f7fe f9a6 	bl	8001818 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e0d7      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	f040 80cd 	bne.w	8003688 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a08      	ldr	r2, [pc, #32]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fa:	f7fe f98d 	bl	8001818 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003500:	e00a      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003502:	f7fe f989 	bl	8001818 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b64      	cmp	r3, #100	; 0x64
 800350e:	d903      	bls.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0ba      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003514:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003518:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003524:	d0ed      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003542:	2b00      	cmp	r3, #0
 8003544:	d02e      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d12a      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800354e:	4b51      	ldr	r3, [pc, #324]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800355c:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	0f1b      	lsrs	r3, r3, #28
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	019a      	lsls	r2, r3, #6
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	041b      	lsls	r3, r3, #16
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	061b      	lsls	r3, r3, #24
 800357c:	431a      	orrs	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	071b      	lsls	r3, r3, #28
 8003582:	4944      	ldr	r1, [pc, #272]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800358a:	4b42      	ldr	r3, [pc, #264]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800358c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003590:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	3b01      	subs	r3, #1
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	493d      	ldr	r1, [pc, #244]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d022      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035b8:	d11d      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035ba:	4b36      	ldr	r3, [pc, #216]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c0:	0e1b      	lsrs	r3, r3, #24
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035c8:	4b32      	ldr	r3, [pc, #200]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	0f1b      	lsrs	r3, r3, #28
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	019a      	lsls	r2, r3, #6
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	431a      	orrs	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	431a      	orrs	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	071b      	lsls	r3, r3, #28
 80035ee:	4929      	ldr	r1, [pc, #164]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d028      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	0e1b      	lsrs	r3, r3, #24
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003610:	4b20      	ldr	r3, [pc, #128]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	019a      	lsls	r2, r3, #6
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	431a      	orrs	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	061b      	lsls	r3, r3, #24
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	071b      	lsls	r3, r3, #28
 8003636:	4917      	ldr	r1, [pc, #92]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800363e:	4b15      	ldr	r3, [pc, #84]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	4911      	ldr	r1, [pc, #68]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a0e      	ldr	r2, [pc, #56]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800365a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003660:	f7fe f8da 	bl	8001818 <HAL_GetTick>
 8003664:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003668:	f7fe f8d6 	bl	8001818 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e007      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003686:	d1ef      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800

08003698 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e022      	b.n	80036f0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fd fdbf 	bl	8001240 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2203      	movs	r2, #3
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f814 	bl	80036f8 <HAL_SD_InitCard>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e00a      	b.n	80036f0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80036f8:	b5b0      	push	{r4, r5, r7, lr}
 80036fa:	b08e      	sub	sp, #56	; 0x38
 80036fc:	af04      	add	r7, sp, #16
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003700:	2300      	movs	r3, #0
 8003702:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003708:	2300      	movs	r3, #0
 800370a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003714:	2376      	movs	r3, #118	; 0x76
 8003716:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681d      	ldr	r5, [r3, #0]
 800371c:	466c      	mov	r4, sp
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003730:	4628      	mov	r0, r5
 8003732:	f001 ffb1 	bl	8005698 <SDMMC_Init>
 8003736:	4603      	mov	r3, r0
 8003738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800373c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e059      	b.n	80037fc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003756:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f001 ffe5 	bl	800572c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003770:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003772:	2002      	movs	r0, #2
 8003774:	f7fe f85c 	bl	8001830 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fff3 	bl	8004764 <SD_PowerON>
 800377e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e02e      	b.n	80037fc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 ff12 	bl	80045c8 <SD_InitCard>
 80037a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e01b      	b.n	80037fc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 f83f 	bl	8005850 <SDMMC_CmdBlockLength>
 80037d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00f      	beq.n	80037fa <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <HAL_SD_InitCard+0x10c>)
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3728      	adds	r7, #40	; 0x28
 8003800:	46bd      	mov	sp, r7
 8003802:	bdb0      	pop	{r4, r5, r7, pc}
 8003804:	004005ff 	.word	0x004005ff

08003808 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08c      	sub	sp, #48	; 0x30
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0c3      	b.n	80039b8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	f040 80bc 	bne.w	80039b6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	441a      	add	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	429a      	cmp	r2, r3
 8003850:	d907      	bls.n	8003862 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0aa      	b.n	80039b8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2203      	movs	r2, #3
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003880:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a4e      	ldr	r2, [pc, #312]	; (80039c0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a4d      	ldr	r2, [pc, #308]	; (80039c4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003890:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2200      	movs	r2, #0
 8003898:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3380      	adds	r3, #128	; 0x80
 80038c8:	4619      	mov	r1, r3
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	025b      	lsls	r3, r3, #9
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	f7fe f991 	bl	8001bf8 <HAL_DMA_Start_IT>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d017      	beq.n	800390c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80038ea:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a35      	ldr	r2, [pc, #212]	; (80039c8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e055      	b.n	80039b8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0208 	orr.w	r2, r2, #8
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	2b01      	cmp	r3, #1
 8003922:	d002      	beq.n	800392a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	025b      	lsls	r3, r3, #9
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
 800392e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	025b      	lsls	r3, r3, #9
 8003934:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003936:	2390      	movs	r3, #144	; 0x90
 8003938:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800393a:	2302      	movs	r3, #2
 800393c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003942:	2301      	movs	r3, #1
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f107 0210 	add.w	r2, r7, #16
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f001 ff51 	bl	80057f8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d90a      	bls.n	8003972 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2282      	movs	r2, #130	; 0x82
 8003960:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003968:	4618      	mov	r0, r3
 800396a:	f001 ffb5 	bl	80058d8 <SDMMC_CmdReadMultiBlock>
 800396e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003970:	e009      	b.n	8003986 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2281      	movs	r2, #129	; 0x81
 8003976:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800397e:	4618      	mov	r0, r3
 8003980:	f001 ff88 	bl	8005894 <SDMMC_CmdReadSingleBlock>
 8003984:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	431a      	orrs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e002      	b.n	80039b8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
  }
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3730      	adds	r7, #48	; 0x30
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	080043d7 	.word	0x080043d7
 80039c4:	08004449 	.word	0x08004449
 80039c8:	004005ff 	.word	0x004005ff

080039cc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08c      	sub	sp, #48	; 0x30
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0c6      	b.n	8003b82 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	f040 80bf 	bne.w	8003b80 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	441a      	add	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d907      	bls.n	8003a26 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0ad      	b.n	8003b82 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2203      	movs	r2, #3
 8003a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 021a 	orr.w	r2, r2, #26
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	4a50      	ldr	r2, [pc, #320]	; (8003b8c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	4a4f      	ldr	r2, [pc, #316]	; (8003b90 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8003a54:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d002      	beq.n	8003a6c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	025b      	lsls	r3, r3, #9
 8003a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d90a      	bls.n	8003a88 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	22a0      	movs	r2, #160	; 0xa0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 ff6e 	bl	8005960 <SDMMC_CmdWriteMultiBlock>
 8003a84:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003a86:	e009      	b.n	8003a9c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2290      	movs	r2, #144	; 0x90
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 ff41 	bl	800591c <SDMMC_CmdWriteSingleBlock>
 8003a9a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d012      	beq.n	8003ac8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a3b      	ldr	r2, [pc, #236]	; (8003b94 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e05c      	b.n	8003b82 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0208 	orr.w	r2, r2, #8
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	2240      	movs	r2, #64	; 0x40
 8003ade:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3380      	adds	r3, #128	; 0x80
 8003b08:	461a      	mov	r2, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	025b      	lsls	r3, r3, #9
 8003b0e:	089b      	lsrs	r3, r3, #2
 8003b10:	f7fe f872 	bl	8001bf8 <HAL_DMA_Start_IT>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d01a      	beq.n	8003b50 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 021a 	bic.w	r2, r2, #26
 8003b28:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	; (8003b94 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e018      	b.n	8003b82 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
 8003b54:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	025b      	lsls	r3, r3, #9
 8003b5a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003b5c:	2390      	movs	r3, #144	; 0x90
 8003b5e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f107 0210 	add.w	r2, r7, #16
 8003b74:	4611      	mov	r1, r2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 fe3e 	bl	80057f8 <SDMMC_ConfigData>

      return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e000      	b.n	8003b82 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3730      	adds	r7, #48	; 0x30
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	080043ad 	.word	0x080043ad
 8003b90:	08004449 	.word	0x08004449
 8003b94:	004005ff 	.word	0x004005ff

08003b98 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_SD_IRQHandler+0x2e>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 ffef 	bl	8004ba2 <SD_Read_IT>
 8003bc4:	e15a      	b.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 808d 	beq.w	8003cf0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b9a      	ldr	r3, [pc, #616]	; (8003e54 <HAL_SD_IRQHandler+0x2bc>)
 8003bec:	400b      	ands	r3, r1
 8003bee:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d039      	beq.n	8003c7e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d104      	bne.n	8003c1e <HAL_SD_IRQHandler+0x86>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d011      	beq.n	8003c42 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 febe 	bl	80059a4 <SDMMC_CmdStopTransfer>
 8003c28:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f921 	bl	8003e84 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c4a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d104      	bne.n	8003c6e <HAL_SD_IRQHandler+0xd6>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f002 fb2e 	bl	80062d0 <HAL_SD_RxCpltCallback>
 8003c74:	e102      	b.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f002 fb20 	bl	80062bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c7c:	e0fe      	b.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80f9 	beq.w	8003e7c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d011      	beq.n	8003cb8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 fe83 	bl	80059a4 <SDMMC_CmdStopTransfer>
 8003c9e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f8e6 	bl	8003e84 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 80dc 	bne.w	8003e7c <HAL_SD_IRQHandler+0x2e4>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 80d6 	bne.w	8003e7c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0208 	bic.w	r2, r2, #8
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f002 fae7 	bl	80062bc <HAL_SD_TxCpltCallback>
}
 8003cee:	e0c5      	b.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d008      	beq.n	8003d10 <HAL_SD_IRQHandler+0x178>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 ff9b 	bl	8004c44 <SD_Write_IT>
 8003d0e:	e0b5      	b.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80ae 	beq.w	8003e7c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d005      	beq.n	8003d3a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	f043 0202 	orr.w	r2, r3, #2
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	f043 0208 	orr.w	r2, r3, #8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d005      	beq.n	8003d88 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	f043 0210 	orr.w	r2, r3, #16
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8003d90:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003da0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 fdfc 	bl	80059a4 <SDMMC_CmdStopTransfer>
 8003dac:	4602      	mov	r2, r0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f857 	bl	8003e84 <HAL_SD_ErrorCallback>
}
 8003dd6:	e051      	b.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d04c      	beq.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <HAL_SD_IRQHandler+0x25e>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d011      	beq.n	8003e1a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <HAL_SD_IRQHandler+0x2c0>)
 8003dfc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7fd ff58 	bl	8001cb8 <HAL_DMA_Abort_IT>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d036      	beq.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fb6a 	bl	80044ec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e18:	e030      	b.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <HAL_SD_IRQHandler+0x296>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d018      	beq.n	8003e60 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <HAL_SD_IRQHandler+0x2c4>)
 8003e34:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fd ff3c 	bl	8001cb8 <HAL_DMA_Abort_IT>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01a      	beq.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fb85 	bl	800455a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003e50:	e014      	b.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
 8003e52:	bf00      	nop
 8003e54:	ffff3ec5 	.word	0xffff3ec5
 8003e58:	080044ed 	.word	0x080044ed
 8003e5c:	0800455b 	.word	0x0800455b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f002 fa17 	bl	80062a8 <HAL_SD_AbortCallback>
}
 8003e7a:	e7ff      	b.n	8003e7c <HAL_SD_IRQHandler+0x2e4>
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea6:	0f9b      	lsrs	r3, r3, #30
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eb2:	0e9b      	lsrs	r3, r3, #26
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec4:	0e1b      	lsrs	r3, r3, #24
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef8:	0d1b      	lsrs	r3, r3, #20
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f04:	0c1b      	lsrs	r3, r3, #16
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f16:	0bdb      	lsrs	r3, r3, #15
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f28:	0b9b      	lsrs	r3, r3, #14
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f3a:	0b5b      	lsrs	r3, r3, #13
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f4c:	0b1b      	lsrs	r3, r3, #12
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d163      	bne.n	8004030 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6c:	009a      	lsls	r2, r3, #2
 8003f6e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f72:	4013      	ands	r3, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003f78:	0f92      	lsrs	r2, r2, #30
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f84:	0edb      	lsrs	r3, r3, #27
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f96:	0e1b      	lsrs	r3, r3, #24
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa8:	0d5b      	lsrs	r3, r3, #21
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fba:	0c9b      	lsrs	r3, r3, #18
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fcc:	0bdb      	lsrs	r3, r3, #15
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	7e1b      	ldrb	r3, [r3, #24]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	3302      	adds	r3, #2
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ffa:	fb03 f202 	mul.w	r2, r3, r2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	7a1b      	ldrb	r3, [r3, #8]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	2201      	movs	r2, #1
 800400e:	409a      	lsls	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800401c:	0a52      	lsrs	r2, r2, #9
 800401e:	fb03 f202 	mul.w	r2, r3, r2
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800402c:	661a      	str	r2, [r3, #96]	; 0x60
 800402e:	e031      	b.n	8004094 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	2b01      	cmp	r3, #1
 8004036:	d11d      	bne.n	8004074 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800403c:	041b      	lsls	r3, r3, #16
 800403e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004046:	0c1b      	lsrs	r3, r3, #16
 8004048:	431a      	orrs	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	3301      	adds	r3, #1
 8004054:	029a      	lsls	r2, r3, #10
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004068:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	661a      	str	r2, [r3, #96]	; 0x60
 8004072:	e00f      	b.n	8004094 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a58      	ldr	r2, [pc, #352]	; (80041dc <HAL_SD_GetCardCSD+0x344>)
 800407a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e09d      	b.n	80041d0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004098:	0b9b      	lsrs	r3, r3, #14
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040aa:	09db      	lsrs	r3, r3, #7
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	0fdb      	lsrs	r3, r3, #31
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	0f5b      	lsrs	r3, r3, #29
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	0e9b      	lsrs	r3, r3, #26
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fc:	0d9b      	lsrs	r3, r3, #22
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	b2da      	uxtb	r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	0d5b      	lsrs	r3, r3, #21
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	b2da      	uxtb	r2, r3
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	b2da      	uxtb	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	0bdb      	lsrs	r3, r3, #15
 8004140:	b2db      	uxtb	r3, r3
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	0b9b      	lsrs	r3, r3, #14
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	0b5b      	lsrs	r3, r3, #13
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	b2da      	uxtb	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417a:	0b1b      	lsrs	r3, r3, #12
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	0a9b      	lsrs	r3, r3, #10
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	b2da      	uxtb	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	004005ff 	.word	0x004005ff

080041e0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004238:	b5b0      	push	{r4, r5, r7, lr}
 800423a:	b08e      	sub	sp, #56	; 0x38
 800423c:	af04      	add	r7, sp, #16
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2203      	movs	r2, #3
 800424c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	2b03      	cmp	r3, #3
 8004256:	d02e      	beq.n	80042b6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d106      	bne.n	800426e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	639a      	str	r2, [r3, #56]	; 0x38
 800426c:	e029      	b.n	80042c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004274:	d10a      	bne.n	800428c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fb2a 	bl	80048d0 <SD_WideBus_Enable>
 800427c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	639a      	str	r2, [r3, #56]	; 0x38
 800428a:	e01a      	b.n	80042c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fb67 	bl	8004966 <SD_WideBus_Disable>
 8004298:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
 80042a6:	e00c      	b.n	80042c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	639a      	str	r2, [r3, #56]	; 0x38
 80042b4:	e005      	b.n	80042c2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a26      	ldr	r2, [pc, #152]	; (8004368 <HAL_SD_ConfigWideBusOperation+0x130>)
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80042e0:	e01f      	b.n	8004322 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681d      	ldr	r5, [r3, #0]
 8004308:	466c      	mov	r4, sp
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004316:	f107 0308 	add.w	r3, r7, #8
 800431a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800431c:	4628      	mov	r0, r5
 800431e:	f001 f9bb 	bl	8005698 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800432a:	4618      	mov	r0, r3
 800432c:	f001 fa90 	bl	8005850 <SDMMC_CmdBlockLength>
 8004330:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00c      	beq.n	8004352 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <HAL_SD_ConfigWideBusOperation+0x130>)
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800435a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800435e:	4618      	mov	r0, r3
 8004360:	3728      	adds	r7, #40	; 0x28
 8004362:	46bd      	mov	sp, r7
 8004364:	bdb0      	pop	{r4, r5, r7, pc}
 8004366:	bf00      	nop
 8004368:	004005ff 	.word	0x004005ff

0800436c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa7e 	bl	8004880 <SD_SendStatus>
 8004384:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	0a5b      	lsrs	r3, r3, #9
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80043a2:	693b      	ldr	r3, [r7, #16]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b084      	sub	sp, #16
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	2b82      	cmp	r3, #130	; 0x82
 80043ea:	d111      	bne.n	8004410 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 fad7 	bl	80059a4 <SDMMC_CmdStopTransfer>
 80043f6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d008      	beq.n	8004410 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	431a      	orrs	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff fd3a 	bl	8003e84 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0208 	bic.w	r2, r2, #8
 800441e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f240 523a 	movw	r2, #1338	; 0x53a
 8004428:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f001 ff49 	bl	80062d0 <HAL_SD_RxCpltCallback>
#endif
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fd fdda 	bl	8002010 <HAL_DMA_GetError>
 800445c:	4603      	mov	r3, r0
 800445e:	2b02      	cmp	r3, #2
 8004460:	d03e      	beq.n	80044e0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004468:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d002      	beq.n	800447e <SD_DMAError+0x36>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d12d      	bne.n	80044da <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a19      	ldr	r2, [pc, #100]	; (80044e8 <SD_DMAError+0xa0>)
 8004484:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004494:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80044a2:	6978      	ldr	r0, [r7, #20]
 80044a4:	f7ff ff62 	bl	800436c <HAL_SD_GetCardState>
 80044a8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d002      	beq.n	80044b6 <SD_DMAError+0x6e>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d10a      	bne.n	80044cc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f001 fa72 	bl	80059a4 <SDMMC_CmdStopTransfer>
 80044c0:	4602      	mov	r2, r0
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	431a      	orrs	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80044da:	6978      	ldr	r0, [r7, #20]
 80044dc:	f7ff fcd2 	bl	8003e84 <HAL_SD_ErrorCallback>
#endif
  }
}
 80044e0:	bf00      	nop
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	004005ff 	.word	0x004005ff

080044ec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8004502:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff ff31 	bl	800436c <HAL_SD_GetCardState>
 800450a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b06      	cmp	r3, #6
 800451e:	d002      	beq.n	8004526 <SD_DMATxAbort+0x3a>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b05      	cmp	r3, #5
 8004524:	d10a      	bne.n	800453c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f001 fa3a 	bl	80059a4 <SDMMC_CmdStopTransfer>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	431a      	orrs	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f001 feaf 	bl	80062a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800454a:	e002      	b.n	8004552 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff fc99 	bl	8003e84 <HAL_SD_ErrorCallback>
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004570:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff fefa 	bl	800436c <HAL_SD_GetCardState>
 8004578:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b06      	cmp	r3, #6
 800458c:	d002      	beq.n	8004594 <SD_DMARxAbort+0x3a>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b05      	cmp	r3, #5
 8004592:	d10a      	bne.n	80045aa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f001 fa03 	bl	80059a4 <SDMMC_CmdStopTransfer>
 800459e:	4602      	mov	r2, r0
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	431a      	orrs	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f001 fe78 	bl	80062a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80045b8:	e002      	b.n	80045c0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f7ff fc62 	bl	8003e84 <HAL_SD_ErrorCallback>
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80045c8:	b5b0      	push	{r4, r5, r7, lr}
 80045ca:	b094      	sub	sp, #80	; 0x50
 80045cc:	af04      	add	r7, sp, #16
 80045ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80045d0:	2301      	movs	r3, #1
 80045d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f001 f8b5 	bl	8005748 <SDMMC_GetPowerState>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d102      	bne.n	80045ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80045e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80045e8:	e0b8      	b.n	800475c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d02f      	beq.n	8004652 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f001 fadf 	bl	8005bba <SDMMC_CmdSendCID>
 80045fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80045fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <SD_InitCard+0x40>
    {
      return errorstate;
 8004604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004606:	e0a9      	b.n	800475c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f001 f8df 	bl	80057d2 <SDMMC_GetResponse>
 8004614:	4602      	mov	r2, r0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2104      	movs	r1, #4
 8004620:	4618      	mov	r0, r3
 8004622:	f001 f8d6 	bl	80057d2 <SDMMC_GetResponse>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2108      	movs	r1, #8
 8004632:	4618      	mov	r0, r3
 8004634:	f001 f8cd 	bl	80057d2 <SDMMC_GetResponse>
 8004638:	4602      	mov	r2, r0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	210c      	movs	r1, #12
 8004644:	4618      	mov	r0, r3
 8004646:	f001 f8c4 	bl	80057d2 <SDMMC_GetResponse>
 800464a:	4602      	mov	r2, r0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	2b03      	cmp	r3, #3
 8004658:	d00d      	beq.n	8004676 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f107 020e 	add.w	r2, r7, #14
 8004662:	4611      	mov	r1, r2
 8004664:	4618      	mov	r0, r3
 8004666:	f001 fae5 	bl	8005c34 <SDMMC_CmdSetRelAdd>
 800466a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800466c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <SD_InitCard+0xae>
    {
      return errorstate;
 8004672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004674:	e072      	b.n	800475c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	2b03      	cmp	r3, #3
 800467c:	d036      	beq.n	80046ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800467e:	89fb      	ldrh	r3, [r7, #14]
 8004680:	461a      	mov	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468e:	041b      	lsls	r3, r3, #16
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f001 faaf 	bl	8005bf6 <SDMMC_CmdSendCSD>
 8004698:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800469a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80046a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a2:	e05b      	b.n	800475c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2100      	movs	r1, #0
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 f891 	bl	80057d2 <SDMMC_GetResponse>
 80046b0:	4602      	mov	r2, r0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2104      	movs	r1, #4
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 f888 	bl	80057d2 <SDMMC_GetResponse>
 80046c2:	4602      	mov	r2, r0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2108      	movs	r1, #8
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f87f 	bl	80057d2 <SDMMC_GetResponse>
 80046d4:	4602      	mov	r2, r0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	210c      	movs	r1, #12
 80046e0:	4618      	mov	r0, r3
 80046e2:	f001 f876 	bl	80057d2 <SDMMC_GetResponse>
 80046e6:	4602      	mov	r2, r0
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2104      	movs	r1, #4
 80046f2:	4618      	mov	r0, r3
 80046f4:	f001 f86d 	bl	80057d2 <SDMMC_GetResponse>
 80046f8:	4603      	mov	r3, r0
 80046fa:	0d1a      	lsrs	r2, r3, #20
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004700:	f107 0310 	add.w	r3, r7, #16
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff fbc6 	bl	8003e98 <HAL_SD_GetCardCSD>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004712:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004716:	e021      	b.n	800475c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6819      	ldr	r1, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	2200      	movs	r2, #0
 8004724:	461c      	mov	r4, r3
 8004726:	4615      	mov	r5, r2
 8004728:	4622      	mov	r2, r4
 800472a:	462b      	mov	r3, r5
 800472c:	4608      	mov	r0, r1
 800472e:	f001 f95b 	bl	80059e8 <SDMMC_CmdSelDesel>
 8004732:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <SD_InitCard+0x176>
  {
    return errorstate;
 800473a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800473c:	e00e      	b.n	800475c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681d      	ldr	r5, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	466c      	mov	r4, sp
 8004746:	f103 0210 	add.w	r2, r3, #16
 800474a:	ca07      	ldmia	r2, {r0, r1, r2}
 800474c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004750:	3304      	adds	r3, #4
 8004752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004754:	4628      	mov	r0, r5
 8004756:	f000 ff9f 	bl	8005698 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3740      	adds	r7, #64	; 0x40
 8004760:	46bd      	mov	sp, r7
 8004762:	bdb0      	pop	{r4, r5, r7, pc}

08004764 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	2300      	movs	r3, #0
 8004776:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f001 f956 	bl	8005a2e <SDMMC_CmdGoIdleState>
 8004782:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <SD_PowerON+0x2a>
  {
    return errorstate;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	e072      	b.n	8004874 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f001 f969 	bl	8005a6a <SDMMC_CmdOperCond>
 8004798:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00d      	beq.n	80047bc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 f93f 	bl	8005a2e <SDMMC_CmdGoIdleState>
 80047b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	e05b      	b.n	8004874 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d137      	bne.n	800483a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 f969 	bl	8005aa8 <SDMMC_CmdAppCommand>
 80047d6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d02d      	beq.n	800483a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047e2:	e047      	b.n	8004874 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 f95c 	bl	8005aa8 <SDMMC_CmdAppCommand>
 80047f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <SD_PowerON+0x98>
    {
      return errorstate;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	e03b      	b.n	8004874 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	491e      	ldr	r1, [pc, #120]	; (800487c <SD_PowerON+0x118>)
 8004802:	4618      	mov	r0, r3
 8004804:	f001 f972 	bl	8005aec <SDMMC_CmdAppOperCommand>
 8004808:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004810:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004814:	e02e      	b.n	8004874 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f000 ffd8 	bl	80057d2 <SDMMC_GetResponse>
 8004822:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	0fdb      	lsrs	r3, r3, #31
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <SD_PowerON+0xcc>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <SD_PowerON+0xce>
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]

    count++;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	3301      	adds	r3, #1
 8004838:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004840:	4293      	cmp	r3, r2
 8004842:	d802      	bhi.n	800484a <SD_PowerON+0xe6>
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0cc      	beq.n	80047e4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004850:	4293      	cmp	r3, r2
 8004852:	d902      	bls.n	800485a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004858:	e00c      	b.n	8004874 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
 800486a:	e002      	b.n	8004872 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	c1100000 	.word	0xc1100000

08004880 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004890:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004894:	e018      	b.n	80048c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489e:	041b      	lsls	r3, r3, #16
 80048a0:	4619      	mov	r1, r3
 80048a2:	4610      	mov	r0, r2
 80048a4:	f001 f9e7 	bl	8005c76 <SDMMC_CmdSendStatus>
 80048a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	e009      	b.n	80048c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 ff89 	bl	80057d2 <SDMMC_GetResponse>
 80048c0:	4602      	mov	r2, r0
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 ff73 	bl	80057d2 <SDMMC_GetResponse>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048f6:	d102      	bne.n	80048fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80048f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048fc:	e02f      	b.n	800495e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f879 	bl	80049fc <SD_FindSCR>
 800490a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	e023      	b.n	800495e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01c      	beq.n	800495a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004928:	041b      	lsls	r3, r3, #16
 800492a:	4619      	mov	r1, r3
 800492c:	4610      	mov	r0, r2
 800492e:	f001 f8bb 	bl	8005aa8 <SDMMC_CmdAppCommand>
 8004932:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	e00f      	b.n	800495e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2102      	movs	r1, #2
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f8f5 	bl	8005b34 <SDMMC_CmdBusWidth>
 800494a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	e003      	b.n	800495e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004956:	2300      	movs	r3, #0
 8004958:	e001      	b.n	800495e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800495a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f000 ff28 	bl	80057d2 <SDMMC_GetResponse>
 8004982:	4603      	mov	r3, r0
 8004984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800498c:	d102      	bne.n	8004994 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800498e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004992:	e02f      	b.n	80049f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004994:	f107 030c 	add.w	r3, r7, #12
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f82e 	bl	80049fc <SD_FindSCR>
 80049a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	e023      	b.n	80049f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01c      	beq.n	80049f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049be:	041b      	lsls	r3, r3, #16
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f001 f870 	bl	8005aa8 <SDMMC_CmdAppCommand>
 80049c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	e00f      	b.n	80049f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 f8aa 	bl	8005b34 <SDMMC_CmdBusWidth>
 80049e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	e003      	b.n	80049f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e001      	b.n	80049f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b08f      	sub	sp, #60	; 0x3c
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a06:	f7fc ff07 	bl	8001818 <HAL_GetTick>
 8004a0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004a10:	2300      	movs	r3, #0
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2108      	movs	r1, #8
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 ff14 	bl	8005850 <SDMMC_CmdBlockLength>
 8004a28:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	e0b2      	b.n	8004b9a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4610      	mov	r0, r2
 8004a42:	f001 f831 	bl	8005aa8 <SDMMC_CmdAppCommand>
 8004a46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	e0a3      	b.n	8004b9a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004a58:	2308      	movs	r3, #8
 8004a5a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004a5c:	2330      	movs	r3, #48	; 0x30
 8004a5e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004a60:	2302      	movs	r3, #2
 8004a62:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f107 0210 	add.w	r2, r7, #16
 8004a74:	4611      	mov	r1, r2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 febe 	bl	80057f8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f001 f879 	bl	8005b78 <SDMMC_CmdSendSCR>
 8004a86:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d02a      	beq.n	8004ae4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	e083      	b.n	8004b9a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00f      	beq.n	8004ac0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6819      	ldr	r1, [r3, #0]
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	f107 0208 	add.w	r2, r7, #8
 8004aac:	18d4      	adds	r4, r2, r3
 8004aae:	4608      	mov	r0, r1
 8004ab0:	f000 fe1e 	bl	80056f0 <SDMMC_ReadFIFO>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	6023      	str	r3, [r4, #0]
      index++;
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aba:	3301      	adds	r3, #1
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
 8004abe:	e006      	b.n	8004ace <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d012      	beq.n	8004af4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004ace:	f7fc fea3 	bl	8001818 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d102      	bne.n	8004ae4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004ade:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ae2:	e05a      	b.n	8004b9a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aea:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0cf      	beq.n	8004a92 <SD_FindSCR+0x96>
 8004af2:	e000      	b.n	8004af6 <SD_FindSCR+0xfa>
      break;
 8004af4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	e044      	b.n	8004b9a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2202      	movs	r2, #2
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b26:	2302      	movs	r3, #2
 8004b28:	e037      	b.n	8004b9a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004b40:	2320      	movs	r3, #32
 8004b42:	e02a      	b.n	8004b9a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	061a      	lsls	r2, r3, #24
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b5a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b64:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6e:	601a      	str	r2, [r3, #0]
    scr++;
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	3304      	adds	r3, #4
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	061a      	lsls	r2, r3, #24
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b82:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b8c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	0e1b      	lsrs	r3, r3, #24
 8004b92:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	373c      	adds	r7, #60	; 0x3c
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd90      	pop	{r4, r7, pc}

08004ba2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d03f      	beq.n	8004c3c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e033      	b.n	8004c2a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fd92 	bl	80056f0 <SDMMC_ReadFIFO>
 8004bcc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	0a1b      	lsrs	r3, r3, #8
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3301      	adds	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	0e1b      	lsrs	r3, r3, #24
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	3301      	adds	r3, #1
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b07      	cmp	r3, #7
 8004c2e:	d9c8      	bls.n	8004bc2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d043      	beq.n	8004ce6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e037      	b.n	8004cd4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	021a      	lsls	r2, r3, #8
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	041a      	lsls	r2, r3, #16
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	061a      	lsls	r2, r3, #24
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f107 0208 	add.w	r2, r7, #8
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fd1e 	bl	800570a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b07      	cmp	r3, #7
 8004cd8:	d9c4      	bls.n	8004c64 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e040      	b.n	8004d82 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d106      	bne.n	8004d16 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fc fc85 	bl	8001620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2224      	movs	r2, #36	; 0x24
 8004d1a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f8af 	bl	8004e90 <UART_SetConfig>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e022      	b.n	8004d82 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fb07 	bl	8005358 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f042 0201 	orr.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fb8e 	bl	800549c <UART_CheckIdleState>
 8004d80:	4603      	mov	r3, r0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b08a      	sub	sp, #40	; 0x28
 8004d8e:	af02      	add	r7, sp, #8
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d171      	bne.n	8004e86 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_UART_Transmit+0x24>
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e06a      	b.n	8004e88 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2221      	movs	r2, #33	; 0x21
 8004dbe:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dc0:	f7fc fd2a 	bl	8001818 <HAL_GetTick>
 8004dc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	88fa      	ldrh	r2, [r7, #6]
 8004dd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dde:	d108      	bne.n	8004df2 <HAL_UART_Transmit+0x68>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e003      	b.n	8004dfa <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dfa:	e02c      	b.n	8004e56 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2200      	movs	r2, #0
 8004e04:	2180      	movs	r1, #128	; 0x80
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 fb7f 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e038      	b.n	8004e88 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	3302      	adds	r3, #2
 8004e30:	61bb      	str	r3, [r7, #24]
 8004e32:	e007      	b.n	8004e44 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	781a      	ldrb	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3301      	adds	r3, #1
 8004e42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1cc      	bne.n	8004dfc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2140      	movs	r1, #64	; 0x40
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fb4c 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e005      	b.n	8004e88 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
  }
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4ba6      	ldr	r3, [pc, #664]	; (8005154 <UART_SetConfig+0x2c4>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	6979      	ldr	r1, [r7, #20]
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a94      	ldr	r2, [pc, #592]	; (8005158 <UART_SetConfig+0x2c8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d120      	bne.n	8004f4e <UART_SetConfig+0xbe>
 8004f0c:	4b93      	ldr	r3, [pc, #588]	; (800515c <UART_SetConfig+0x2cc>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d816      	bhi.n	8004f48 <UART_SetConfig+0xb8>
 8004f1a:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <UART_SetConfig+0x90>)
 8004f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f20:	08004f31 	.word	0x08004f31
 8004f24:	08004f3d 	.word	0x08004f3d
 8004f28:	08004f37 	.word	0x08004f37
 8004f2c:	08004f43 	.word	0x08004f43
 8004f30:	2301      	movs	r3, #1
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e150      	b.n	80051d8 <UART_SetConfig+0x348>
 8004f36:	2302      	movs	r3, #2
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e14d      	b.n	80051d8 <UART_SetConfig+0x348>
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e14a      	b.n	80051d8 <UART_SetConfig+0x348>
 8004f42:	2308      	movs	r3, #8
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e147      	b.n	80051d8 <UART_SetConfig+0x348>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e144      	b.n	80051d8 <UART_SetConfig+0x348>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a83      	ldr	r2, [pc, #524]	; (8005160 <UART_SetConfig+0x2d0>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d132      	bne.n	8004fbe <UART_SetConfig+0x12e>
 8004f58:	4b80      	ldr	r3, [pc, #512]	; (800515c <UART_SetConfig+0x2cc>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	d828      	bhi.n	8004fb8 <UART_SetConfig+0x128>
 8004f66:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <UART_SetConfig+0xdc>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fb9 	.word	0x08004fb9
 8004f74:	08004fb9 	.word	0x08004fb9
 8004f78:	08004fb9 	.word	0x08004fb9
 8004f7c:	08004fad 	.word	0x08004fad
 8004f80:	08004fb9 	.word	0x08004fb9
 8004f84:	08004fb9 	.word	0x08004fb9
 8004f88:	08004fb9 	.word	0x08004fb9
 8004f8c:	08004fa7 	.word	0x08004fa7
 8004f90:	08004fb9 	.word	0x08004fb9
 8004f94:	08004fb9 	.word	0x08004fb9
 8004f98:	08004fb9 	.word	0x08004fb9
 8004f9c:	08004fb3 	.word	0x08004fb3
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e118      	b.n	80051d8 <UART_SetConfig+0x348>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e115      	b.n	80051d8 <UART_SetConfig+0x348>
 8004fac:	2304      	movs	r3, #4
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e112      	b.n	80051d8 <UART_SetConfig+0x348>
 8004fb2:	2308      	movs	r3, #8
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e10f      	b.n	80051d8 <UART_SetConfig+0x348>
 8004fb8:	2310      	movs	r3, #16
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e10c      	b.n	80051d8 <UART_SetConfig+0x348>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a68      	ldr	r2, [pc, #416]	; (8005164 <UART_SetConfig+0x2d4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d120      	bne.n	800500a <UART_SetConfig+0x17a>
 8004fc8:	4b64      	ldr	r3, [pc, #400]	; (800515c <UART_SetConfig+0x2cc>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fd2:	2b30      	cmp	r3, #48	; 0x30
 8004fd4:	d013      	beq.n	8004ffe <UART_SetConfig+0x16e>
 8004fd6:	2b30      	cmp	r3, #48	; 0x30
 8004fd8:	d814      	bhi.n	8005004 <UART_SetConfig+0x174>
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d009      	beq.n	8004ff2 <UART_SetConfig+0x162>
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d810      	bhi.n	8005004 <UART_SetConfig+0x174>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <UART_SetConfig+0x15c>
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d006      	beq.n	8004ff8 <UART_SetConfig+0x168>
 8004fea:	e00b      	b.n	8005004 <UART_SetConfig+0x174>
 8004fec:	2300      	movs	r3, #0
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e0f2      	b.n	80051d8 <UART_SetConfig+0x348>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	77fb      	strb	r3, [r7, #31]
 8004ff6:	e0ef      	b.n	80051d8 <UART_SetConfig+0x348>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	e0ec      	b.n	80051d8 <UART_SetConfig+0x348>
 8004ffe:	2308      	movs	r3, #8
 8005000:	77fb      	strb	r3, [r7, #31]
 8005002:	e0e9      	b.n	80051d8 <UART_SetConfig+0x348>
 8005004:	2310      	movs	r3, #16
 8005006:	77fb      	strb	r3, [r7, #31]
 8005008:	e0e6      	b.n	80051d8 <UART_SetConfig+0x348>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a56      	ldr	r2, [pc, #344]	; (8005168 <UART_SetConfig+0x2d8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d120      	bne.n	8005056 <UART_SetConfig+0x1c6>
 8005014:	4b51      	ldr	r3, [pc, #324]	; (800515c <UART_SetConfig+0x2cc>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800501e:	2bc0      	cmp	r3, #192	; 0xc0
 8005020:	d013      	beq.n	800504a <UART_SetConfig+0x1ba>
 8005022:	2bc0      	cmp	r3, #192	; 0xc0
 8005024:	d814      	bhi.n	8005050 <UART_SetConfig+0x1c0>
 8005026:	2b80      	cmp	r3, #128	; 0x80
 8005028:	d009      	beq.n	800503e <UART_SetConfig+0x1ae>
 800502a:	2b80      	cmp	r3, #128	; 0x80
 800502c:	d810      	bhi.n	8005050 <UART_SetConfig+0x1c0>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <UART_SetConfig+0x1a8>
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d006      	beq.n	8005044 <UART_SetConfig+0x1b4>
 8005036:	e00b      	b.n	8005050 <UART_SetConfig+0x1c0>
 8005038:	2300      	movs	r3, #0
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e0cc      	b.n	80051d8 <UART_SetConfig+0x348>
 800503e:	2302      	movs	r3, #2
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	e0c9      	b.n	80051d8 <UART_SetConfig+0x348>
 8005044:	2304      	movs	r3, #4
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e0c6      	b.n	80051d8 <UART_SetConfig+0x348>
 800504a:	2308      	movs	r3, #8
 800504c:	77fb      	strb	r3, [r7, #31]
 800504e:	e0c3      	b.n	80051d8 <UART_SetConfig+0x348>
 8005050:	2310      	movs	r3, #16
 8005052:	77fb      	strb	r3, [r7, #31]
 8005054:	e0c0      	b.n	80051d8 <UART_SetConfig+0x348>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a44      	ldr	r2, [pc, #272]	; (800516c <UART_SetConfig+0x2dc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d125      	bne.n	80050ac <UART_SetConfig+0x21c>
 8005060:	4b3e      	ldr	r3, [pc, #248]	; (800515c <UART_SetConfig+0x2cc>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800506e:	d017      	beq.n	80050a0 <UART_SetConfig+0x210>
 8005070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005074:	d817      	bhi.n	80050a6 <UART_SetConfig+0x216>
 8005076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800507a:	d00b      	beq.n	8005094 <UART_SetConfig+0x204>
 800507c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005080:	d811      	bhi.n	80050a6 <UART_SetConfig+0x216>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <UART_SetConfig+0x1fe>
 8005086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800508a:	d006      	beq.n	800509a <UART_SetConfig+0x20a>
 800508c:	e00b      	b.n	80050a6 <UART_SetConfig+0x216>
 800508e:	2300      	movs	r3, #0
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e0a1      	b.n	80051d8 <UART_SetConfig+0x348>
 8005094:	2302      	movs	r3, #2
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e09e      	b.n	80051d8 <UART_SetConfig+0x348>
 800509a:	2304      	movs	r3, #4
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e09b      	b.n	80051d8 <UART_SetConfig+0x348>
 80050a0:	2308      	movs	r3, #8
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e098      	b.n	80051d8 <UART_SetConfig+0x348>
 80050a6:	2310      	movs	r3, #16
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e095      	b.n	80051d8 <UART_SetConfig+0x348>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2f      	ldr	r2, [pc, #188]	; (8005170 <UART_SetConfig+0x2e0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d125      	bne.n	8005102 <UART_SetConfig+0x272>
 80050b6:	4b29      	ldr	r3, [pc, #164]	; (800515c <UART_SetConfig+0x2cc>)
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050c4:	d017      	beq.n	80050f6 <UART_SetConfig+0x266>
 80050c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ca:	d817      	bhi.n	80050fc <UART_SetConfig+0x26c>
 80050cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d0:	d00b      	beq.n	80050ea <UART_SetConfig+0x25a>
 80050d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d6:	d811      	bhi.n	80050fc <UART_SetConfig+0x26c>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <UART_SetConfig+0x254>
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e0:	d006      	beq.n	80050f0 <UART_SetConfig+0x260>
 80050e2:	e00b      	b.n	80050fc <UART_SetConfig+0x26c>
 80050e4:	2301      	movs	r3, #1
 80050e6:	77fb      	strb	r3, [r7, #31]
 80050e8:	e076      	b.n	80051d8 <UART_SetConfig+0x348>
 80050ea:	2302      	movs	r3, #2
 80050ec:	77fb      	strb	r3, [r7, #31]
 80050ee:	e073      	b.n	80051d8 <UART_SetConfig+0x348>
 80050f0:	2304      	movs	r3, #4
 80050f2:	77fb      	strb	r3, [r7, #31]
 80050f4:	e070      	b.n	80051d8 <UART_SetConfig+0x348>
 80050f6:	2308      	movs	r3, #8
 80050f8:	77fb      	strb	r3, [r7, #31]
 80050fa:	e06d      	b.n	80051d8 <UART_SetConfig+0x348>
 80050fc:	2310      	movs	r3, #16
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	e06a      	b.n	80051d8 <UART_SetConfig+0x348>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <UART_SetConfig+0x2e4>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d138      	bne.n	800517e <UART_SetConfig+0x2ee>
 800510c:	4b13      	ldr	r3, [pc, #76]	; (800515c <UART_SetConfig+0x2cc>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800511a:	d017      	beq.n	800514c <UART_SetConfig+0x2bc>
 800511c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005120:	d82a      	bhi.n	8005178 <UART_SetConfig+0x2e8>
 8005122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005126:	d00b      	beq.n	8005140 <UART_SetConfig+0x2b0>
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512c:	d824      	bhi.n	8005178 <UART_SetConfig+0x2e8>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <UART_SetConfig+0x2aa>
 8005132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005136:	d006      	beq.n	8005146 <UART_SetConfig+0x2b6>
 8005138:	e01e      	b.n	8005178 <UART_SetConfig+0x2e8>
 800513a:	2300      	movs	r3, #0
 800513c:	77fb      	strb	r3, [r7, #31]
 800513e:	e04b      	b.n	80051d8 <UART_SetConfig+0x348>
 8005140:	2302      	movs	r3, #2
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e048      	b.n	80051d8 <UART_SetConfig+0x348>
 8005146:	2304      	movs	r3, #4
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e045      	b.n	80051d8 <UART_SetConfig+0x348>
 800514c:	2308      	movs	r3, #8
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	e042      	b.n	80051d8 <UART_SetConfig+0x348>
 8005152:	bf00      	nop
 8005154:	efff69f3 	.word	0xefff69f3
 8005158:	40011000 	.word	0x40011000
 800515c:	40023800 	.word	0x40023800
 8005160:	40004400 	.word	0x40004400
 8005164:	40004800 	.word	0x40004800
 8005168:	40004c00 	.word	0x40004c00
 800516c:	40005000 	.word	0x40005000
 8005170:	40011400 	.word	0x40011400
 8005174:	40007800 	.word	0x40007800
 8005178:	2310      	movs	r3, #16
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e02c      	b.n	80051d8 <UART_SetConfig+0x348>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a72      	ldr	r2, [pc, #456]	; (800534c <UART_SetConfig+0x4bc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d125      	bne.n	80051d4 <UART_SetConfig+0x344>
 8005188:	4b71      	ldr	r3, [pc, #452]	; (8005350 <UART_SetConfig+0x4c0>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005192:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005196:	d017      	beq.n	80051c8 <UART_SetConfig+0x338>
 8005198:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800519c:	d817      	bhi.n	80051ce <UART_SetConfig+0x33e>
 800519e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a2:	d00b      	beq.n	80051bc <UART_SetConfig+0x32c>
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a8:	d811      	bhi.n	80051ce <UART_SetConfig+0x33e>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <UART_SetConfig+0x326>
 80051ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b2:	d006      	beq.n	80051c2 <UART_SetConfig+0x332>
 80051b4:	e00b      	b.n	80051ce <UART_SetConfig+0x33e>
 80051b6:	2300      	movs	r3, #0
 80051b8:	77fb      	strb	r3, [r7, #31]
 80051ba:	e00d      	b.n	80051d8 <UART_SetConfig+0x348>
 80051bc:	2302      	movs	r3, #2
 80051be:	77fb      	strb	r3, [r7, #31]
 80051c0:	e00a      	b.n	80051d8 <UART_SetConfig+0x348>
 80051c2:	2304      	movs	r3, #4
 80051c4:	77fb      	strb	r3, [r7, #31]
 80051c6:	e007      	b.n	80051d8 <UART_SetConfig+0x348>
 80051c8:	2308      	movs	r3, #8
 80051ca:	77fb      	strb	r3, [r7, #31]
 80051cc:	e004      	b.n	80051d8 <UART_SetConfig+0x348>
 80051ce:	2310      	movs	r3, #16
 80051d0:	77fb      	strb	r3, [r7, #31]
 80051d2:	e001      	b.n	80051d8 <UART_SetConfig+0x348>
 80051d4:	2310      	movs	r3, #16
 80051d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e0:	d15b      	bne.n	800529a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051e2:	7ffb      	ldrb	r3, [r7, #31]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d828      	bhi.n	800523a <UART_SetConfig+0x3aa>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x360>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	0800523b 	.word	0x0800523b
 8005200:	0800522b 	.word	0x0800522b
 8005204:	0800523b 	.word	0x0800523b
 8005208:	0800523b 	.word	0x0800523b
 800520c:	0800523b 	.word	0x0800523b
 8005210:	08005233 	.word	0x08005233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fd fe28 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8005218:	61b8      	str	r0, [r7, #24]
        break;
 800521a:	e013      	b.n	8005244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7fd fe38 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 8005220:	61b8      	str	r0, [r7, #24]
        break;
 8005222:	e00f      	b.n	8005244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005224:	4b4b      	ldr	r3, [pc, #300]	; (8005354 <UART_SetConfig+0x4c4>)
 8005226:	61bb      	str	r3, [r7, #24]
        break;
 8005228:	e00c      	b.n	8005244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522a:	f7fd fd4b 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 800522e:	61b8      	str	r0, [r7, #24]
        break;
 8005230:	e008      	b.n	8005244 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005236:	61bb      	str	r3, [r7, #24]
        break;
 8005238:	e004      	b.n	8005244 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	77bb      	strb	r3, [r7, #30]
        break;
 8005242:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d074      	beq.n	8005334 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	005a      	lsls	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	085b      	lsrs	r3, r3, #1
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	fbb2 f3f3 	udiv	r3, r2, r3
 800525e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	d916      	bls.n	8005294 <UART_SetConfig+0x404>
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526c:	d212      	bcs.n	8005294 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	b29b      	uxth	r3, r3
 8005272:	f023 030f 	bic.w	r3, r3, #15
 8005276:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	b29b      	uxth	r3, r3
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	b29a      	uxth	r2, r3
 8005284:	89fb      	ldrh	r3, [r7, #14]
 8005286:	4313      	orrs	r3, r2
 8005288:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	89fa      	ldrh	r2, [r7, #14]
 8005290:	60da      	str	r2, [r3, #12]
 8005292:	e04f      	b.n	8005334 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	77bb      	strb	r3, [r7, #30]
 8005298:	e04c      	b.n	8005334 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800529a:	7ffb      	ldrb	r3, [r7, #31]
 800529c:	2b08      	cmp	r3, #8
 800529e:	d828      	bhi.n	80052f2 <UART_SetConfig+0x462>
 80052a0:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <UART_SetConfig+0x418>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052d5 	.word	0x080052d5
 80052b0:	080052dd 	.word	0x080052dd
 80052b4:	080052f3 	.word	0x080052f3
 80052b8:	080052e3 	.word	0x080052e3
 80052bc:	080052f3 	.word	0x080052f3
 80052c0:	080052f3 	.word	0x080052f3
 80052c4:	080052f3 	.word	0x080052f3
 80052c8:	080052eb 	.word	0x080052eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052cc:	f7fd fdcc 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 80052d0:	61b8      	str	r0, [r7, #24]
        break;
 80052d2:	e013      	b.n	80052fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d4:	f7fd fddc 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 80052d8:	61b8      	str	r0, [r7, #24]
        break;
 80052da:	e00f      	b.n	80052fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052dc:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <UART_SetConfig+0x4c4>)
 80052de:	61bb      	str	r3, [r7, #24]
        break;
 80052e0:	e00c      	b.n	80052fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e2:	f7fd fcef 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 80052e6:	61b8      	str	r0, [r7, #24]
        break;
 80052e8:	e008      	b.n	80052fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ee:	61bb      	str	r3, [r7, #24]
        break;
 80052f0:	e004      	b.n	80052fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	77bb      	strb	r3, [r7, #30]
        break;
 80052fa:	bf00      	nop
    }

    if (pclk != 0U)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d018      	beq.n	8005334 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	085a      	lsrs	r2, r3, #1
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	441a      	add	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b0f      	cmp	r3, #15
 800531a:	d909      	bls.n	8005330 <UART_SetConfig+0x4a0>
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005322:	d205      	bcs.n	8005330 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	b29a      	uxth	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e001      	b.n	8005334 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005340:	7fbb      	ldrb	r3, [r7, #30]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3720      	adds	r7, #32
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40007c00 	.word	0x40007c00
 8005350:	40023800 	.word	0x40023800
 8005354:	00f42400 	.word	0x00f42400

08005358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01a      	beq.n	800546e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005456:	d10a      	bne.n	800546e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  }
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054ac:	f7fc f9b4 	bl	8001818 <HAL_GetTick>
 80054b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b08      	cmp	r3, #8
 80054be:	d10e      	bne.n	80054de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f81b 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e011      	b.n	8005502 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b09c      	sub	sp, #112	; 0x70
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551a:	e0a7      	b.n	800566c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005522:	f000 80a3 	beq.w	800566c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005526:	f7fc f977 	bl	8001818 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005532:	429a      	cmp	r2, r3
 8005534:	d302      	bcc.n	800553c <UART_WaitOnFlagUntilTimeout+0x32>
 8005536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005538:	2b00      	cmp	r3, #0
 800553a:	d13f      	bne.n	80055bc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005550:	667b      	str	r3, [r7, #100]	; 0x64
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	461a      	mov	r2, r3
 8005558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800555a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800555c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005562:	e841 2300 	strex	r3, r2, [r1]
 8005566:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1e6      	bne.n	800553c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3308      	adds	r3, #8
 8005574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	663b      	str	r3, [r7, #96]	; 0x60
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3308      	adds	r3, #8
 800558c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800558e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800559c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e5      	bne.n	800556e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e068      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0304 	and.w	r3, r3, #4
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d050      	beq.n	800566c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d8:	d148      	bne.n	800566c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055e2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
 8005604:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e6      	bne.n	80055e4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3308      	adds	r3, #8
 800561c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	613b      	str	r3, [r7, #16]
   return(result);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	66bb      	str	r3, [r7, #104]	; 0x68
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3308      	adds	r3, #8
 8005634:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005636:	623a      	str	r2, [r7, #32]
 8005638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	69f9      	ldr	r1, [r7, #28]
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	61bb      	str	r3, [r7, #24]
   return(result);
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e5      	bne.n	8005616 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e010      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4013      	ands	r3, r2
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	bf0c      	ite	eq
 800567c:	2301      	moveq	r3, #1
 800567e:	2300      	movne	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	429a      	cmp	r2, r3
 8005688:	f43f af48 	beq.w	800551c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3770      	adds	r7, #112	; 0x70
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005698:	b084      	sub	sp, #16
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	f107 001c 	add.w	r0, r7, #28
 80056a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80056ae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80056b0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80056b2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80056b6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80056ba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80056bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80056be:	431a      	orrs	r2, r3
             Init.ClockDiv
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80056c2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	4b07      	ldr	r3, [pc, #28]	; (80056ec <SDMMC_Init+0x54>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	b004      	add	sp, #16
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	ffff8100 	.word	0xffff8100

080056f0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2203      	movs	r2, #3
 8005738:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0303 	and.w	r3, r3, #3
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005782:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005788:	431a      	orrs	r2, r3
                       Command->CPSM);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800578e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <SDMMC_SendCommand+0x50>)
 800579c:	4013      	ands	r3, r2
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	fffff000 	.word	0xfffff000

080057b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	b2db      	uxtb	r3, r3
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3314      	adds	r3, #20
 80057e0:	461a      	mov	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	4413      	add	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
}  
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800581e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005824:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800582a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005842:	2300      	movs	r3, #0

}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800585e:	2310      	movs	r3, #16
 8005860:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800586a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800586e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005870:	f107 0308 	add.w	r3, r7, #8
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff ff74 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800587c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005880:	2110      	movs	r1, #16
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fa1a 	bl	8005cbc <SDMMC_GetCmdResp1>
 8005888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800588a:	69fb      	ldr	r3, [r7, #28]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80058a2:	2311      	movs	r3, #17
 80058a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058a6:	2340      	movs	r3, #64	; 0x40
 80058a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff ff52 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80058c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c4:	2111      	movs	r1, #17
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f9f8 	bl	8005cbc <SDMMC_GetCmdResp1>
 80058cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058ce:	69fb      	ldr	r3, [r7, #28]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3720      	adds	r7, #32
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80058e6:	2312      	movs	r3, #18
 80058e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058ea:	2340      	movs	r3, #64	; 0x40
 80058ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7ff ff30 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	2112      	movs	r1, #18
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f9d6 	bl	8005cbc <SDMMC_GetCmdResp1>
 8005910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005912:	69fb      	ldr	r3, [r7, #28]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800592a:	2318      	movs	r3, #24
 800592c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800592e:	2340      	movs	r3, #64	; 0x40
 8005930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800593a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800593c:	f107 0308 	add.w	r3, r7, #8
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff ff0e 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	2118      	movs	r1, #24
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f9b4 	bl	8005cbc <SDMMC_GetCmdResp1>
 8005954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005956:	69fb      	ldr	r3, [r7, #28]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800596e:	2319      	movs	r3, #25
 8005970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800597a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800597e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005980:	f107 0308 	add.w	r3, r7, #8
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff feec 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800598c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005990:	2119      	movs	r1, #25
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f992 	bl	8005cbc <SDMMC_GetCmdResp1>
 8005998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800599a:	69fb      	ldr	r3, [r7, #28]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80059b0:	230c      	movs	r3, #12
 80059b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059b4:	2340      	movs	r3, #64	; 0x40
 80059b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059c2:	f107 0308 	add.w	r3, r7, #8
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff fecb 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80059ce:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <SDMMC_CmdStopTransfer+0x40>)
 80059d0:	210c      	movs	r1, #12
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f972 	bl	8005cbc <SDMMC_GetCmdResp1>
 80059d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059da:	69fb      	ldr	r3, [r7, #28]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	05f5e100 	.word	0x05f5e100

080059e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08a      	sub	sp, #40	; 0x28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80059f8:	2307      	movs	r3, #7
 80059fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a00:	2300      	movs	r3, #0
 8005a02:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a08:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a0a:	f107 0310 	add.w	r3, r7, #16
 8005a0e:	4619      	mov	r1, r3
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff fea7 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1a:	2107      	movs	r1, #7
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f94d 	bl	8005cbc <SDMMC_GetCmdResp1>
 8005a22:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3728      	adds	r7, #40	; 0x28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b088      	sub	sp, #32
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a4c:	f107 0308 	add.w	r3, r7, #8
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff fe86 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fb67 	bl	800612c <SDMMC_GetCmdError>
 8005a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a60:	69fb      	ldr	r3, [r7, #28]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b088      	sub	sp, #32
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005a72:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005a76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005a78:	2308      	movs	r3, #8
 8005a7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a7c:	2340      	movs	r3, #64	; 0x40
 8005a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a8a:	f107 0308 	add.w	r3, r7, #8
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff fe67 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fafa 	bl	8006090 <SDMMC_GetCmdResp7>
 8005a9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3720      	adds	r7, #32
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005ab6:	2337      	movs	r3, #55	; 0x37
 8005ab8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005aba:	2340      	movs	r3, #64	; 0x40
 8005abc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ac6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ac8:	f107 0308 	add.w	r3, r7, #8
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fe48 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad8:	2137      	movs	r1, #55	; 0x37
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f8ee 	bl	8005cbc <SDMMC_GetCmdResp1>
 8005ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ae2:	69fb      	ldr	r3, [r7, #28]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <SDMMC_CmdAppOperCommand+0x44>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005afe:	2329      	movs	r3, #41	; 0x29
 8005b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b02:	2340      	movs	r3, #64	; 0x40
 8005b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b10:	f107 0308 	add.w	r3, r7, #8
 8005b14:	4619      	mov	r1, r3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7ff fe24 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fa03 	bl	8005f28 <SDMMC_GetCmdResp3>
 8005b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b24:	69fb      	ldr	r3, [r7, #28]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	80100000 	.word	0x80100000

08005b34 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005b42:	2306      	movs	r3, #6
 8005b44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b46:	2340      	movs	r3, #64	; 0x40
 8005b48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b54:	f107 0308 	add.w	r3, r7, #8
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff fe02 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b64:	2106      	movs	r1, #6
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f8a8 	bl	8005cbc <SDMMC_GetCmdResp1>
 8005b6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005b84:	2333      	movs	r3, #51	; 0x33
 8005b86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b88:	2340      	movs	r3, #64	; 0x40
 8005b8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b96:	f107 0308 	add.w	r3, r7, #8
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7ff fde1 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba6:	2133      	movs	r1, #51	; 0x33
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f887 	bl	8005cbc <SDMMC_GetCmdResp1>
 8005bae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3720      	adds	r7, #32
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b088      	sub	sp, #32
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005bca:	23c0      	movs	r3, #192	; 0xc0
 8005bcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bd8:	f107 0308 	add.w	r3, r7, #8
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff fdc0 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f957 	bl	8005e98 <SDMMC_GetCmdResp2>
 8005bea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bec:	69fb      	ldr	r3, [r7, #28]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b088      	sub	sp, #32
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005c04:	2309      	movs	r3, #9
 8005c06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005c08:	23c0      	movs	r3, #192	; 0xc0
 8005c0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c16:	f107 0308 	add.w	r3, r7, #8
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff fda1 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f938 	bl	8005e98 <SDMMC_GetCmdResp2>
 8005c28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3720      	adds	r7, #32
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005c42:	2303      	movs	r3, #3
 8005c44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c46:	2340      	movs	r3, #64	; 0x40
 8005c48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c54:	f107 0308 	add.w	r3, r7, #8
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff fd82 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	2103      	movs	r1, #3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f99d 	bl	8005fa4 <SDMMC_GetCmdResp6>
 8005c6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b088      	sub	sp, #32
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005c84:	230d      	movs	r3, #13
 8005c86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c88:	2340      	movs	r3, #64	; 0x40
 8005c8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c96:	f107 0308 	add.w	r3, r7, #8
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff fd61 	bl	8005764 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	210d      	movs	r1, #13
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 f807 	bl	8005cbc <SDMMC_GetCmdResp1>
 8005cae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3720      	adds	r7, #32
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005cca:	4b70      	ldr	r3, [pc, #448]	; (8005e8c <SDMMC_GetCmdResp1+0x1d0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a70      	ldr	r2, [pc, #448]	; (8005e90 <SDMMC_GetCmdResp1+0x1d4>)
 8005cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd4:	0a5a      	lsrs	r2, r3, #9
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	fb02 f303 	mul.w	r3, r2, r3
 8005cdc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	1e5a      	subs	r2, r3, #1
 8005ce2:	61fa      	str	r2, [r7, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d102      	bne.n	8005cee <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ce8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cec:	e0c9      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0ef      	beq.n	8005cde <SDMMC_GetCmdResp1+0x22>
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1ea      	bne.n	8005cde <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2204      	movs	r2, #4
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d1a:	2304      	movs	r3, #4
 8005d1c:	e0b1      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0a6      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	22c5      	movs	r2, #197	; 0xc5
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005d3a:	68f8      	ldr	r0, [r7, #12]
 8005d3c:	f7ff fd3c 	bl	80057b8 <SDMMC_GetCommandResponse>
 8005d40:	4603      	mov	r3, r0
 8005d42:	461a      	mov	r2, r3
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d001      	beq.n	8005d4e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e099      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005d4e:	2100      	movs	r1, #0
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f7ff fd3e 	bl	80057d2 <SDMMC_GetResponse>
 8005d56:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4b4e      	ldr	r3, [pc, #312]	; (8005e94 <SDMMC_GetCmdResp1+0x1d8>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e08d      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	da02      	bge.n	8005d72 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005d6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d70:	e087      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005d7c:	2340      	movs	r3, #64	; 0x40
 8005d7e:	e080      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005d8a:	2380      	movs	r3, #128	; 0x80
 8005d8c:	e079      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d9c:	e071      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dac:	e069      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dbc:	e061      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dcc:	e059      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ddc:	e051      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dec:	e049      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005df8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dfc:	e041      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e0c:	e039      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e1c:	e031      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005e28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005e2c:	e029      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005e38:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005e3c:	e021      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005e48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005e4c:	e019      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005e58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e5c:	e011      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005e68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e6c:	e009      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005e78:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005e7c:	e001      	b.n	8005e82 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3720      	adds	r7, #32
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000000 	.word	0x20000000
 8005e90:	10624dd3 	.word	0x10624dd3
 8005e94:	fdffe008 	.word	0xfdffe008

08005e98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ea0:	4b1f      	ldr	r3, [pc, #124]	; (8005f20 <SDMMC_GetCmdResp2+0x88>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1f      	ldr	r2, [pc, #124]	; (8005f24 <SDMMC_GetCmdResp2+0x8c>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	0a5b      	lsrs	r3, r3, #9
 8005eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb0:	fb02 f303 	mul.w	r3, r2, r3
 8005eb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1e5a      	subs	r2, r3, #1
 8005eba:	60fa      	str	r2, [r7, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d102      	bne.n	8005ec6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ec0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ec4:	e026      	b.n	8005f14 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0ef      	beq.n	8005eb6 <SDMMC_GetCmdResp2+0x1e>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1ea      	bne.n	8005eb6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2204      	movs	r2, #4
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ef2:	2304      	movs	r3, #4
 8005ef4:	e00e      	b.n	8005f14 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d004      	beq.n	8005f0c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e003      	b.n	8005f14 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	22c5      	movs	r2, #197	; 0xc5
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	20000000 	.word	0x20000000
 8005f24:	10624dd3 	.word	0x10624dd3

08005f28 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f30:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <SDMMC_GetCmdResp3+0x74>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1a      	ldr	r2, [pc, #104]	; (8005fa0 <SDMMC_GetCmdResp3+0x78>)
 8005f36:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3a:	0a5b      	lsrs	r3, r3, #9
 8005f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f40:	fb02 f303 	mul.w	r3, r2, r3
 8005f44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	1e5a      	subs	r2, r3, #1
 8005f4a:	60fa      	str	r2, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d102      	bne.n	8005f56 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f54:	e01b      	b.n	8005f8e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0ef      	beq.n	8005f46 <SDMMC_GetCmdResp3+0x1e>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1ea      	bne.n	8005f46 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d004      	beq.n	8005f86 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2204      	movs	r2, #4
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005f82:	2304      	movs	r3, #4
 8005f84:	e003      	b.n	8005f8e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	22c5      	movs	r2, #197	; 0xc5
 8005f8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20000000 	.word	0x20000000
 8005fa0:	10624dd3 	.word	0x10624dd3

08005fa4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	460b      	mov	r3, r1
 8005fae:	607a      	str	r2, [r7, #4]
 8005fb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005fb2:	4b35      	ldr	r3, [pc, #212]	; (8006088 <SDMMC_GetCmdResp6+0xe4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a35      	ldr	r2, [pc, #212]	; (800608c <SDMMC_GetCmdResp6+0xe8>)
 8005fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbc:	0a5b      	lsrs	r3, r3, #9
 8005fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	61fa      	str	r2, [r7, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d102      	bne.n	8005fd8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fd6:	e052      	b.n	800607e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fdc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0ef      	beq.n	8005fc8 <SDMMC_GetCmdResp6+0x24>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1ea      	bne.n	8005fc8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2204      	movs	r2, #4
 8006002:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006004:	2304      	movs	r3, #4
 8006006:	e03a      	b.n	800607e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800601a:	2301      	movs	r3, #1
 800601c:	e02f      	b.n	800607e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7ff fbca 	bl	80057b8 <SDMMC_GetCommandResponse>
 8006024:	4603      	mov	r3, r0
 8006026:	461a      	mov	r2, r3
 8006028:	7afb      	ldrb	r3, [r7, #11]
 800602a:	4293      	cmp	r3, r2
 800602c:	d001      	beq.n	8006032 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800602e:	2301      	movs	r3, #1
 8006030:	e025      	b.n	800607e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	22c5      	movs	r2, #197	; 0xc5
 8006036:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006038:	2100      	movs	r1, #0
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7ff fbc9 	bl	80057d2 <SDMMC_GetResponse>
 8006040:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	b29a      	uxth	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006056:	2300      	movs	r3, #0
 8006058:	e011      	b.n	800607e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006068:	e009      	b.n	800607e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006078:	e001      	b.n	800607e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800607a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800607e:	4618      	mov	r0, r3
 8006080:	3720      	adds	r7, #32
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000000 	.word	0x20000000
 800608c:	10624dd3 	.word	0x10624dd3

08006090 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006098:	4b22      	ldr	r3, [pc, #136]	; (8006124 <SDMMC_GetCmdResp7+0x94>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a22      	ldr	r2, [pc, #136]	; (8006128 <SDMMC_GetCmdResp7+0x98>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	0a5b      	lsrs	r3, r3, #9
 80060a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a8:	fb02 f303 	mul.w	r3, r2, r3
 80060ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1e5a      	subs	r2, r3, #1
 80060b2:	60fa      	str	r2, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80060b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80060bc:	e02c      	b.n	8006118 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0ef      	beq.n	80060ae <SDMMC_GetCmdResp7+0x1e>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1ea      	bne.n	80060ae <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2204      	movs	r2, #4
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80060ea:	2304      	movs	r3, #4
 80060ec:	e014      	b.n	8006118 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d004      	beq.n	8006104 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006100:	2301      	movs	r3, #1
 8006102:	e009      	b.n	8006118 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2240      	movs	r2, #64	; 0x40
 8006114:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006116:	2300      	movs	r3, #0
  
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	20000000 	.word	0x20000000
 8006128:	10624dd3 	.word	0x10624dd3

0800612c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006134:	4b11      	ldr	r3, [pc, #68]	; (800617c <SDMMC_GetCmdError+0x50>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a11      	ldr	r2, [pc, #68]	; (8006180 <SDMMC_GetCmdError+0x54>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	0a5b      	lsrs	r3, r3, #9
 8006140:	f241 3288 	movw	r2, #5000	; 0x1388
 8006144:	fb02 f303 	mul.w	r3, r2, r3
 8006148:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	1e5a      	subs	r2, r3, #1
 800614e:	60fa      	str	r2, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d102      	bne.n	800615a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006154:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006158:	e009      	b.n	800616e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0f1      	beq.n	800614a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	22c5      	movs	r2, #197	; 0xc5
 800616a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000000 	.word	0x20000000
 8006180:	10624dd3 	.word	0x10624dd3

08006184 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006188:	4904      	ldr	r1, [pc, #16]	; (800619c <MX_FATFS_Init+0x18>)
 800618a:	4805      	ldr	r0, [pc, #20]	; (80061a0 <MX_FATFS_Init+0x1c>)
 800618c:	f002 fc08 	bl	80089a0 <FATFS_LinkDriver>
 8006190:	4603      	mov	r3, r0
 8006192:	461a      	mov	r2, r3
 8006194:	4b03      	ldr	r3, [pc, #12]	; (80061a4 <MX_FATFS_Init+0x20>)
 8006196:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006198:	bf00      	nop
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000598 	.word	0x20000598
 80061a0:	0800952c 	.word	0x0800952c
 80061a4:	20000594 	.word	0x20000594

080061a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80061c2:	f000 f896 	bl	80062f2 <BSP_SD_IsDetected>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d001      	beq.n	80061d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80061cc:	2302      	movs	r3, #2
 80061ce:	e012      	b.n	80061f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80061d0:	480b      	ldr	r0, [pc, #44]	; (8006200 <BSP_SD_Init+0x48>)
 80061d2:	f7fd fa61 	bl	8003698 <HAL_SD_Init>
 80061d6:	4603      	mov	r3, r0
 80061d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d109      	bne.n	80061f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80061e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80061e4:	4806      	ldr	r0, [pc, #24]	; (8006200 <BSP_SD_Init+0x48>)
 80061e6:	f7fe f827 	bl	8004238 <HAL_SD_ConfigWideBusOperation>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80061f4:	79fb      	ldrb	r3, [r7, #7]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200003c0 	.word	0x200003c0

08006204 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	68f9      	ldr	r1, [r7, #12]
 800621a:	4806      	ldr	r0, [pc, #24]	; (8006234 <BSP_SD_ReadBlocks_DMA+0x30>)
 800621c:	f7fd faf4 	bl	8003808 <HAL_SD_ReadBlocks_DMA>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800622a:	7dfb      	ldrb	r3, [r7, #23]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	200003c0 	.word	0x200003c0

08006238 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	68f9      	ldr	r1, [r7, #12]
 800624e:	4806      	ldr	r0, [pc, #24]	; (8006268 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006250:	f7fd fbbc 	bl	80039cc <HAL_SD_WriteBlocks_DMA>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800625e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	200003c0 	.word	0x200003c0

0800626c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006270:	4805      	ldr	r0, [pc, #20]	; (8006288 <BSP_SD_GetCardState+0x1c>)
 8006272:	f7fe f87b 	bl	800436c <HAL_SD_GetCardState>
 8006276:	4603      	mov	r3, r0
 8006278:	2b04      	cmp	r3, #4
 800627a:	bf14      	ite	ne
 800627c:	2301      	movne	r3, #1
 800627e:	2300      	moveq	r3, #0
 8006280:	b2db      	uxtb	r3, r3
}
 8006282:	4618      	mov	r0, r3
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	200003c0 	.word	0x200003c0

0800628c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	4803      	ldr	r0, [pc, #12]	; (80062a4 <BSP_SD_GetCardInfo+0x18>)
 8006298:	f7fd ffa2 	bl	80041e0 <HAL_SD_GetCardInfo>
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	200003c0 	.word	0x200003c0

080062a8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80062b0:	f000 f818 	bl	80062e4 <BSP_SD_AbortCallback>
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80062c4:	f000 f9a8 	bl	8006618 <BSP_SD_WriteCpltCallback>
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80062d8:	f000 f9aa 	bl	8006630 <BSP_SD_ReadCpltCallback>
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0

}
 80062e8:	bf00      	nop
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80062f8:	2301      	movs	r3, #1
 80062fa:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80062fc:	f000 f80c 	bl	8006318 <BSP_PlatformIsDetected>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006306:	2300      	movs	r3, #0
 8006308:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	b2db      	uxtb	r3, r3
}
 800630e:	4618      	mov	r0, r3
 8006310:	3708      	adds	r7, #8
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800631e:	2301      	movs	r3, #1
 8006320:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006326:	4806      	ldr	r0, [pc, #24]	; (8006340 <BSP_PlatformIsDetected+0x28>)
 8006328:	f7fc f90a 	bl	8002540 <HAL_GPIO_ReadPin>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006332:	2300      	movs	r3, #0
 8006334:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006336:	79fb      	ldrb	r3, [r7, #7]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40020800 	.word	0x40020800

08006344 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800634c:	f7fb fa64 	bl	8001818 <HAL_GetTick>
 8006350:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006352:	e006      	b.n	8006362 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006354:	f7ff ff8a 	bl	800626c <BSP_SD_GetCardState>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800635e:	2300      	movs	r3, #0
 8006360:	e009      	b.n	8006376 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006362:	f7fb fa59 	bl	8001818 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d8f0      	bhi.n	8006354 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
	...

08006380 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800638a:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <SD_CheckStatus+0x38>)
 800638c:	2201      	movs	r2, #1
 800638e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006390:	f7ff ff6c 	bl	800626c <BSP_SD_GetCardState>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d107      	bne.n	80063aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800639a:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <SD_CheckStatus+0x38>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <SD_CheckStatus+0x38>)
 80063a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80063aa:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <SD_CheckStatus+0x38>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	b2db      	uxtb	r3, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20000009 	.word	0x20000009

080063bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80063c6:	f7ff fef7 	bl	80061b8 <BSP_SD_Init>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d107      	bne.n	80063e0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff ffd4 	bl	8006380 <SD_CheckStatus>
 80063d8:	4603      	mov	r3, r0
 80063da:	461a      	mov	r2, r3
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <SD_initialize+0x34>)
 80063de:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80063e0:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <SD_initialize+0x34>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	b2db      	uxtb	r3, r3
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000009 	.word	0x20000009

080063f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff ffbd 	bl	8006380 <SD_CheckStatus>
 8006406:	4603      	mov	r3, r0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	603b      	str	r3, [r7, #0]
 800641c:	4603      	mov	r3, r0
 800641e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006424:	f247 5030 	movw	r0, #30000	; 0x7530
 8006428:	f7ff ff8c 	bl	8006344 <SD_CheckStatusWithTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	da01      	bge.n	8006436 <SD_read+0x26>
  {
    return res;
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	e03b      	b.n	80064ae <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	68b8      	ldr	r0, [r7, #8]
 800643c:	f7ff fee2 	bl	8006204 <BSP_SD_ReadBlocks_DMA>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d132      	bne.n	80064ac <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006446:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <SD_read+0xa8>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800644c:	f7fb f9e4 	bl	8001818 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006452:	bf00      	nop
 8006454:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <SD_read+0xa8>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d108      	bne.n	800646e <SD_read+0x5e>
 800645c:	f7fb f9dc 	bl	8001818 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	f247 522f 	movw	r2, #29999	; 0x752f
 800646a:	4293      	cmp	r3, r2
 800646c:	d9f2      	bls.n	8006454 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800646e:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <SD_read+0xa8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d102      	bne.n	800647c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]
 800647a:	e017      	b.n	80064ac <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800647c:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <SD_read+0xa8>)
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006482:	f7fb f9c9 	bl	8001818 <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006488:	e007      	b.n	800649a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800648a:	f7ff feef 	bl	800626c <BSP_SD_GetCardState>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <SD_read+0x8a>
          {
            res = RES_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006498:	e008      	b.n	80064ac <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800649a:	f7fb f9bd 	bl	8001818 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d9ee      	bls.n	800648a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	200007d0 	.word	0x200007d0

080064bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4603      	mov	r3, r0
 80064ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80064d0:	4b24      	ldr	r3, [pc, #144]	; (8006564 <SD_write+0xa8>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80064d6:	f247 5030 	movw	r0, #30000	; 0x7530
 80064da:	f7ff ff33 	bl	8006344 <SD_CheckStatusWithTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	da01      	bge.n	80064e8 <SD_write+0x2c>
  {
    return res;
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	e038      	b.n	800655a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	68b8      	ldr	r0, [r7, #8]
 80064ee:	f7ff fea3 	bl	8006238 <BSP_SD_WriteBlocks_DMA>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d12f      	bne.n	8006558 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80064f8:	f7fb f98e 	bl	8001818 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80064fe:	bf00      	nop
 8006500:	4b18      	ldr	r3, [pc, #96]	; (8006564 <SD_write+0xa8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d108      	bne.n	800651a <SD_write+0x5e>
 8006508:	f7fb f986 	bl	8001818 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	f247 522f 	movw	r2, #29999	; 0x752f
 8006516:	4293      	cmp	r3, r2
 8006518:	d9f2      	bls.n	8006500 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800651a:	4b12      	ldr	r3, [pc, #72]	; (8006564 <SD_write+0xa8>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d102      	bne.n	8006528 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	75fb      	strb	r3, [r7, #23]
 8006526:	e017      	b.n	8006558 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006528:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <SD_write+0xa8>)
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800652e:	f7fb f973 	bl	8001818 <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006534:	e007      	b.n	8006546 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006536:	f7ff fe99 	bl	800626c <BSP_SD_GetCardState>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <SD_write+0x8a>
          {
            res = RES_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	75fb      	strb	r3, [r7, #23]
            break;
 8006544:	e008      	b.n	8006558 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006546:	f7fb f967 	bl	8001818 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	f247 522f 	movw	r2, #29999	; 0x752f
 8006554:	4293      	cmp	r3, r2
 8006556:	d9ee      	bls.n	8006536 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	200007cc 	.word	0x200007cc

08006568 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08c      	sub	sp, #48	; 0x30
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	603a      	str	r2, [r7, #0]
 8006572:	71fb      	strb	r3, [r7, #7]
 8006574:	460b      	mov	r3, r1
 8006576:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800657e:	4b25      	ldr	r3, [pc, #148]	; (8006614 <SD_ioctl+0xac>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <SD_ioctl+0x28>
 800658c:	2303      	movs	r3, #3
 800658e:	e03c      	b.n	800660a <SD_ioctl+0xa2>

  switch (cmd)
 8006590:	79bb      	ldrb	r3, [r7, #6]
 8006592:	2b03      	cmp	r3, #3
 8006594:	d834      	bhi.n	8006600 <SD_ioctl+0x98>
 8006596:	a201      	add	r2, pc, #4	; (adr r2, 800659c <SD_ioctl+0x34>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065ad 	.word	0x080065ad
 80065a0:	080065b5 	.word	0x080065b5
 80065a4:	080065cd 	.word	0x080065cd
 80065a8:	080065e7 	.word	0x080065e7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80065b2:	e028      	b.n	8006606 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80065b4:	f107 030c 	add.w	r3, r7, #12
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fe67 	bl	800628c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80065be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80065ca:	e01c      	b.n	8006606 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80065cc:	f107 030c 	add.w	r3, r7, #12
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fe5b 	bl	800628c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	b29a      	uxth	r2, r3
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80065e4:	e00f      	b.n	8006606 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80065e6:	f107 030c 	add.w	r3, r7, #12
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7ff fe4e 	bl	800628c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	0a5a      	lsrs	r2, r3, #9
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80065fe:	e002      	b.n	8006606 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006600:	2304      	movs	r3, #4
 8006602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800660a:	4618      	mov	r0, r3
 800660c:	3730      	adds	r7, #48	; 0x30
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000009 	.word	0x20000009

08006618 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800661c:	4b03      	ldr	r3, [pc, #12]	; (800662c <BSP_SD_WriteCpltCallback+0x14>)
 800661e:	2201      	movs	r2, #1
 8006620:	601a      	str	r2, [r3, #0]
}
 8006622:	bf00      	nop
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	200007cc 	.word	0x200007cc

08006630 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006634:	4b03      	ldr	r3, [pc, #12]	; (8006644 <BSP_SD_ReadCpltCallback+0x14>)
 8006636:	2201      	movs	r2, #1
 8006638:	601a      	str	r2, [r3, #0]
}
 800663a:	bf00      	nop
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	200007d0 	.word	0x200007d0

08006648 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	4a08      	ldr	r2, [pc, #32]	; (8006678 <disk_status+0x30>)
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	79fa      	ldrb	r2, [r7, #7]
 8006660:	4905      	ldr	r1, [pc, #20]	; (8006678 <disk_status+0x30>)
 8006662:	440a      	add	r2, r1
 8006664:	7a12      	ldrb	r2, [r2, #8]
 8006666:	4610      	mov	r0, r2
 8006668:	4798      	blx	r3
 800666a:	4603      	mov	r3, r0
 800666c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800666e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	200007fc 	.word	0x200007fc

0800667c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	4a0d      	ldr	r2, [pc, #52]	; (80066c4 <disk_initialize+0x48>)
 800668e:	5cd3      	ldrb	r3, [r2, r3]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d111      	bne.n	80066b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	4a0b      	ldr	r2, [pc, #44]	; (80066c4 <disk_initialize+0x48>)
 8006698:	2101      	movs	r1, #1
 800669a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	4a09      	ldr	r2, [pc, #36]	; (80066c4 <disk_initialize+0x48>)
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	79fa      	ldrb	r2, [r7, #7]
 80066aa:	4906      	ldr	r1, [pc, #24]	; (80066c4 <disk_initialize+0x48>)
 80066ac:	440a      	add	r2, r1
 80066ae:	7a12      	ldrb	r2, [r2, #8]
 80066b0:	4610      	mov	r0, r2
 80066b2:	4798      	blx	r3
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	200007fc 	.word	0x200007fc

080066c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80066c8:	b590      	push	{r4, r7, lr}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	4a0a      	ldr	r2, [pc, #40]	; (8006704 <disk_read+0x3c>)
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	689c      	ldr	r4, [r3, #8]
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	4a07      	ldr	r2, [pc, #28]	; (8006704 <disk_read+0x3c>)
 80066e8:	4413      	add	r3, r2
 80066ea:	7a18      	ldrb	r0, [r3, #8]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	47a0      	blx	r4
 80066f4:	4603      	mov	r3, r0
 80066f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd90      	pop	{r4, r7, pc}
 8006702:	bf00      	nop
 8006704:	200007fc 	.word	0x200007fc

08006708 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006708:	b590      	push	{r4, r7, lr}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
 8006712:	603b      	str	r3, [r7, #0]
 8006714:	4603      	mov	r3, r0
 8006716:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	4a0a      	ldr	r2, [pc, #40]	; (8006744 <disk_write+0x3c>)
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	68dc      	ldr	r4, [r3, #12]
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	4a07      	ldr	r2, [pc, #28]	; (8006744 <disk_write+0x3c>)
 8006728:	4413      	add	r3, r2
 800672a:	7a18      	ldrb	r0, [r3, #8]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	47a0      	blx	r4
 8006734:	4603      	mov	r3, r0
 8006736:	75fb      	strb	r3, [r7, #23]
  return res;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
}
 800673a:	4618      	mov	r0, r3
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	bd90      	pop	{r4, r7, pc}
 8006742:	bf00      	nop
 8006744:	200007fc 	.word	0x200007fc

08006748 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	603a      	str	r2, [r7, #0]
 8006752:	71fb      	strb	r3, [r7, #7]
 8006754:	460b      	mov	r3, r1
 8006756:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	4a09      	ldr	r2, [pc, #36]	; (8006780 <disk_ioctl+0x38>)
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	79fa      	ldrb	r2, [r7, #7]
 8006766:	4906      	ldr	r1, [pc, #24]	; (8006780 <disk_ioctl+0x38>)
 8006768:	440a      	add	r2, r1
 800676a:	7a10      	ldrb	r0, [r2, #8]
 800676c:	79b9      	ldrb	r1, [r7, #6]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4798      	blx	r3
 8006772:	4603      	mov	r3, r0
 8006774:	73fb      	strb	r3, [r7, #15]
  return res;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	200007fc 	.word	0x200007fc

08006784 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3301      	adds	r3, #1
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006794:	89fb      	ldrh	r3, [r7, #14]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	b21a      	sxth	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	b21b      	sxth	r3, r3
 80067a0:	4313      	orrs	r3, r2
 80067a2:	b21b      	sxth	r3, r3
 80067a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80067a6:	89fb      	ldrh	r3, [r7, #14]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3303      	adds	r3, #3
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	3202      	adds	r2, #2
 80067cc:	7812      	ldrb	r2, [r2, #0]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	021b      	lsls	r3, r3, #8
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	3201      	adds	r2, #1
 80067da:	7812      	ldrb	r2, [r2, #0]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	7812      	ldrb	r2, [r2, #0]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80067ec:	68fb      	ldr	r3, [r7, #12]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	887a      	ldrh	r2, [r7, #2]
 800680e:	b2d2      	uxtb	r2, r2
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	887b      	ldrh	r3, [r7, #2]
 8006814:	0a1b      	lsrs	r3, r3, #8
 8006816:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	607a      	str	r2, [r7, #4]
 800681e:	887a      	ldrh	r2, [r7, #2]
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	0a1b      	lsrs	r3, r3, #8
 800684a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	607a      	str	r2, [r7, #4]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	0a1b      	lsrs	r3, r3, #8
 800686e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00d      	beq.n	80068be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	1c53      	adds	r3, r2, #1
 80068a6:	613b      	str	r3, [r7, #16]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1c59      	adds	r1, r3, #1
 80068ac:	6179      	str	r1, [r7, #20]
 80068ae:	7812      	ldrb	r2, [r2, #0]
 80068b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	607b      	str	r3, [r7, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1f1      	bne.n	80068a2 <mem_cpy+0x1a>
	}
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80068ca:	b480      	push	{r7}
 80068cc:	b087      	sub	sp, #28
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	617a      	str	r2, [r7, #20]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3b01      	subs	r3, #1
 80068ea:	607b      	str	r3, [r7, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f3      	bne.n	80068da <mem_set+0x10>
}
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006900:	b480      	push	{r7}
 8006902:	b089      	sub	sp, #36	; 0x24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	61fa      	str	r2, [r7, #28]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	61ba      	str	r2, [r7, #24]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	1acb      	subs	r3, r1, r3
 800692c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	3b01      	subs	r3, #1
 8006932:	607b      	str	r3, [r7, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <mem_cmp+0x40>
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0eb      	beq.n	8006918 <mem_cmp+0x18>

	return r;
 8006940:	697b      	ldr	r3, [r7, #20]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3724      	adds	r7, #36	; 0x24
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006958:	e002      	b.n	8006960 <chk_chr+0x12>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3301      	adds	r3, #1
 800695e:	607b      	str	r3, [r7, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d005      	beq.n	8006974 <chk_chr+0x26>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	4293      	cmp	r3, r2
 8006972:	d1f2      	bne.n	800695a <chk_chr+0xc>
	return *str;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	781b      	ldrb	r3, [r3, #0]
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	e029      	b.n	80069ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006998:	4a27      	ldr	r2, [pc, #156]	; (8006a38 <chk_lock+0xb4>)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	4413      	add	r3, r2
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d01d      	beq.n	80069e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80069a6:	4a24      	ldr	r2, [pc, #144]	; (8006a38 <chk_lock+0xb4>)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	4413      	add	r3, r2
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d116      	bne.n	80069e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80069b8:	4a1f      	ldr	r2, [pc, #124]	; (8006a38 <chk_lock+0xb4>)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	4413      	add	r3, r2
 80069c0:	3304      	adds	r3, #4
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d10c      	bne.n	80069e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80069cc:	4a1a      	ldr	r2, [pc, #104]	; (8006a38 <chk_lock+0xb4>)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	4413      	add	r3, r2
 80069d4:	3308      	adds	r3, #8
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80069dc:	429a      	cmp	r2, r3
 80069de:	d102      	bne.n	80069e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80069e0:	e007      	b.n	80069f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80069e2:	2301      	movs	r3, #1
 80069e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d9d2      	bls.n	8006998 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d109      	bne.n	8006a0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d102      	bne.n	8006a04 <chk_lock+0x80>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d101      	bne.n	8006a08 <chk_lock+0x84>
 8006a04:	2300      	movs	r3, #0
 8006a06:	e010      	b.n	8006a2a <chk_lock+0xa6>
 8006a08:	2312      	movs	r3, #18
 8006a0a:	e00e      	b.n	8006a2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d108      	bne.n	8006a24 <chk_lock+0xa0>
 8006a12:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <chk_lock+0xb4>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	4413      	add	r3, r2
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a22:	d101      	bne.n	8006a28 <chk_lock+0xa4>
 8006a24:	2310      	movs	r3, #16
 8006a26:	e000      	b.n	8006a2a <chk_lock+0xa6>
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3714      	adds	r7, #20
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	200007dc 	.word	0x200007dc

08006a3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a42:	2300      	movs	r3, #0
 8006a44:	607b      	str	r3, [r7, #4]
 8006a46:	e002      	b.n	8006a4e <enq_lock+0x12>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	607b      	str	r3, [r7, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d806      	bhi.n	8006a62 <enq_lock+0x26>
 8006a54:	4a09      	ldr	r2, [pc, #36]	; (8006a7c <enq_lock+0x40>)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	011b      	lsls	r3, r3, #4
 8006a5a:	4413      	add	r3, r2
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f2      	bne.n	8006a48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	bf14      	ite	ne
 8006a68:	2301      	movne	r3, #1
 8006a6a:	2300      	moveq	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	200007dc 	.word	0x200007dc

08006a80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
 8006a8e:	e01f      	b.n	8006ad0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006a90:	4a41      	ldr	r2, [pc, #260]	; (8006b98 <inc_lock+0x118>)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	4413      	add	r3, r2
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d113      	bne.n	8006aca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006aa2:	4a3d      	ldr	r2, [pc, #244]	; (8006b98 <inc_lock+0x118>)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3304      	adds	r3, #4
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d109      	bne.n	8006aca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006ab6:	4a38      	ldr	r2, [pc, #224]	; (8006b98 <inc_lock+0x118>)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	4413      	add	r3, r2
 8006abe:	3308      	adds	r3, #8
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d006      	beq.n	8006ad8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3301      	adds	r3, #1
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d9dc      	bls.n	8006a90 <inc_lock+0x10>
 8006ad6:	e000      	b.n	8006ada <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006ad8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d132      	bne.n	8006b46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e002      	b.n	8006aec <inc_lock+0x6c>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d806      	bhi.n	8006b00 <inc_lock+0x80>
 8006af2:	4a29      	ldr	r2, [pc, #164]	; (8006b98 <inc_lock+0x118>)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	4413      	add	r3, r2
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1f2      	bne.n	8006ae6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d101      	bne.n	8006b0a <inc_lock+0x8a>
 8006b06:	2300      	movs	r3, #0
 8006b08:	e040      	b.n	8006b8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4922      	ldr	r1, [pc, #136]	; (8006b98 <inc_lock+0x118>)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	440b      	add	r3, r1
 8006b16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	491e      	ldr	r1, [pc, #120]	; (8006b98 <inc_lock+0x118>)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	440b      	add	r3, r1
 8006b24:	3304      	adds	r3, #4
 8006b26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695a      	ldr	r2, [r3, #20]
 8006b2c:	491a      	ldr	r1, [pc, #104]	; (8006b98 <inc_lock+0x118>)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	440b      	add	r3, r1
 8006b34:	3308      	adds	r3, #8
 8006b36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006b38:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <inc_lock+0x118>)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	4413      	add	r3, r2
 8006b40:	330c      	adds	r3, #12
 8006b42:	2200      	movs	r2, #0
 8006b44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d009      	beq.n	8006b60 <inc_lock+0xe0>
 8006b4c:	4a12      	ldr	r2, [pc, #72]	; (8006b98 <inc_lock+0x118>)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	011b      	lsls	r3, r3, #4
 8006b52:	4413      	add	r3, r2
 8006b54:	330c      	adds	r3, #12
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <inc_lock+0xe0>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e015      	b.n	8006b8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d108      	bne.n	8006b78 <inc_lock+0xf8>
 8006b66:	4a0c      	ldr	r2, [pc, #48]	; (8006b98 <inc_lock+0x118>)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	4413      	add	r3, r2
 8006b6e:	330c      	adds	r3, #12
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	e001      	b.n	8006b7c <inc_lock+0xfc>
 8006b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b7c:	4906      	ldr	r1, [pc, #24]	; (8006b98 <inc_lock+0x118>)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	440b      	add	r3, r1
 8006b84:	330c      	adds	r3, #12
 8006b86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3301      	adds	r3, #1
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	200007dc 	.word	0x200007dc

08006b9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	607b      	str	r3, [r7, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d825      	bhi.n	8006bfc <dec_lock+0x60>
		n = Files[i].ctr;
 8006bb0:	4a17      	ldr	r2, [pc, #92]	; (8006c10 <dec_lock+0x74>)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	4413      	add	r3, r2
 8006bb8:	330c      	adds	r3, #12
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006bbe:	89fb      	ldrh	r3, [r7, #14]
 8006bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc4:	d101      	bne.n	8006bca <dec_lock+0x2e>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006bca:	89fb      	ldrh	r3, [r7, #14]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <dec_lock+0x3a>
 8006bd0:	89fb      	ldrh	r3, [r7, #14]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006bd6:	4a0e      	ldr	r2, [pc, #56]	; (8006c10 <dec_lock+0x74>)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	4413      	add	r3, r2
 8006bde:	330c      	adds	r3, #12
 8006be0:	89fa      	ldrh	r2, [r7, #14]
 8006be2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006be4:	89fb      	ldrh	r3, [r7, #14]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <dec_lock+0x5a>
 8006bea:	4a09      	ldr	r2, [pc, #36]	; (8006c10 <dec_lock+0x74>)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	4413      	add	r3, r2
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	737b      	strb	r3, [r7, #13]
 8006bfa:	e001      	b.n	8006c00 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006c00:	7b7b      	ldrb	r3, [r7, #13]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	200007dc 	.word	0x200007dc

08006c14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	60fb      	str	r3, [r7, #12]
 8006c20:	e010      	b.n	8006c44 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006c22:	4a0d      	ldr	r2, [pc, #52]	; (8006c58 <clear_lock+0x44>)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	4413      	add	r3, r2
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d105      	bne.n	8006c3e <clear_lock+0x2a>
 8006c32:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <clear_lock+0x44>)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	4413      	add	r3, r2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3301      	adds	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d9eb      	bls.n	8006c22 <clear_lock+0xe>
	}
}
 8006c4a:	bf00      	nop
 8006c4c:	bf00      	nop
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	200007dc 	.word	0x200007dc

08006c5c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	78db      	ldrb	r3, [r3, #3]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d034      	beq.n	8006cda <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	7858      	ldrb	r0, [r3, #1]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c80:	2301      	movs	r3, #1
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	f7ff fd40 	bl	8006708 <disk_write>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	73fb      	strb	r3, [r7, #15]
 8006c92:	e022      	b.n	8006cda <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	1ad2      	subs	r2, r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d217      	bcs.n	8006cda <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	789b      	ldrb	r3, [r3, #2]
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	e010      	b.n	8006cd4 <sync_window+0x78>
					wsect += fs->fsize;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4413      	add	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	7858      	ldrb	r0, [r3, #1]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	f7ff fd1d 	bl	8006708 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d8eb      	bhi.n	8006cb2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d01b      	beq.n	8006d34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff ffad 	bl	8006c5c <sync_window>
 8006d02:	4603      	mov	r3, r0
 8006d04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d113      	bne.n	8006d34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	7858      	ldrb	r0, [r3, #1]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d16:	2301      	movs	r3, #1
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	f7ff fcd5 	bl	80066c8 <disk_read>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d004      	beq.n	8006d2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006d24:	f04f 33ff 	mov.w	r3, #4294967295
 8006d28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7ff ff87 	bl	8006c5c <sync_window>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d158      	bne.n	8006e0a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d148      	bne.n	8006df2 <sync_fs+0xb2>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	791b      	ldrb	r3, [r3, #4]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d144      	bne.n	8006df2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3330      	adds	r3, #48	; 0x30
 8006d6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d70:	2100      	movs	r1, #0
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fda9 	bl	80068ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3330      	adds	r3, #48	; 0x30
 8006d7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d80:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fd38 	bl	80067fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3330      	adds	r3, #48	; 0x30
 8006d8e:	4921      	ldr	r1, [pc, #132]	; (8006e14 <sync_fs+0xd4>)
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff fd4d 	bl	8006830 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3330      	adds	r3, #48	; 0x30
 8006d9a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006d9e:	491e      	ldr	r1, [pc, #120]	; (8006e18 <sync_fs+0xd8>)
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff fd45 	bl	8006830 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3330      	adds	r3, #48	; 0x30
 8006daa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	4619      	mov	r1, r3
 8006db4:	4610      	mov	r0, r2
 8006db6:	f7ff fd3b 	bl	8006830 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3330      	adds	r3, #48	; 0x30
 8006dbe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f7ff fd31 	bl	8006830 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	7858      	ldrb	r0, [r3, #1]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de6:	2301      	movs	r3, #1
 8006de8:	f7ff fc8e 	bl	8006708 <disk_write>
			fs->fsi_flag = 0;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	2200      	movs	r2, #0
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fca4 	bl	8006748 <disk_ioctl>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <sync_fs+0xca>
 8006e06:	2301      	movs	r3, #1
 8006e08:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	41615252 	.word	0x41615252
 8006e18:	61417272 	.word	0x61417272

08006e1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	3b02      	subs	r3, #2
 8006e2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	3b02      	subs	r3, #2
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d301      	bcc.n	8006e3c <clust2sect+0x20>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e008      	b.n	8006e4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	895b      	ldrh	r3, [r3, #10]
 8006e40:	461a      	mov	r2, r3
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	fb03 f202 	mul.w	r2, r3, r2
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	4413      	add	r3, r2
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b086      	sub	sp, #24
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d904      	bls.n	8006e7a <get_fat+0x20>
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d302      	bcc.n	8006e80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	e08f      	b.n	8006fa0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006e80:	f04f 33ff 	mov.w	r3, #4294967295
 8006e84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d062      	beq.n	8006f54 <get_fat+0xfa>
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	dc7c      	bgt.n	8006f8c <get_fat+0x132>
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d002      	beq.n	8006e9c <get_fat+0x42>
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d042      	beq.n	8006f20 <get_fat+0xc6>
 8006e9a:	e077      	b.n	8006f8c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	085b      	lsrs	r3, r3, #1
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6a1a      	ldr	r2, [r3, #32]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	0a5b      	lsrs	r3, r3, #9
 8006eb2:	4413      	add	r3, r2
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6938      	ldr	r0, [r7, #16]
 8006eb8:	f7ff ff14 	bl	8006ce4 <move_window>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d167      	bne.n	8006f92 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	60fa      	str	r2, [r7, #12]
 8006ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ed4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6a1a      	ldr	r2, [r3, #32]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	0a5b      	lsrs	r3, r3, #9
 8006ede:	4413      	add	r3, r2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6938      	ldr	r0, [r7, #16]
 8006ee4:	f7ff fefe 	bl	8006ce4 <move_window>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d153      	bne.n	8006f96 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	461a      	mov	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <get_fat+0xbc>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	091b      	lsrs	r3, r3, #4
 8006f14:	e002      	b.n	8006f1c <get_fat+0xc2>
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f1c:	617b      	str	r3, [r7, #20]
			break;
 8006f1e:	e03f      	b.n	8006fa0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	6a1a      	ldr	r2, [r3, #32]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	0a1b      	lsrs	r3, r3, #8
 8006f28:	4413      	add	r3, r2
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6938      	ldr	r0, [r7, #16]
 8006f2e:	f7ff fed9 	bl	8006ce4 <move_window>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d130      	bne.n	8006f9a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006f46:	4413      	add	r3, r2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fc1b 	bl	8006784 <ld_word>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	617b      	str	r3, [r7, #20]
			break;
 8006f52:	e025      	b.n	8006fa0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	09db      	lsrs	r3, r3, #7
 8006f5c:	4413      	add	r3, r2
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6938      	ldr	r0, [r7, #16]
 8006f62:	f7ff febf 	bl	8006ce4 <move_window>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d118      	bne.n	8006f9e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006f7a:	4413      	add	r3, r2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fc19 	bl	80067b4 <ld_dword>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006f88:	617b      	str	r3, [r7, #20]
			break;
 8006f8a:	e009      	b.n	8006fa0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	e006      	b.n	8006fa0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f92:	bf00      	nop
 8006f94:	e004      	b.n	8006fa0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f96:	bf00      	nop
 8006f98:	e002      	b.n	8006fa0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006f9a:	bf00      	nop
 8006f9c:	e000      	b.n	8006fa0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006f9e:	bf00      	nop
		}
	}

	return val;
 8006fa0:	697b      	ldr	r3, [r7, #20]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006faa:	b590      	push	{r4, r7, lr}
 8006fac:	b089      	sub	sp, #36	; 0x24
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	f240 80d2 	bls.w	8007166 <put_fat+0x1bc>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	f080 80cc 	bcs.w	8007166 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	f000 8096 	beq.w	8007104 <put_fat+0x15a>
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	f300 80cd 	bgt.w	8007178 <put_fat+0x1ce>
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d002      	beq.n	8006fe8 <put_fat+0x3e>
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d06e      	beq.n	80070c4 <put_fat+0x11a>
 8006fe6:	e0c7      	b.n	8007178 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	085b      	lsrs	r3, r3, #1
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1a      	ldr	r2, [r3, #32]
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	0a5b      	lsrs	r3, r3, #9
 8006ffe:	4413      	add	r3, r2
 8007000:	4619      	mov	r1, r3
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7ff fe6e 	bl	8006ce4 <move_window>
 8007008:	4603      	mov	r3, r0
 800700a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800700c:	7ffb      	ldrb	r3, [r7, #31]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 80ab 	bne.w	800716a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	1c59      	adds	r1, r3, #1
 800701e:	61b9      	str	r1, [r7, #24]
 8007020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007024:	4413      	add	r3, r2
 8007026:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00d      	beq.n	800704e <put_fat+0xa4>
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b25b      	sxtb	r3, r3
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	b25a      	sxtb	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	b25b      	sxtb	r3, r3
 8007046:	4313      	orrs	r3, r2
 8007048:	b25b      	sxtb	r3, r3
 800704a:	b2db      	uxtb	r3, r3
 800704c:	e001      	b.n	8007052 <put_fat+0xa8>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2201      	movs	r2, #1
 800705a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6a1a      	ldr	r2, [r3, #32]
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	0a5b      	lsrs	r3, r3, #9
 8007064:	4413      	add	r3, r2
 8007066:	4619      	mov	r1, r3
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f7ff fe3b 	bl	8006ce4 <move_window>
 800706e:	4603      	mov	r3, r0
 8007070:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007072:	7ffb      	ldrb	r3, [r7, #31]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d17a      	bne.n	800716e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007084:	4413      	add	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <put_fat+0xf0>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	091b      	lsrs	r3, r3, #4
 8007096:	b2db      	uxtb	r3, r3
 8007098:	e00e      	b.n	80070b8 <put_fat+0x10e>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b25b      	sxtb	r3, r3
 80070a0:	f023 030f 	bic.w	r3, r3, #15
 80070a4:	b25a      	sxtb	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	0a1b      	lsrs	r3, r3, #8
 80070aa:	b25b      	sxtb	r3, r3
 80070ac:	f003 030f 	and.w	r3, r3, #15
 80070b0:	b25b      	sxtb	r3, r3
 80070b2:	4313      	orrs	r3, r2
 80070b4:	b25b      	sxtb	r3, r3
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2201      	movs	r2, #1
 80070c0:	70da      	strb	r2, [r3, #3]
			break;
 80070c2:	e059      	b.n	8007178 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6a1a      	ldr	r2, [r3, #32]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	4413      	add	r3, r2
 80070ce:	4619      	mov	r1, r3
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f7ff fe07 	bl	8006ce4 <move_window>
 80070d6:	4603      	mov	r3, r0
 80070d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070da:	7ffb      	ldrb	r3, [r7, #31]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d148      	bne.n	8007172 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80070ee:	4413      	add	r3, r2
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	b292      	uxth	r2, r2
 80070f4:	4611      	mov	r1, r2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff fb7f 	bl	80067fa <st_word>
			fs->wflag = 1;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	70da      	strb	r2, [r3, #3]
			break;
 8007102:	e039      	b.n	8007178 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6a1a      	ldr	r2, [r3, #32]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	09db      	lsrs	r3, r3, #7
 800710c:	4413      	add	r3, r2
 800710e:	4619      	mov	r1, r3
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f7ff fde7 	bl	8006ce4 <move_window>
 8007116:	4603      	mov	r3, r0
 8007118:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800711a:	7ffb      	ldrb	r3, [r7, #31]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d12a      	bne.n	8007176 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007134:	4413      	add	r3, r2
 8007136:	4618      	mov	r0, r3
 8007138:	f7ff fb3c 	bl	80067b4 <ld_dword>
 800713c:	4603      	mov	r3, r0
 800713e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007142:	4323      	orrs	r3, r4
 8007144:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007154:	4413      	add	r3, r2
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff fb69 	bl	8006830 <st_dword>
			fs->wflag = 1;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	70da      	strb	r2, [r3, #3]
			break;
 8007164:	e008      	b.n	8007178 <put_fat+0x1ce>
		}
	}
 8007166:	bf00      	nop
 8007168:	e006      	b.n	8007178 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800716a:	bf00      	nop
 800716c:	e004      	b.n	8007178 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800716e:	bf00      	nop
 8007170:	e002      	b.n	8007178 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007172:	bf00      	nop
 8007174:	e000      	b.n	8007178 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007176:	bf00      	nop
	return res;
 8007178:	7ffb      	ldrb	r3, [r7, #31]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3724      	adds	r7, #36	; 0x24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd90      	pop	{r4, r7, pc}

08007182 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b088      	sub	sp, #32
 8007186:	af00      	add	r7, sp, #0
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d904      	bls.n	80071a8 <remove_chain+0x26>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d301      	bcc.n	80071ac <remove_chain+0x2a>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e04b      	b.n	8007244 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00c      	beq.n	80071cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80071b2:	f04f 32ff 	mov.w	r2, #4294967295
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	69b8      	ldr	r0, [r7, #24]
 80071ba:	f7ff fef6 	bl	8006faa <put_fat>
 80071be:	4603      	mov	r3, r0
 80071c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80071c2:	7ffb      	ldrb	r3, [r7, #31]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <remove_chain+0x4a>
 80071c8:	7ffb      	ldrb	r3, [r7, #31]
 80071ca:	e03b      	b.n	8007244 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fe43 	bl	8006e5a <get_fat>
 80071d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d031      	beq.n	8007240 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <remove_chain+0x64>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e02e      	b.n	8007244 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d101      	bne.n	80071f2 <remove_chain+0x70>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e028      	b.n	8007244 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80071f2:	2200      	movs	r2, #0
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	69b8      	ldr	r0, [r7, #24]
 80071f8:	f7ff fed7 	bl	8006faa <put_fat>
 80071fc:	4603      	mov	r3, r0
 80071fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007200:	7ffb      	ldrb	r3, [r7, #31]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <remove_chain+0x88>
 8007206:	7ffb      	ldrb	r3, [r7, #31]
 8007208:	e01c      	b.n	8007244 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	691a      	ldr	r2, [r3, #16]
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	3b02      	subs	r3, #2
 8007214:	429a      	cmp	r2, r3
 8007216:	d20b      	bcs.n	8007230 <remove_chain+0xae>
			fs->free_clst++;
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	791b      	ldrb	r3, [r3, #4]
 8007226:	f043 0301 	orr.w	r3, r3, #1
 800722a:	b2da      	uxtb	r2, r3
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	429a      	cmp	r2, r3
 800723c:	d3c6      	bcc.n	80071cc <remove_chain+0x4a>
 800723e:	e000      	b.n	8007242 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007240:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3720      	adds	r7, #32
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10d      	bne.n	800727e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <create_chain+0x2c>
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	429a      	cmp	r2, r3
 8007276:	d31b      	bcc.n	80072b0 <create_chain+0x64>
 8007278:	2301      	movs	r3, #1
 800727a:	61bb      	str	r3, [r7, #24]
 800727c:	e018      	b.n	80072b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff fdea 	bl	8006e5a <get_fat>
 8007286:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d801      	bhi.n	8007292 <create_chain+0x46>
 800728e:	2301      	movs	r3, #1
 8007290:	e070      	b.n	8007374 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d101      	bne.n	800729e <create_chain+0x52>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	e06a      	b.n	8007374 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d201      	bcs.n	80072ac <create_chain+0x60>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	e063      	b.n	8007374 <create_chain+0x128>
		scl = clst;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	3301      	adds	r3, #1
 80072b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d307      	bcc.n	80072d4 <create_chain+0x88>
				ncl = 2;
 80072c4:	2302      	movs	r3, #2
 80072c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d901      	bls.n	80072d4 <create_chain+0x88>
 80072d0:	2300      	movs	r3, #0
 80072d2:	e04f      	b.n	8007374 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80072d4:	69f9      	ldr	r1, [r7, #28]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fdbf 	bl	8006e5a <get_fat>
 80072dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00e      	beq.n	8007302 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d003      	beq.n	80072f2 <create_chain+0xa6>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f0:	d101      	bne.n	80072f6 <create_chain+0xaa>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	e03e      	b.n	8007374 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d1da      	bne.n	80072b4 <create_chain+0x68>
 80072fe:	2300      	movs	r3, #0
 8007300:	e038      	b.n	8007374 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007302:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007304:	f04f 32ff 	mov.w	r2, #4294967295
 8007308:	69f9      	ldr	r1, [r7, #28]
 800730a:	6938      	ldr	r0, [r7, #16]
 800730c:	f7ff fe4d 	bl	8006faa <put_fat>
 8007310:	4603      	mov	r3, r0
 8007312:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d109      	bne.n	800732e <create_chain+0xe2>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d006      	beq.n	800732e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6938      	ldr	r0, [r7, #16]
 8007326:	f7ff fe40 	bl	8006faa <put_fat>
 800732a:	4603      	mov	r3, r0
 800732c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d116      	bne.n	8007362 <create_chain+0x116>
		fs->last_clst = ncl;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	69fa      	ldr	r2, [r7, #28]
 8007338:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	3b02      	subs	r3, #2
 8007344:	429a      	cmp	r2, r3
 8007346:	d804      	bhi.n	8007352 <create_chain+0x106>
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	1e5a      	subs	r2, r3, #1
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	791b      	ldrb	r3, [r3, #4]
 8007356:	f043 0301 	orr.w	r3, r3, #1
 800735a:	b2da      	uxtb	r2, r3
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	711a      	strb	r2, [r3, #4]
 8007360:	e007      	b.n	8007372 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d102      	bne.n	800736e <create_chain+0x122>
 8007368:	f04f 33ff 	mov.w	r3, #4294967295
 800736c:	e000      	b.n	8007370 <create_chain+0x124>
 800736e:	2301      	movs	r3, #1
 8007370:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007372:	69fb      	ldr	r3, [r7, #28]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	3304      	adds	r3, #4
 8007392:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	0a5b      	lsrs	r3, r3, #9
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	8952      	ldrh	r2, [r2, #10]
 800739c:	fbb3 f3f2 	udiv	r3, r3, r2
 80073a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1d1a      	adds	r2, r3, #4
 80073a6:	613a      	str	r2, [r7, #16]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <clmt_clust+0x3a>
 80073b2:	2300      	movs	r3, #0
 80073b4:	e010      	b.n	80073d8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d307      	bcc.n	80073ce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	3304      	adds	r3, #4
 80073ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80073cc:	e7e9      	b.n	80073a2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80073ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	4413      	add	r3, r2
}
 80073d8:	4618      	mov	r0, r3
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073fa:	d204      	bcs.n	8007406 <dir_sdi+0x22>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007406:	2302      	movs	r3, #2
 8007408:	e063      	b.n	80074d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d106      	bne.n	800742a <dir_sdi+0x46>
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d902      	bls.n	800742a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10c      	bne.n	800744a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	8912      	ldrh	r2, [r2, #8]
 8007438:	4293      	cmp	r3, r2
 800743a:	d301      	bcc.n	8007440 <dir_sdi+0x5c>
 800743c:	2302      	movs	r3, #2
 800743e:	e048      	b.n	80074d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	61da      	str	r2, [r3, #28]
 8007448:	e029      	b.n	800749e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	895b      	ldrh	r3, [r3, #10]
 800744e:	025b      	lsls	r3, r3, #9
 8007450:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007452:	e019      	b.n	8007488 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6979      	ldr	r1, [r7, #20]
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff fcfe 	bl	8006e5a <get_fat>
 800745e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007466:	d101      	bne.n	800746c <dir_sdi+0x88>
 8007468:	2301      	movs	r3, #1
 800746a:	e032      	b.n	80074d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d904      	bls.n	800747c <dir_sdi+0x98>
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	429a      	cmp	r2, r3
 800747a:	d301      	bcc.n	8007480 <dir_sdi+0x9c>
 800747c:	2302      	movs	r3, #2
 800747e:	e028      	b.n	80074d2 <dir_sdi+0xee>
			ofs -= csz;
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	429a      	cmp	r2, r3
 800748e:	d2e1      	bcs.n	8007454 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007490:	6979      	ldr	r1, [r7, #20]
 8007492:	6938      	ldr	r0, [r7, #16]
 8007494:	f7ff fcc2 	bl	8006e1c <clust2sect>
 8007498:	4602      	mov	r2, r0
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <dir_sdi+0xcc>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e010      	b.n	80074d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	0a5b      	lsrs	r3, r3, #9
 80074b8:	441a      	add	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ca:	441a      	add	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b086      	sub	sp, #24
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	3320      	adds	r3, #32
 80074f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <dir_next+0x28>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007500:	d301      	bcc.n	8007506 <dir_next+0x2c>
 8007502:	2304      	movs	r3, #4
 8007504:	e0aa      	b.n	800765c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750c:	2b00      	cmp	r3, #0
 800750e:	f040 8098 	bne.w	8007642 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10b      	bne.n	800753c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	095b      	lsrs	r3, r3, #5
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	8912      	ldrh	r2, [r2, #8]
 800752c:	4293      	cmp	r3, r2
 800752e:	f0c0 8088 	bcc.w	8007642 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	61da      	str	r2, [r3, #28]
 8007538:	2304      	movs	r3, #4
 800753a:	e08f      	b.n	800765c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	0a5b      	lsrs	r3, r3, #9
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	8952      	ldrh	r2, [r2, #10]
 8007544:	3a01      	subs	r2, #1
 8007546:	4013      	ands	r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d17a      	bne.n	8007642 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	4619      	mov	r1, r3
 8007554:	4610      	mov	r0, r2
 8007556:	f7ff fc80 	bl	8006e5a <get_fat>
 800755a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d801      	bhi.n	8007566 <dir_next+0x8c>
 8007562:	2302      	movs	r3, #2
 8007564:	e07a      	b.n	800765c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756c:	d101      	bne.n	8007572 <dir_next+0x98>
 800756e:	2301      	movs	r3, #1
 8007570:	e074      	b.n	800765c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	429a      	cmp	r2, r3
 800757a:	d358      	bcc.n	800762e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d104      	bne.n	800758c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	61da      	str	r2, [r3, #28]
 8007588:	2304      	movs	r3, #4
 800758a:	e067      	b.n	800765c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	4619      	mov	r1, r3
 8007594:	4610      	mov	r0, r2
 8007596:	f7ff fe59 	bl	800724c <create_chain>
 800759a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <dir_next+0xcc>
 80075a2:	2307      	movs	r3, #7
 80075a4:	e05a      	b.n	800765c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <dir_next+0xd6>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e055      	b.n	800765c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b6:	d101      	bne.n	80075bc <dir_next+0xe2>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e04f      	b.n	800765c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff fb4d 	bl	8006c5c <sync_window>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <dir_next+0xf2>
 80075c8:	2301      	movs	r3, #1
 80075ca:	e047      	b.n	800765c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3330      	adds	r3, #48	; 0x30
 80075d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff f977 	bl	80068ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80075dc:	2300      	movs	r3, #0
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	6979      	ldr	r1, [r7, #20]
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f7ff fc1a 	bl	8006e1c <clust2sect>
 80075e8:	4602      	mov	r2, r0
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80075ee:	e012      	b.n	8007616 <dir_next+0x13c>
						fs->wflag = 1;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fb30 	bl	8006c5c <sync_window>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <dir_next+0x12c>
 8007602:	2301      	movs	r3, #1
 8007604:	e02a      	b.n	800765c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	3301      	adds	r3, #1
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	62da      	str	r2, [r3, #44]	; 0x2c
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	895b      	ldrh	r3, [r3, #10]
 800761a:	461a      	mov	r2, r3
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	4293      	cmp	r3, r2
 8007620:	d3e6      	bcc.n	80075f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007634:	6979      	ldr	r1, [r7, #20]
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7ff fbf0 	bl	8006e1c <clust2sect>
 800763c:	4602      	mov	r2, r0
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007654:	441a      	add	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007674:	2100      	movs	r1, #0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff feb4 	bl	80073e4 <dir_sdi>
 800767c:	4603      	mov	r3, r0
 800767e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d12b      	bne.n	80076de <dir_alloc+0x7a>
		n = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	4619      	mov	r1, r3
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7ff fb27 	bl	8006ce4 <move_window>
 8007696:	4603      	mov	r3, r0
 8007698:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800769a:	7dfb      	ldrb	r3, [r7, #23]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d11d      	bne.n	80076dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2be5      	cmp	r3, #229	; 0xe5
 80076a8:	d004      	beq.n	80076b4 <dir_alloc+0x50>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d107      	bne.n	80076c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	3301      	adds	r3, #1
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	693a      	ldr	r2, [r7, #16]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d102      	bne.n	80076c8 <dir_alloc+0x64>
 80076c2:	e00c      	b.n	80076de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80076c4:	2300      	movs	r3, #0
 80076c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80076c8:	2101      	movs	r1, #1
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff ff05 	bl	80074da <dir_next>
 80076d0:	4603      	mov	r3, r0
 80076d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d0d7      	beq.n	800768a <dir_alloc+0x26>
 80076da:	e000      	b.n	80076de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80076dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	2b04      	cmp	r3, #4
 80076e2:	d101      	bne.n	80076e8 <dir_alloc+0x84>
 80076e4:	2307      	movs	r3, #7
 80076e6:	75fb      	strb	r3, [r7, #23]
	return res;
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	331a      	adds	r3, #26
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff f83f 	bl	8006784 <ld_word>
 8007706:	4603      	mov	r3, r0
 8007708:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d109      	bne.n	8007726 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	3314      	adds	r3, #20
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff f834 	bl	8006784 <ld_word>
 800771c:	4603      	mov	r3, r0
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	4313      	orrs	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007726:	68fb      	ldr	r3, [r7, #12]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	331a      	adds	r3, #26
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	b292      	uxth	r2, r2
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff f857 	bl	80067fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b03      	cmp	r3, #3
 8007752:	d109      	bne.n	8007768 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f103 0214 	add.w	r2, r3, #20
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	b29b      	uxth	r3, r3
 8007760:	4619      	mov	r1, r3
 8007762:	4610      	mov	r0, r2
 8007764:	f7ff f849 	bl	80067fa <st_word>
	}
}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800777e:	2100      	movs	r1, #0
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff fe2f 	bl	80073e4 <dir_sdi>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800778a:	7dfb      	ldrb	r3, [r7, #23]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <dir_find+0x24>
 8007790:	7dfb      	ldrb	r3, [r7, #23]
 8007792:	e03e      	b.n	8007812 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	4619      	mov	r1, r3
 800779a:	6938      	ldr	r0, [r7, #16]
 800779c:	f7ff faa2 	bl	8006ce4 <move_window>
 80077a0:	4603      	mov	r3, r0
 80077a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d12f      	bne.n	800780a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <dir_find+0x4e>
 80077b8:	2304      	movs	r3, #4
 80077ba:	75fb      	strb	r3, [r7, #23]
 80077bc:	e028      	b.n	8007810 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	330b      	adds	r3, #11
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	330b      	adds	r3, #11
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	f003 0308 	and.w	r3, r3, #8
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <dir_find+0x86>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a18      	ldr	r0, [r3, #32]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3324      	adds	r3, #36	; 0x24
 80077e8:	220b      	movs	r2, #11
 80077ea:	4619      	mov	r1, r3
 80077ec:	f7ff f888 	bl	8006900 <mem_cmp>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00b      	beq.n	800780e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80077f6:	2100      	movs	r1, #0
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff fe6e 	bl	80074da <dir_next>
 80077fe:	4603      	mov	r3, r0
 8007800:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0c5      	beq.n	8007794 <dir_find+0x24>
 8007808:	e002      	b.n	8007810 <dir_find+0xa0>
		if (res != FR_OK) break;
 800780a:	bf00      	nop
 800780c:	e000      	b.n	8007810 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800780e:	bf00      	nop

	return res;
 8007810:	7dfb      	ldrb	r3, [r7, #23]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007828:	2101      	movs	r1, #1
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff ff1a 	bl	8007664 <dir_alloc>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d11c      	bne.n	8007874 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	4619      	mov	r1, r3
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f7ff fa4f 	bl	8006ce4 <move_window>
 8007846:	4603      	mov	r3, r0
 8007848:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d111      	bne.n	8007874 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	2220      	movs	r2, #32
 8007856:	2100      	movs	r1, #0
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff f836 	bl	80068ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a18      	ldr	r0, [r3, #32]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3324      	adds	r3, #36	; 0x24
 8007866:	220b      	movs	r2, #11
 8007868:	4619      	mov	r1, r3
 800786a:	f7ff f80d 	bl	8006888 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2201      	movs	r2, #1
 8007872:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b088      	sub	sp, #32
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3324      	adds	r3, #36	; 0x24
 8007894:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007896:	220b      	movs	r2, #11
 8007898:	2120      	movs	r1, #32
 800789a:	68b8      	ldr	r0, [r7, #8]
 800789c:	f7ff f815 	bl	80068ca <mem_set>
	si = i = 0; ni = 8;
 80078a0:	2300      	movs	r3, #0
 80078a2:	613b      	str	r3, [r7, #16]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	2308      	movs	r3, #8
 80078aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	61fa      	str	r2, [r7, #28]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80078ba:	7efb      	ldrb	r3, [r7, #27]
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d94e      	bls.n	800795e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80078c0:	7efb      	ldrb	r3, [r7, #27]
 80078c2:	2b2f      	cmp	r3, #47	; 0x2f
 80078c4:	d006      	beq.n	80078d4 <create_name+0x54>
 80078c6:	7efb      	ldrb	r3, [r7, #27]
 80078c8:	2b5c      	cmp	r3, #92	; 0x5c
 80078ca:	d110      	bne.n	80078ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80078cc:	e002      	b.n	80078d4 <create_name+0x54>
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	3301      	adds	r3, #1
 80078d2:	61fb      	str	r3, [r7, #28]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4413      	add	r3, r2
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b2f      	cmp	r3, #47	; 0x2f
 80078de:	d0f6      	beq.n	80078ce <create_name+0x4e>
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	4413      	add	r3, r2
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b5c      	cmp	r3, #92	; 0x5c
 80078ea:	d0f0      	beq.n	80078ce <create_name+0x4e>
			break;
 80078ec:	e038      	b.n	8007960 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80078ee:	7efb      	ldrb	r3, [r7, #27]
 80078f0:	2b2e      	cmp	r3, #46	; 0x2e
 80078f2:	d003      	beq.n	80078fc <create_name+0x7c>
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d30c      	bcc.n	8007916 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2b0b      	cmp	r3, #11
 8007900:	d002      	beq.n	8007908 <create_name+0x88>
 8007902:	7efb      	ldrb	r3, [r7, #27]
 8007904:	2b2e      	cmp	r3, #46	; 0x2e
 8007906:	d001      	beq.n	800790c <create_name+0x8c>
 8007908:	2306      	movs	r3, #6
 800790a:	e044      	b.n	8007996 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800790c:	2308      	movs	r3, #8
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	230b      	movs	r3, #11
 8007912:	617b      	str	r3, [r7, #20]
			continue;
 8007914:	e022      	b.n	800795c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007916:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800791a:	2b00      	cmp	r3, #0
 800791c:	da04      	bge.n	8007928 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800791e:	7efb      	ldrb	r3, [r7, #27]
 8007920:	3b80      	subs	r3, #128	; 0x80
 8007922:	4a1f      	ldr	r2, [pc, #124]	; (80079a0 <create_name+0x120>)
 8007924:	5cd3      	ldrb	r3, [r2, r3]
 8007926:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007928:	7efb      	ldrb	r3, [r7, #27]
 800792a:	4619      	mov	r1, r3
 800792c:	481d      	ldr	r0, [pc, #116]	; (80079a4 <create_name+0x124>)
 800792e:	f7ff f80e 	bl	800694e <chk_chr>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <create_name+0xbc>
 8007938:	2306      	movs	r3, #6
 800793a:	e02c      	b.n	8007996 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800793c:	7efb      	ldrb	r3, [r7, #27]
 800793e:	2b60      	cmp	r3, #96	; 0x60
 8007940:	d905      	bls.n	800794e <create_name+0xce>
 8007942:	7efb      	ldrb	r3, [r7, #27]
 8007944:	2b7a      	cmp	r3, #122	; 0x7a
 8007946:	d802      	bhi.n	800794e <create_name+0xce>
 8007948:	7efb      	ldrb	r3, [r7, #27]
 800794a:	3b20      	subs	r3, #32
 800794c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	613a      	str	r2, [r7, #16]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	4413      	add	r3, r2
 8007958:	7efa      	ldrb	r2, [r7, #27]
 800795a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800795c:	e7a6      	b.n	80078ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800795e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	441a      	add	r2, r3
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <create_name+0xf4>
 8007970:	2306      	movs	r3, #6
 8007972:	e010      	b.n	8007996 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	2be5      	cmp	r3, #229	; 0xe5
 800797a:	d102      	bne.n	8007982 <create_name+0x102>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2205      	movs	r2, #5
 8007980:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007982:	7efb      	ldrb	r3, [r7, #27]
 8007984:	2b20      	cmp	r3, #32
 8007986:	d801      	bhi.n	800798c <create_name+0x10c>
 8007988:	2204      	movs	r2, #4
 800798a:	e000      	b.n	800798e <create_name+0x10e>
 800798c:	2200      	movs	r2, #0
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	330b      	adds	r3, #11
 8007992:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007994:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007996:	4618      	mov	r0, r3
 8007998:	3720      	adds	r7, #32
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	08009540 	.word	0x08009540
 80079a4:	080094c8 	.word	0x080094c8

080079a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80079bc:	e002      	b.n	80079c4 <follow_path+0x1c>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	3301      	adds	r3, #1
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b2f      	cmp	r3, #47	; 0x2f
 80079ca:	d0f8      	beq.n	80079be <follow_path+0x16>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b5c      	cmp	r3, #92	; 0x5c
 80079d2:	d0f4      	beq.n	80079be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2200      	movs	r2, #0
 80079d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b1f      	cmp	r3, #31
 80079e0:	d80a      	bhi.n	80079f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2280      	movs	r2, #128	; 0x80
 80079e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80079ea:	2100      	movs	r1, #0
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7ff fcf9 	bl	80073e4 <dir_sdi>
 80079f2:	4603      	mov	r3, r0
 80079f4:	75fb      	strb	r3, [r7, #23]
 80079f6:	e043      	b.n	8007a80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80079f8:	463b      	mov	r3, r7
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff ff3f 	bl	8007880 <create_name>
 8007a02:	4603      	mov	r3, r0
 8007a04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d134      	bne.n	8007a76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff feaf 	bl	8007770 <dir_find>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d00a      	beq.n	8007a3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d127      	bne.n	8007a7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d122      	bne.n	8007a7a <follow_path+0xd2>
 8007a34:	2305      	movs	r3, #5
 8007a36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007a38:	e01f      	b.n	8007a7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d11c      	bne.n	8007a7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	799b      	ldrb	r3, [r3, #6]
 8007a48:	f003 0310 	and.w	r3, r3, #16
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007a50:	2305      	movs	r3, #5
 8007a52:	75fb      	strb	r3, [r7, #23]
 8007a54:	e014      	b.n	8007a80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	695b      	ldr	r3, [r3, #20]
 8007a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a64:	4413      	add	r3, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f7ff fe42 	bl	80076f2 <ld_clust>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a74:	e7c0      	b.n	80079f8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007a76:	bf00      	nop
 8007a78:	e002      	b.n	8007a80 <follow_path+0xd8>
				break;
 8007a7a:	bf00      	nop
 8007a7c:	e000      	b.n	8007a80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a7e:	bf00      	nop
			}
		}
	}

	return res;
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b087      	sub	sp, #28
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295
 8007a96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d031      	beq.n	8007b04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	e002      	b.n	8007aae <get_ldnumber+0x24>
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	617b      	str	r3, [r7, #20]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d903      	bls.n	8007abe <get_ldnumber+0x34>
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	2b3a      	cmp	r3, #58	; 0x3a
 8007abc:	d1f4      	bne.n	8007aa8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b3a      	cmp	r3, #58	; 0x3a
 8007ac4:	d11c      	bne.n	8007b00 <get_ldnumber+0x76>
			tp = *path;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	60fa      	str	r2, [r7, #12]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	3b30      	subs	r3, #48	; 0x30
 8007ad6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b09      	cmp	r3, #9
 8007adc:	d80e      	bhi.n	8007afc <get_ldnumber+0x72>
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d10a      	bne.n	8007afc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d107      	bne.n	8007afc <get_ldnumber+0x72>
					vol = (int)i;
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	3301      	adds	r3, #1
 8007af4:	617b      	str	r3, [r7, #20]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	e002      	b.n	8007b06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b00:	2300      	movs	r3, #0
 8007b02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b04:	693b      	ldr	r3, [r7, #16]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	70da      	strb	r2, [r3, #3]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f7ff f8d8 	bl	8006ce4 <move_window>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <check_fs+0x2a>
 8007b3a:	2304      	movs	r3, #4
 8007b3c:	e038      	b.n	8007bb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3330      	adds	r3, #48	; 0x30
 8007b42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fe1c 	bl	8006784 <ld_word>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	461a      	mov	r2, r3
 8007b50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d001      	beq.n	8007b5c <check_fs+0x48>
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e029      	b.n	8007bb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b62:	2be9      	cmp	r3, #233	; 0xe9
 8007b64:	d009      	beq.n	8007b7a <check_fs+0x66>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b6c:	2beb      	cmp	r3, #235	; 0xeb
 8007b6e:	d11e      	bne.n	8007bae <check_fs+0x9a>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007b76:	2b90      	cmp	r3, #144	; 0x90
 8007b78:	d119      	bne.n	8007bae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3330      	adds	r3, #48	; 0x30
 8007b7e:	3336      	adds	r3, #54	; 0x36
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe fe17 	bl	80067b4 <ld_dword>
 8007b86:	4603      	mov	r3, r0
 8007b88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007b8c:	4a0a      	ldr	r2, [pc, #40]	; (8007bb8 <check_fs+0xa4>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d101      	bne.n	8007b96 <check_fs+0x82>
 8007b92:	2300      	movs	r3, #0
 8007b94:	e00c      	b.n	8007bb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3330      	adds	r3, #48	; 0x30
 8007b9a:	3352      	adds	r3, #82	; 0x52
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe fe09 	bl	80067b4 <ld_dword>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	4a05      	ldr	r2, [pc, #20]	; (8007bbc <check_fs+0xa8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d101      	bne.n	8007bae <check_fs+0x9a>
 8007baa:	2300      	movs	r3, #0
 8007bac:	e000      	b.n	8007bb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007bae:	2302      	movs	r3, #2
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	00544146 	.word	0x00544146
 8007bbc:	33544146 	.word	0x33544146

08007bc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b096      	sub	sp, #88	; 0x58
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f7ff ff58 	bl	8007a8a <get_ldnumber>
 8007bda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	da01      	bge.n	8007be6 <find_volume+0x26>
 8007be2:	230b      	movs	r3, #11
 8007be4:	e22d      	b.n	8008042 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007be6:	4aa1      	ldr	r2, [pc, #644]	; (8007e6c <find_volume+0x2ac>)
 8007be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <find_volume+0x3a>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	e223      	b.n	8008042 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	f023 0301 	bic.w	r3, r3, #1
 8007c06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01a      	beq.n	8007c46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	785b      	ldrb	r3, [r3, #1]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe fd17 	bl	8006648 <disk_status>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10c      	bne.n	8007c46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d007      	beq.n	8007c42 <find_volume+0x82>
 8007c32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c3e:	230a      	movs	r3, #10
 8007c40:	e1ff      	b.n	8008042 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007c42:	2300      	movs	r3, #0
 8007c44:	e1fd      	b.n	8008042 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	2200      	movs	r2, #0
 8007c4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	785b      	ldrb	r3, [r3, #1]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fd0f 	bl	800667c <disk_initialize>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007c64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c70:	2303      	movs	r3, #3
 8007c72:	e1e6      	b.n	8008042 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d007      	beq.n	8007c8a <find_volume+0xca>
 8007c7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c7e:	f003 0304 	and.w	r3, r3, #4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007c86:	230a      	movs	r3, #10
 8007c88:	e1db      	b.n	8008042 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007c8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007c90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c92:	f7ff ff3f 	bl	8007b14 <check_fs>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007c9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d149      	bne.n	8007d38 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ca8:	e01e      	b.n	8007ce8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007cb8:	4413      	add	r3, r2
 8007cba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d006      	beq.n	8007cd4 <find_volume+0x114>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	3308      	adds	r3, #8
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fd72 	bl	80067b4 <ld_dword>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	e000      	b.n	8007cd6 <find_volume+0x116>
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	3358      	adds	r3, #88	; 0x58
 8007cdc:	443b      	add	r3, r7
 8007cde:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d9dd      	bls.n	8007caa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007cee:	2300      	movs	r3, #0
 8007cf0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <find_volume+0x13e>
 8007cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	3358      	adds	r3, #88	; 0x58
 8007d04:	443b      	add	r3, r7
 8007d06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d005      	beq.n	8007d1e <find_volume+0x15e>
 8007d12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d16:	f7ff fefd 	bl	8007b14 <check_fs>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	e000      	b.n	8007d20 <find_volume+0x160>
 8007d1e:	2303      	movs	r3, #3
 8007d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007d24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d905      	bls.n	8007d38 <find_volume+0x178>
 8007d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d2e:	3301      	adds	r3, #1
 8007d30:	643b      	str	r3, [r7, #64]	; 0x40
 8007d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d9e2      	bls.n	8007cfe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d101      	bne.n	8007d44 <find_volume+0x184>
 8007d40:	2301      	movs	r3, #1
 8007d42:	e17e      	b.n	8008042 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007d44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d901      	bls.n	8007d50 <find_volume+0x190>
 8007d4c:	230d      	movs	r3, #13
 8007d4e:	e178      	b.n	8008042 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	3330      	adds	r3, #48	; 0x30
 8007d54:	330b      	adds	r3, #11
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe fd14 	bl	8006784 <ld_word>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d62:	d001      	beq.n	8007d68 <find_volume+0x1a8>
 8007d64:	230d      	movs	r3, #13
 8007d66:	e16c      	b.n	8008042 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	3330      	adds	r3, #48	; 0x30
 8007d6c:	3316      	adds	r3, #22
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe fd08 	bl	8006784 <ld_word>
 8007d74:	4603      	mov	r3, r0
 8007d76:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <find_volume+0x1cc>
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	3330      	adds	r3, #48	; 0x30
 8007d82:	3324      	adds	r3, #36	; 0x24
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fe fd15 	bl	80067b4 <ld_dword>
 8007d8a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d90:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	789b      	ldrb	r3, [r3, #2]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d005      	beq.n	8007db0 <find_volume+0x1f0>
 8007da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da6:	789b      	ldrb	r3, [r3, #2]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d001      	beq.n	8007db0 <find_volume+0x1f0>
 8007dac:	230d      	movs	r3, #13
 8007dae:	e148      	b.n	8008042 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db2:	789b      	ldrb	r3, [r3, #2]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db8:	fb02 f303 	mul.w	r3, r2, r3
 8007dbc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	895b      	ldrh	r3, [r3, #10]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d008      	beq.n	8007de4 <find_volume+0x224>
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	895b      	ldrh	r3, [r3, #10]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	895b      	ldrh	r3, [r3, #10]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	4013      	ands	r3, r2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <find_volume+0x228>
 8007de4:	230d      	movs	r3, #13
 8007de6:	e12c      	b.n	8008042 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dea:	3330      	adds	r3, #48	; 0x30
 8007dec:	3311      	adds	r3, #17
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe fcc8 	bl	8006784 <ld_word>
 8007df4:	4603      	mov	r3, r0
 8007df6:	461a      	mov	r2, r3
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	891b      	ldrh	r3, [r3, #8]
 8007e00:	f003 030f 	and.w	r3, r3, #15
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <find_volume+0x24e>
 8007e0a:	230d      	movs	r3, #13
 8007e0c:	e119      	b.n	8008042 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	3330      	adds	r3, #48	; 0x30
 8007e12:	3313      	adds	r3, #19
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fe fcb5 	bl	8006784 <ld_word>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d106      	bne.n	8007e32 <find_volume+0x272>
 8007e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e26:	3330      	adds	r3, #48	; 0x30
 8007e28:	3320      	adds	r3, #32
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe fcc2 	bl	80067b4 <ld_dword>
 8007e30:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	3330      	adds	r3, #48	; 0x30
 8007e36:	330e      	adds	r3, #14
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fe fca3 	bl	8006784 <ld_word>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007e42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <find_volume+0x28c>
 8007e48:	230d      	movs	r3, #13
 8007e4a:	e0fa      	b.n	8008042 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007e4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e50:	4413      	add	r3, r2
 8007e52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e54:	8912      	ldrh	r2, [r2, #8]
 8007e56:	0912      	lsrs	r2, r2, #4
 8007e58:	b292      	uxth	r2, r2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d204      	bcs.n	8007e70 <find_volume+0x2b0>
 8007e66:	230d      	movs	r3, #13
 8007e68:	e0eb      	b.n	8008042 <find_volume+0x482>
 8007e6a:	bf00      	nop
 8007e6c:	200007d4 	.word	0x200007d4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e78:	8952      	ldrh	r2, [r2, #10]
 8007e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <find_volume+0x2ca>
 8007e86:	230d      	movs	r3, #13
 8007e88:	e0db      	b.n	8008042 <find_volume+0x482>
		fmt = FS_FAT32;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d802      	bhi.n	8007ea0 <find_volume+0x2e0>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d802      	bhi.n	8007eb0 <find_volume+0x2f0>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	1c9a      	adds	r2, r3, #2
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ebc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ebe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec2:	441a      	add	r2, r3
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007ec8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	441a      	add	r2, r3
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007ed2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d11e      	bne.n	8007f18 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	3330      	adds	r3, #48	; 0x30
 8007ede:	332a      	adds	r3, #42	; 0x2a
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe fc4f 	bl	8006784 <ld_word>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <find_volume+0x330>
 8007eec:	230d      	movs	r3, #13
 8007eee:	e0a8      	b.n	8008042 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	891b      	ldrh	r3, [r3, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <find_volume+0x33c>
 8007ef8:	230d      	movs	r3, #13
 8007efa:	e0a2      	b.n	8008042 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efe:	3330      	adds	r3, #48	; 0x30
 8007f00:	332c      	adds	r3, #44	; 0x2c
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe fc56 	bl	80067b4 <ld_dword>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	647b      	str	r3, [r7, #68]	; 0x44
 8007f16:	e01f      	b.n	8007f58 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	891b      	ldrh	r3, [r3, #8]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <find_volume+0x364>
 8007f20:	230d      	movs	r3, #13
 8007f22:	e08e      	b.n	8008042 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	6a1a      	ldr	r2, [r3, #32]
 8007f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2a:	441a      	add	r2, r3
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d103      	bne.n	8007f40 <find_volume+0x380>
 8007f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	005b      	lsls	r3, r3, #1
 8007f3e:	e00a      	b.n	8007f56 <find_volume+0x396>
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	695a      	ldr	r2, [r3, #20]
 8007f44:	4613      	mov	r3, r2
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	4413      	add	r3, r2
 8007f4a:	085a      	lsrs	r2, r3, #1
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007f56:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	699a      	ldr	r2, [r3, #24]
 8007f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f5e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007f62:	0a5b      	lsrs	r3, r3, #9
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d201      	bcs.n	8007f6c <find_volume+0x3ac>
 8007f68:	230d      	movs	r3, #13
 8007f6a:	e06a      	b.n	8008042 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f72:	611a      	str	r2, [r3, #16]
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	2280      	movs	r2, #128	; 0x80
 8007f80:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007f82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d149      	bne.n	800801e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	3330      	adds	r3, #48	; 0x30
 8007f8e:	3330      	adds	r3, #48	; 0x30
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fe fbf7 	bl	8006784 <ld_word>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d140      	bne.n	800801e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fa4:	f7fe fe9e 	bl	8006ce4 <move_window>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d137      	bne.n	800801e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	3330      	adds	r3, #48	; 0x30
 8007fb8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fbe1 	bl	8006784 <ld_word>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d127      	bne.n	800801e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	3330      	adds	r3, #48	; 0x30
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fe fbee 	bl	80067b4 <ld_dword>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	4a1c      	ldr	r2, [pc, #112]	; (800804c <find_volume+0x48c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d11e      	bne.n	800801e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	3330      	adds	r3, #48	; 0x30
 8007fe4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fe fbe3 	bl	80067b4 <ld_dword>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	4a17      	ldr	r2, [pc, #92]	; (8008050 <find_volume+0x490>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d113      	bne.n	800801e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	3330      	adds	r3, #48	; 0x30
 8007ffa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fbd8 	bl	80067b4 <ld_dword>
 8008004:	4602      	mov	r2, r0
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	3330      	adds	r3, #48	; 0x30
 800800e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fbce 	bl	80067b4 <ld_dword>
 8008018:	4602      	mov	r2, r0
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008024:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <find_volume+0x494>)
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	3301      	adds	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	4b09      	ldr	r3, [pc, #36]	; (8008054 <find_volume+0x494>)
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	4b08      	ldr	r3, [pc, #32]	; (8008054 <find_volume+0x494>)
 8008034:	881a      	ldrh	r2, [r3, #0]
 8008036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008038:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800803a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800803c:	f7fe fdea 	bl	8006c14 <clear_lock>
#endif
	return FR_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3758      	adds	r7, #88	; 0x58
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	41615252 	.word	0x41615252
 8008050:	61417272 	.word	0x61417272
 8008054:	200007d8 	.word	0x200007d8

08008058 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008062:	2309      	movs	r3, #9
 8008064:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01c      	beq.n	80080a6 <validate+0x4e>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d018      	beq.n	80080a6 <validate+0x4e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d013      	beq.n	80080a6 <validate+0x4e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	889a      	ldrh	r2, [r3, #4]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	88db      	ldrh	r3, [r3, #6]
 8008088:	429a      	cmp	r2, r3
 800808a:	d10c      	bne.n	80080a6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fad8 	bl	8006648 <disk_status>
 8008098:	4603      	mov	r3, r0
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <validate+0x4e>
			res = FR_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d102      	bne.n	80080b2 <validate+0x5a>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	e000      	b.n	80080b4 <validate+0x5c>
 80080b2:	2300      	movs	r3, #0
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	6013      	str	r3, [r2, #0]
	return res;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80080d6:	f107 0310 	add.w	r3, r7, #16
 80080da:	4618      	mov	r0, r3
 80080dc:	f7ff fcd5 	bl	8007a8a <get_ldnumber>
 80080e0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da01      	bge.n	80080ec <f_mount+0x28>
 80080e8:	230b      	movs	r3, #11
 80080ea:	e02b      	b.n	8008144 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80080ec:	4a17      	ldr	r2, [pc, #92]	; (800814c <f_mount+0x88>)
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80080fc:	69b8      	ldr	r0, [r7, #24]
 80080fe:	f7fe fd89 	bl	8006c14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2200      	movs	r2, #0
 8008106:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	490d      	ldr	r1, [pc, #52]	; (800814c <f_mount+0x88>)
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <f_mount+0x66>
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d001      	beq.n	800812e <f_mount+0x6a>
 800812a:	2300      	movs	r3, #0
 800812c:	e00a      	b.n	8008144 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800812e:	f107 010c 	add.w	r1, r7, #12
 8008132:	f107 0308 	add.w	r3, r7, #8
 8008136:	2200      	movs	r2, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff fd41 	bl	8007bc0 <find_volume>
 800813e:	4603      	mov	r3, r0
 8008140:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008142:	7dfb      	ldrb	r3, [r7, #23]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3720      	adds	r7, #32
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	200007d4 	.word	0x200007d4

08008150 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b098      	sub	sp, #96	; 0x60
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <f_open+0x18>
 8008164:	2309      	movs	r3, #9
 8008166:	e1ad      	b.n	80084c4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800816e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008170:	79fa      	ldrb	r2, [r7, #7]
 8008172:	f107 0110 	add.w	r1, r7, #16
 8008176:	f107 0308 	add.w	r3, r7, #8
 800817a:	4618      	mov	r0, r3
 800817c:	f7ff fd20 	bl	8007bc0 <find_volume>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008186:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800818a:	2b00      	cmp	r3, #0
 800818c:	f040 8191 	bne.w	80084b2 <f_open+0x362>
		dj.obj.fs = fs;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	f107 0314 	add.w	r3, r7, #20
 800819a:	4611      	mov	r1, r2
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff fc03 	bl	80079a8 <follow_path>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80081a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d11a      	bne.n	80081e6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80081b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80081b4:	b25b      	sxtb	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	da03      	bge.n	80081c2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80081ba:	2306      	movs	r3, #6
 80081bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80081c0:	e011      	b.n	80081e6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	f023 0301 	bic.w	r3, r3, #1
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	bf14      	ite	ne
 80081cc:	2301      	movne	r3, #1
 80081ce:	2300      	moveq	r3, #0
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	461a      	mov	r2, r3
 80081d4:	f107 0314 	add.w	r3, r7, #20
 80081d8:	4611      	mov	r1, r2
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fe fbd2 	bl	8006984 <chk_lock>
 80081e0:	4603      	mov	r3, r0
 80081e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	f003 031c 	and.w	r3, r3, #28
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d07f      	beq.n	80082f0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80081f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d017      	beq.n	8008228 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80081f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d10e      	bne.n	800821e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008200:	f7fe fc1c 	bl	8006a3c <enq_lock>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d006      	beq.n	8008218 <f_open+0xc8>
 800820a:	f107 0314 	add.w	r3, r7, #20
 800820e:	4618      	mov	r0, r3
 8008210:	f7ff fb03 	bl	800781a <dir_register>
 8008214:	4603      	mov	r3, r0
 8008216:	e000      	b.n	800821a <f_open+0xca>
 8008218:	2312      	movs	r3, #18
 800821a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	f043 0308 	orr.w	r3, r3, #8
 8008224:	71fb      	strb	r3, [r7, #7]
 8008226:	e010      	b.n	800824a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008228:	7ebb      	ldrb	r3, [r7, #26]
 800822a:	f003 0311 	and.w	r3, r3, #17
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <f_open+0xea>
					res = FR_DENIED;
 8008232:	2307      	movs	r3, #7
 8008234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008238:	e007      	b.n	800824a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800823a:	79fb      	ldrb	r3, [r7, #7]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <f_open+0xfa>
 8008244:	2308      	movs	r3, #8
 8008246:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800824a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800824e:	2b00      	cmp	r3, #0
 8008250:	d168      	bne.n	8008324 <f_open+0x1d4>
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	f003 0308 	and.w	r3, r3, #8
 8008258:	2b00      	cmp	r3, #0
 800825a:	d063      	beq.n	8008324 <f_open+0x1d4>
				dw = GET_FATTIME();
 800825c:	f7fd ffa4 	bl	80061a8 <get_fattime>
 8008260:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008264:	330e      	adds	r3, #14
 8008266:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fae1 	bl	8006830 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800826e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008270:	3316      	adds	r3, #22
 8008272:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe fadb 	bl	8006830 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800827a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827c:	330b      	adds	r3, #11
 800827e:	2220      	movs	r2, #32
 8008280:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008286:	4611      	mov	r1, r2
 8008288:	4618      	mov	r0, r3
 800828a:	f7ff fa32 	bl	80076f2 <ld_clust>
 800828e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008294:	2200      	movs	r2, #0
 8008296:	4618      	mov	r0, r3
 8008298:	f7ff fa4a 	bl	8007730 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800829c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829e:	331c      	adds	r3, #28
 80082a0:	2100      	movs	r1, #0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fe fac4 	bl	8006830 <st_dword>
					fs->wflag = 1;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2201      	movs	r2, #1
 80082ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80082ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d037      	beq.n	8008324 <f_open+0x1d4>
						dw = fs->winsect;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80082ba:	f107 0314 	add.w	r3, r7, #20
 80082be:	2200      	movs	r2, #0
 80082c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe ff5d 	bl	8007182 <remove_chain>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80082ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d126      	bne.n	8008324 <f_open+0x1d4>
							res = move_window(fs, dw);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fd02 	bl	8006ce4 <move_window>
 80082e0:	4603      	mov	r3, r0
 80082e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082ea:	3a01      	subs	r2, #1
 80082ec:	60da      	str	r2, [r3, #12]
 80082ee:	e019      	b.n	8008324 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80082f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d115      	bne.n	8008324 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80082f8:	7ebb      	ldrb	r3, [r7, #26]
 80082fa:	f003 0310 	and.w	r3, r3, #16
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008302:	2304      	movs	r3, #4
 8008304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008308:	e00c      	b.n	8008324 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d007      	beq.n	8008324 <f_open+0x1d4>
 8008314:	7ebb      	ldrb	r3, [r7, #26]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <f_open+0x1d4>
						res = FR_DENIED;
 800831e:	2307      	movs	r3, #7
 8008320:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008328:	2b00      	cmp	r3, #0
 800832a:	d128      	bne.n	800837e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	f003 0308 	and.w	r3, r3, #8
 8008332:	2b00      	cmp	r3, #0
 8008334:	d003      	beq.n	800833e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800833c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	f023 0301 	bic.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	bf14      	ite	ne
 8008356:	2301      	movne	r3, #1
 8008358:	2300      	moveq	r3, #0
 800835a:	b2db      	uxtb	r3, r3
 800835c:	461a      	mov	r2, r3
 800835e:	f107 0314 	add.w	r3, r7, #20
 8008362:	4611      	mov	r1, r2
 8008364:	4618      	mov	r0, r3
 8008366:	f7fe fb8b 	bl	8006a80 <inc_lock>
 800836a:	4602      	mov	r2, r0
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d102      	bne.n	800837e <f_open+0x22e>
 8008378:	2302      	movs	r3, #2
 800837a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800837e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008382:	2b00      	cmp	r3, #0
 8008384:	f040 8095 	bne.w	80084b2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff f9af 	bl	80076f2 <ld_clust>
 8008394:	4602      	mov	r2, r0
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839c:	331c      	adds	r3, #28
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe fa08 	bl	80067b4 <ld_dword>
 80083a4:	4602      	mov	r2, r0
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	88da      	ldrh	r2, [r3, #6]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	79fa      	ldrb	r2, [r7, #7]
 80083c2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3330      	adds	r3, #48	; 0x30
 80083da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083de:	2100      	movs	r1, #0
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fa72 	bl	80068ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	f003 0320 	and.w	r3, r3, #32
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d060      	beq.n	80084b2 <f_open+0x362>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d05c      	beq.n	80084b2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	895b      	ldrh	r3, [r3, #10]
 8008404:	025b      	lsls	r3, r3, #9
 8008406:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	657b      	str	r3, [r7, #84]	; 0x54
 8008414:	e016      	b.n	8008444 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe fd1d 	bl	8006e5a <get_fat>
 8008420:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008424:	2b01      	cmp	r3, #1
 8008426:	d802      	bhi.n	800842e <f_open+0x2de>
 8008428:	2302      	movs	r3, #2
 800842a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800842e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d102      	bne.n	800843c <f_open+0x2ec>
 8008436:	2301      	movs	r3, #1
 8008438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800843c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800843e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	657b      	str	r3, [r7, #84]	; 0x54
 8008444:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <f_open+0x304>
 800844c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800844e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008450:	429a      	cmp	r2, r3
 8008452:	d8e0      	bhi.n	8008416 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008458:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800845a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800845e:	2b00      	cmp	r3, #0
 8008460:	d127      	bne.n	80084b2 <f_open+0x362>
 8008462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008468:	2b00      	cmp	r3, #0
 800846a:	d022      	beq.n	80084b2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008470:	4618      	mov	r0, r3
 8008472:	f7fe fcd3 	bl	8006e1c <clust2sect>
 8008476:	6478      	str	r0, [r7, #68]	; 0x44
 8008478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800847a:	2b00      	cmp	r3, #0
 800847c:	d103      	bne.n	8008486 <f_open+0x336>
						res = FR_INT_ERR;
 800847e:	2302      	movs	r3, #2
 8008480:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008484:	e015      	b.n	80084b2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008488:	0a5a      	lsrs	r2, r3, #9
 800848a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848c:	441a      	add	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	7858      	ldrb	r0, [r3, #1]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a1a      	ldr	r2, [r3, #32]
 80084a0:	2301      	movs	r3, #1
 80084a2:	f7fe f911 	bl	80066c8 <disk_read>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <f_open+0x362>
 80084ac:	2301      	movs	r3, #1
 80084ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80084b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <f_open+0x370>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80084c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3760      	adds	r7, #96	; 0x60
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08c      	sub	sp, #48	; 0x30
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2200      	movs	r2, #0
 80084e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f107 0210 	add.w	r2, r7, #16
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff fdb3 	bl	8008058 <validate>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80084f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d107      	bne.n	8008510 <f_write+0x44>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	7d5b      	ldrb	r3, [r3, #21]
 8008504:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008508:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <f_write+0x4a>
 8008510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008514:	e14b      	b.n	80087ae <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	7d1b      	ldrb	r3, [r3, #20]
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <f_write+0x5a>
 8008522:	2307      	movs	r3, #7
 8008524:	e143      	b.n	80087ae <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	441a      	add	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	429a      	cmp	r2, r3
 8008534:	f080 812d 	bcs.w	8008792 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	43db      	mvns	r3, r3
 800853e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008540:	e127      	b.n	8008792 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854a:	2b00      	cmp	r3, #0
 800854c:	f040 80e3 	bne.w	8008716 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	0a5b      	lsrs	r3, r3, #9
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	8952      	ldrh	r2, [r2, #10]
 800855a:	3a01      	subs	r2, #1
 800855c:	4013      	ands	r3, r2
 800855e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d143      	bne.n	80085ee <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10c      	bne.n	8008588 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	2b00      	cmp	r3, #0
 8008578:	d11a      	bne.n	80085b0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2100      	movs	r1, #0
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fe64 	bl	800724c <create_chain>
 8008584:	62b8      	str	r0, [r7, #40]	; 0x28
 8008586:	e013      	b.n	80085b0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	4619      	mov	r1, r3
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7fe fef0 	bl	800737c <clmt_clust>
 800859c:	62b8      	str	r0, [r7, #40]	; 0x28
 800859e:	e007      	b.n	80085b0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7fe fe4f 	bl	800724c <create_chain>
 80085ae:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 80f2 	beq.w	800879c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d104      	bne.n	80085c8 <f_write+0xfc>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2202      	movs	r2, #2
 80085c2:	755a      	strb	r2, [r3, #21]
 80085c4:	2302      	movs	r3, #2
 80085c6:	e0f2      	b.n	80087ae <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ce:	d104      	bne.n	80085da <f_write+0x10e>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	755a      	strb	r2, [r3, #21]
 80085d6:	2301      	movs	r3, #1
 80085d8:	e0e9      	b.n	80087ae <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085de:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <f_write+0x122>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085ec:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	7d1b      	ldrb	r3, [r3, #20]
 80085f2:	b25b      	sxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	da18      	bge.n	800862a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	7858      	ldrb	r0, [r3, #1]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a1a      	ldr	r2, [r3, #32]
 8008606:	2301      	movs	r3, #1
 8008608:	f7fe f87e 	bl	8006708 <disk_write>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <f_write+0x150>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2201      	movs	r2, #1
 8008616:	755a      	strb	r2, [r3, #21]
 8008618:	2301      	movs	r3, #1
 800861a:	e0c8      	b.n	80087ae <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	7d1b      	ldrb	r3, [r3, #20]
 8008620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008624:	b2da      	uxtb	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	4619      	mov	r1, r3
 8008632:	4610      	mov	r0, r2
 8008634:	f7fe fbf2 	bl	8006e1c <clust2sect>
 8008638:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d104      	bne.n	800864a <f_write+0x17e>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2202      	movs	r2, #2
 8008644:	755a      	strb	r2, [r3, #21]
 8008646:	2302      	movs	r3, #2
 8008648:	e0b1      	b.n	80087ae <f_write+0x2e2>
			sect += csect;
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	4413      	add	r3, r2
 8008650:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	0a5b      	lsrs	r3, r3, #9
 8008656:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d03c      	beq.n	80086d8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800865e:	69ba      	ldr	r2, [r7, #24]
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	4413      	add	r3, r2
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	8952      	ldrh	r2, [r2, #10]
 8008668:	4293      	cmp	r3, r2
 800866a:	d905      	bls.n	8008678 <f_write+0x1ac>
					cc = fs->csize - csect;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	895b      	ldrh	r3, [r3, #10]
 8008670:	461a      	mov	r2, r3
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	7858      	ldrb	r0, [r3, #1]
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	69f9      	ldr	r1, [r7, #28]
 8008682:	f7fe f841 	bl	8006708 <disk_write>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <f_write+0x1ca>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2201      	movs	r2, #1
 8008690:	755a      	strb	r2, [r3, #21]
 8008692:	2301      	movs	r3, #1
 8008694:	e08b      	b.n	80087ae <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6a1a      	ldr	r2, [r3, #32]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	6a3a      	ldr	r2, [r7, #32]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d915      	bls.n	80086d0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a1a      	ldr	r2, [r3, #32]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	025b      	lsls	r3, r3, #9
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	4413      	add	r3, r2
 80086b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086bc:	4619      	mov	r1, r3
 80086be:	f7fe f8e3 	bl	8006888 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	7d1b      	ldrb	r3, [r3, #20]
 80086c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	025b      	lsls	r3, r3, #9
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80086d6:	e03f      	b.n	8008758 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d016      	beq.n	8008710 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d210      	bcs.n	8008710 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	7858      	ldrb	r0, [r3, #1]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086f8:	2301      	movs	r3, #1
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	f7fd ffe4 	bl	80066c8 <disk_read>
 8008700:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	755a      	strb	r2, [r3, #21]
 800870c:	2301      	movs	r3, #1
 800870e:	e04e      	b.n	80087ae <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008722:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	429a      	cmp	r2, r3
 800872a:	d901      	bls.n	8008730 <f_write+0x264>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873e:	4413      	add	r3, r2
 8008740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008742:	69f9      	ldr	r1, [r7, #28]
 8008744:	4618      	mov	r0, r3
 8008746:	f7fe f89f 	bl	8006888 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	7d1b      	ldrb	r3, [r3, #20]
 800874e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008752:	b2da      	uxtb	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008758:	69fa      	ldr	r2, [r7, #28]
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	4413      	add	r3, r2
 800875e:	61fb      	str	r3, [r7, #28]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	699a      	ldr	r2, [r3, #24]
 8008764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008766:	441a      	add	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	619a      	str	r2, [r3, #24]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	68da      	ldr	r2, [r3, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	429a      	cmp	r2, r3
 8008776:	bf38      	it	cc
 8008778:	461a      	movcc	r2, r3
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	60da      	str	r2, [r3, #12]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	441a      	add	r2, r3
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f47f aed4 	bne.w	8008542 <f_write+0x76>
 800879a:	e000      	b.n	800879e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800879c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	7d1b      	ldrb	r3, [r3, #20]
 80087a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3730      	adds	r7, #48	; 0x30
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b086      	sub	sp, #24
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f107 0208 	add.w	r2, r7, #8
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff fc46 	bl	8008058 <validate>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80087d0:	7dfb      	ldrb	r3, [r7, #23]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d168      	bne.n	80088a8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7d1b      	ldrb	r3, [r3, #20]
 80087da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d062      	beq.n	80088a8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	7d1b      	ldrb	r3, [r3, #20]
 80087e6:	b25b      	sxtb	r3, r3
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da15      	bge.n	8008818 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	7858      	ldrb	r0, [r3, #1]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1a      	ldr	r2, [r3, #32]
 80087fa:	2301      	movs	r3, #1
 80087fc:	f7fd ff84 	bl	8006708 <disk_write>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <f_sync+0x54>
 8008806:	2301      	movs	r3, #1
 8008808:	e04f      	b.n	80088aa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7d1b      	ldrb	r3, [r3, #20]
 800880e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008812:	b2da      	uxtb	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008818:	f7fd fcc6 	bl	80061a8 <get_fattime>
 800881c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	4619      	mov	r1, r3
 8008826:	4610      	mov	r0, r2
 8008828:	f7fe fa5c 	bl	8006ce4 <move_window>
 800882c:	4603      	mov	r3, r0
 800882e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d138      	bne.n	80088a8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	330b      	adds	r3, #11
 8008840:	781a      	ldrb	r2, [r3, #0]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	330b      	adds	r3, #11
 8008846:	f042 0220 	orr.w	r2, r2, #32
 800884a:	b2d2      	uxtb	r2, r2
 800884c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	461a      	mov	r2, r3
 8008858:	68f9      	ldr	r1, [r7, #12]
 800885a:	f7fe ff69 	bl	8007730 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f103 021c 	add.w	r2, r3, #28
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f7fd ffe0 	bl	8006830 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	3316      	adds	r3, #22
 8008874:	6939      	ldr	r1, [r7, #16]
 8008876:	4618      	mov	r0, r3
 8008878:	f7fd ffda 	bl	8006830 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3312      	adds	r3, #18
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f7fd ffb9 	bl	80067fa <st_word>
					fs->wflag = 1;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2201      	movs	r2, #1
 800888c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fa55 	bl	8006d40 <sync_fs>
 8008896:	4603      	mov	r3, r0
 8008898:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7d1b      	ldrb	r3, [r3, #20]
 800889e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3718      	adds	r7, #24
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff ff7b 	bl	80087b6 <f_sync>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d118      	bne.n	80088fc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f107 0208 	add.w	r2, r7, #8
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7ff fbc0 	bl	8008058 <validate>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10c      	bne.n	80088fc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe f958 	bl	8006b9c <dec_lock>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d102      	bne.n	80088fc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	4613      	mov	r3, r2
 8008914:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008916:	2301      	movs	r3, #1
 8008918:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800891e:	4b1f      	ldr	r3, [pc, #124]	; (800899c <FATFS_LinkDriverEx+0x94>)
 8008920:	7a5b      	ldrb	r3, [r3, #9]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d131      	bne.n	800898c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008928:	4b1c      	ldr	r3, [pc, #112]	; (800899c <FATFS_LinkDriverEx+0x94>)
 800892a:	7a5b      	ldrb	r3, [r3, #9]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	461a      	mov	r2, r3
 8008930:	4b1a      	ldr	r3, [pc, #104]	; (800899c <FATFS_LinkDriverEx+0x94>)
 8008932:	2100      	movs	r1, #0
 8008934:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008936:	4b19      	ldr	r3, [pc, #100]	; (800899c <FATFS_LinkDriverEx+0x94>)
 8008938:	7a5b      	ldrb	r3, [r3, #9]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	4a17      	ldr	r2, [pc, #92]	; (800899c <FATFS_LinkDriverEx+0x94>)
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008946:	4b15      	ldr	r3, [pc, #84]	; (800899c <FATFS_LinkDriverEx+0x94>)
 8008948:	7a5b      	ldrb	r3, [r3, #9]
 800894a:	b2db      	uxtb	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	4b13      	ldr	r3, [pc, #76]	; (800899c <FATFS_LinkDriverEx+0x94>)
 8008950:	4413      	add	r3, r2
 8008952:	79fa      	ldrb	r2, [r7, #7]
 8008954:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008956:	4b11      	ldr	r3, [pc, #68]	; (800899c <FATFS_LinkDriverEx+0x94>)
 8008958:	7a5b      	ldrb	r3, [r3, #9]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	1c5a      	adds	r2, r3, #1
 800895e:	b2d1      	uxtb	r1, r2
 8008960:	4a0e      	ldr	r2, [pc, #56]	; (800899c <FATFS_LinkDriverEx+0x94>)
 8008962:	7251      	strb	r1, [r2, #9]
 8008964:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008966:	7dbb      	ldrb	r3, [r7, #22]
 8008968:	3330      	adds	r3, #48	; 0x30
 800896a:	b2da      	uxtb	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	3301      	adds	r3, #1
 8008974:	223a      	movs	r2, #58	; 0x3a
 8008976:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	3302      	adds	r3, #2
 800897c:	222f      	movs	r2, #47	; 0x2f
 800897e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	3303      	adds	r3, #3
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008988:	2300      	movs	r3, #0
 800898a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
}
 800898e:	4618      	mov	r0, r3
 8008990:	371c      	adds	r7, #28
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	200007fc 	.word	0x200007fc

080089a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80089aa:	2200      	movs	r2, #0
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff ffaa 	bl	8008908 <FATFS_LinkDriverEx>
 80089b4:	4603      	mov	r3, r0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <__errno>:
 80089c0:	4b01      	ldr	r3, [pc, #4]	; (80089c8 <__errno+0x8>)
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	2000000c 	.word	0x2000000c

080089cc <__libc_init_array>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	4d0d      	ldr	r5, [pc, #52]	; (8008a04 <__libc_init_array+0x38>)
 80089d0:	4c0d      	ldr	r4, [pc, #52]	; (8008a08 <__libc_init_array+0x3c>)
 80089d2:	1b64      	subs	r4, r4, r5
 80089d4:	10a4      	asrs	r4, r4, #2
 80089d6:	2600      	movs	r6, #0
 80089d8:	42a6      	cmp	r6, r4
 80089da:	d109      	bne.n	80089f0 <__libc_init_array+0x24>
 80089dc:	4d0b      	ldr	r5, [pc, #44]	; (8008a0c <__libc_init_array+0x40>)
 80089de:	4c0c      	ldr	r4, [pc, #48]	; (8008a10 <__libc_init_array+0x44>)
 80089e0:	f000 fca8 	bl	8009334 <_init>
 80089e4:	1b64      	subs	r4, r4, r5
 80089e6:	10a4      	asrs	r4, r4, #2
 80089e8:	2600      	movs	r6, #0
 80089ea:	42a6      	cmp	r6, r4
 80089ec:	d105      	bne.n	80089fa <__libc_init_array+0x2e>
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f4:	4798      	blx	r3
 80089f6:	3601      	adds	r6, #1
 80089f8:	e7ee      	b.n	80089d8 <__libc_init_array+0xc>
 80089fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fe:	4798      	blx	r3
 8008a00:	3601      	adds	r6, #1
 8008a02:	e7f2      	b.n	80089ea <__libc_init_array+0x1e>
 8008a04:	080095fc 	.word	0x080095fc
 8008a08:	080095fc 	.word	0x080095fc
 8008a0c:	080095fc 	.word	0x080095fc
 8008a10:	08009600 	.word	0x08009600

08008a14 <memset>:
 8008a14:	4402      	add	r2, r0
 8008a16:	4603      	mov	r3, r0
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d100      	bne.n	8008a1e <memset+0xa>
 8008a1c:	4770      	bx	lr
 8008a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a22:	e7f9      	b.n	8008a18 <memset+0x4>

08008a24 <_vsniprintf_r>:
 8008a24:	b530      	push	{r4, r5, lr}
 8008a26:	4614      	mov	r4, r2
 8008a28:	2c00      	cmp	r4, #0
 8008a2a:	b09b      	sub	sp, #108	; 0x6c
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	461a      	mov	r2, r3
 8008a30:	da05      	bge.n	8008a3e <_vsniprintf_r+0x1a>
 8008a32:	238b      	movs	r3, #139	; 0x8b
 8008a34:	6003      	str	r3, [r0, #0]
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3a:	b01b      	add	sp, #108	; 0x6c
 8008a3c:	bd30      	pop	{r4, r5, pc}
 8008a3e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008a42:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008a46:	bf14      	ite	ne
 8008a48:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008a4c:	4623      	moveq	r3, r4
 8008a4e:	9302      	str	r3, [sp, #8]
 8008a50:	9305      	str	r3, [sp, #20]
 8008a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a56:	9100      	str	r1, [sp, #0]
 8008a58:	9104      	str	r1, [sp, #16]
 8008a5a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008a5e:	4669      	mov	r1, sp
 8008a60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008a62:	f000 f875 	bl	8008b50 <_svfiprintf_r>
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	bfbc      	itt	lt
 8008a6a:	238b      	movlt	r3, #139	; 0x8b
 8008a6c:	602b      	strlt	r3, [r5, #0]
 8008a6e:	2c00      	cmp	r4, #0
 8008a70:	d0e3      	beq.n	8008a3a <_vsniprintf_r+0x16>
 8008a72:	9b00      	ldr	r3, [sp, #0]
 8008a74:	2200      	movs	r2, #0
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e7df      	b.n	8008a3a <_vsniprintf_r+0x16>
	...

08008a7c <vsniprintf>:
 8008a7c:	b507      	push	{r0, r1, r2, lr}
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	4613      	mov	r3, r2
 8008a82:	460a      	mov	r2, r1
 8008a84:	4601      	mov	r1, r0
 8008a86:	4803      	ldr	r0, [pc, #12]	; (8008a94 <vsniprintf+0x18>)
 8008a88:	6800      	ldr	r0, [r0, #0]
 8008a8a:	f7ff ffcb 	bl	8008a24 <_vsniprintf_r>
 8008a8e:	b003      	add	sp, #12
 8008a90:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a94:	2000000c 	.word	0x2000000c

08008a98 <__ssputs_r>:
 8008a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a9c:	688e      	ldr	r6, [r1, #8]
 8008a9e:	429e      	cmp	r6, r3
 8008aa0:	4682      	mov	sl, r0
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	4690      	mov	r8, r2
 8008aa6:	461f      	mov	r7, r3
 8008aa8:	d838      	bhi.n	8008b1c <__ssputs_r+0x84>
 8008aaa:	898a      	ldrh	r2, [r1, #12]
 8008aac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ab0:	d032      	beq.n	8008b18 <__ssputs_r+0x80>
 8008ab2:	6825      	ldr	r5, [r4, #0]
 8008ab4:	6909      	ldr	r1, [r1, #16]
 8008ab6:	eba5 0901 	sub.w	r9, r5, r1
 8008aba:	6965      	ldr	r5, [r4, #20]
 8008abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	444b      	add	r3, r9
 8008ac8:	106d      	asrs	r5, r5, #1
 8008aca:	429d      	cmp	r5, r3
 8008acc:	bf38      	it	cc
 8008ace:	461d      	movcc	r5, r3
 8008ad0:	0553      	lsls	r3, r2, #21
 8008ad2:	d531      	bpl.n	8008b38 <__ssputs_r+0xa0>
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	f000 fb63 	bl	80091a0 <_malloc_r>
 8008ada:	4606      	mov	r6, r0
 8008adc:	b950      	cbnz	r0, 8008af4 <__ssputs_r+0x5c>
 8008ade:	230c      	movs	r3, #12
 8008ae0:	f8ca 3000 	str.w	r3, [sl]
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aea:	81a3      	strh	r3, [r4, #12]
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af4:	6921      	ldr	r1, [r4, #16]
 8008af6:	464a      	mov	r2, r9
 8008af8:	f000 fabe 	bl	8009078 <memcpy>
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	6126      	str	r6, [r4, #16]
 8008b0a:	6165      	str	r5, [r4, #20]
 8008b0c:	444e      	add	r6, r9
 8008b0e:	eba5 0509 	sub.w	r5, r5, r9
 8008b12:	6026      	str	r6, [r4, #0]
 8008b14:	60a5      	str	r5, [r4, #8]
 8008b16:	463e      	mov	r6, r7
 8008b18:	42be      	cmp	r6, r7
 8008b1a:	d900      	bls.n	8008b1e <__ssputs_r+0x86>
 8008b1c:	463e      	mov	r6, r7
 8008b1e:	6820      	ldr	r0, [r4, #0]
 8008b20:	4632      	mov	r2, r6
 8008b22:	4641      	mov	r1, r8
 8008b24:	f000 fab6 	bl	8009094 <memmove>
 8008b28:	68a3      	ldr	r3, [r4, #8]
 8008b2a:	1b9b      	subs	r3, r3, r6
 8008b2c:	60a3      	str	r3, [r4, #8]
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	4433      	add	r3, r6
 8008b32:	6023      	str	r3, [r4, #0]
 8008b34:	2000      	movs	r0, #0
 8008b36:	e7db      	b.n	8008af0 <__ssputs_r+0x58>
 8008b38:	462a      	mov	r2, r5
 8008b3a:	f000 fba5 	bl	8009288 <_realloc_r>
 8008b3e:	4606      	mov	r6, r0
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d1e1      	bne.n	8008b08 <__ssputs_r+0x70>
 8008b44:	6921      	ldr	r1, [r4, #16]
 8008b46:	4650      	mov	r0, sl
 8008b48:	f000 fabe 	bl	80090c8 <_free_r>
 8008b4c:	e7c7      	b.n	8008ade <__ssputs_r+0x46>
	...

08008b50 <_svfiprintf_r>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	4698      	mov	r8, r3
 8008b56:	898b      	ldrh	r3, [r1, #12]
 8008b58:	061b      	lsls	r3, r3, #24
 8008b5a:	b09d      	sub	sp, #116	; 0x74
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	460d      	mov	r5, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	d50e      	bpl.n	8008b82 <_svfiprintf_r+0x32>
 8008b64:	690b      	ldr	r3, [r1, #16]
 8008b66:	b963      	cbnz	r3, 8008b82 <_svfiprintf_r+0x32>
 8008b68:	2140      	movs	r1, #64	; 0x40
 8008b6a:	f000 fb19 	bl	80091a0 <_malloc_r>
 8008b6e:	6028      	str	r0, [r5, #0]
 8008b70:	6128      	str	r0, [r5, #16]
 8008b72:	b920      	cbnz	r0, 8008b7e <_svfiprintf_r+0x2e>
 8008b74:	230c      	movs	r3, #12
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7c:	e0d1      	b.n	8008d22 <_svfiprintf_r+0x1d2>
 8008b7e:	2340      	movs	r3, #64	; 0x40
 8008b80:	616b      	str	r3, [r5, #20]
 8008b82:	2300      	movs	r3, #0
 8008b84:	9309      	str	r3, [sp, #36]	; 0x24
 8008b86:	2320      	movs	r3, #32
 8008b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b90:	2330      	movs	r3, #48	; 0x30
 8008b92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008d3c <_svfiprintf_r+0x1ec>
 8008b96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b9a:	f04f 0901 	mov.w	r9, #1
 8008b9e:	4623      	mov	r3, r4
 8008ba0:	469a      	mov	sl, r3
 8008ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ba6:	b10a      	cbz	r2, 8008bac <_svfiprintf_r+0x5c>
 8008ba8:	2a25      	cmp	r2, #37	; 0x25
 8008baa:	d1f9      	bne.n	8008ba0 <_svfiprintf_r+0x50>
 8008bac:	ebba 0b04 	subs.w	fp, sl, r4
 8008bb0:	d00b      	beq.n	8008bca <_svfiprintf_r+0x7a>
 8008bb2:	465b      	mov	r3, fp
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f7ff ff6d 	bl	8008a98 <__ssputs_r>
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	f000 80aa 	beq.w	8008d18 <_svfiprintf_r+0x1c8>
 8008bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bc6:	445a      	add	r2, fp
 8008bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8008bca:	f89a 3000 	ldrb.w	r3, [sl]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 80a2 	beq.w	8008d18 <_svfiprintf_r+0x1c8>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8008bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bde:	f10a 0a01 	add.w	sl, sl, #1
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	9307      	str	r3, [sp, #28]
 8008be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bea:	931a      	str	r3, [sp, #104]	; 0x68
 8008bec:	4654      	mov	r4, sl
 8008bee:	2205      	movs	r2, #5
 8008bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf4:	4851      	ldr	r0, [pc, #324]	; (8008d3c <_svfiprintf_r+0x1ec>)
 8008bf6:	f7f7 fb13 	bl	8000220 <memchr>
 8008bfa:	9a04      	ldr	r2, [sp, #16]
 8008bfc:	b9d8      	cbnz	r0, 8008c36 <_svfiprintf_r+0xe6>
 8008bfe:	06d0      	lsls	r0, r2, #27
 8008c00:	bf44      	itt	mi
 8008c02:	2320      	movmi	r3, #32
 8008c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c08:	0711      	lsls	r1, r2, #28
 8008c0a:	bf44      	itt	mi
 8008c0c:	232b      	movmi	r3, #43	; 0x2b
 8008c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c12:	f89a 3000 	ldrb.w	r3, [sl]
 8008c16:	2b2a      	cmp	r3, #42	; 0x2a
 8008c18:	d015      	beq.n	8008c46 <_svfiprintf_r+0xf6>
 8008c1a:	9a07      	ldr	r2, [sp, #28]
 8008c1c:	4654      	mov	r4, sl
 8008c1e:	2000      	movs	r0, #0
 8008c20:	f04f 0c0a 	mov.w	ip, #10
 8008c24:	4621      	mov	r1, r4
 8008c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c2a:	3b30      	subs	r3, #48	; 0x30
 8008c2c:	2b09      	cmp	r3, #9
 8008c2e:	d94e      	bls.n	8008cce <_svfiprintf_r+0x17e>
 8008c30:	b1b0      	cbz	r0, 8008c60 <_svfiprintf_r+0x110>
 8008c32:	9207      	str	r2, [sp, #28]
 8008c34:	e014      	b.n	8008c60 <_svfiprintf_r+0x110>
 8008c36:	eba0 0308 	sub.w	r3, r0, r8
 8008c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	9304      	str	r3, [sp, #16]
 8008c42:	46a2      	mov	sl, r4
 8008c44:	e7d2      	b.n	8008bec <_svfiprintf_r+0x9c>
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	1d19      	adds	r1, r3, #4
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	9103      	str	r1, [sp, #12]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bfbb      	ittet	lt
 8008c52:	425b      	neglt	r3, r3
 8008c54:	f042 0202 	orrlt.w	r2, r2, #2
 8008c58:	9307      	strge	r3, [sp, #28]
 8008c5a:	9307      	strlt	r3, [sp, #28]
 8008c5c:	bfb8      	it	lt
 8008c5e:	9204      	strlt	r2, [sp, #16]
 8008c60:	7823      	ldrb	r3, [r4, #0]
 8008c62:	2b2e      	cmp	r3, #46	; 0x2e
 8008c64:	d10c      	bne.n	8008c80 <_svfiprintf_r+0x130>
 8008c66:	7863      	ldrb	r3, [r4, #1]
 8008c68:	2b2a      	cmp	r3, #42	; 0x2a
 8008c6a:	d135      	bne.n	8008cd8 <_svfiprintf_r+0x188>
 8008c6c:	9b03      	ldr	r3, [sp, #12]
 8008c6e:	1d1a      	adds	r2, r3, #4
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	9203      	str	r2, [sp, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	bfb8      	it	lt
 8008c78:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c7c:	3402      	adds	r4, #2
 8008c7e:	9305      	str	r3, [sp, #20]
 8008c80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008d4c <_svfiprintf_r+0x1fc>
 8008c84:	7821      	ldrb	r1, [r4, #0]
 8008c86:	2203      	movs	r2, #3
 8008c88:	4650      	mov	r0, sl
 8008c8a:	f7f7 fac9 	bl	8000220 <memchr>
 8008c8e:	b140      	cbz	r0, 8008ca2 <_svfiprintf_r+0x152>
 8008c90:	2340      	movs	r3, #64	; 0x40
 8008c92:	eba0 000a 	sub.w	r0, r0, sl
 8008c96:	fa03 f000 	lsl.w	r0, r3, r0
 8008c9a:	9b04      	ldr	r3, [sp, #16]
 8008c9c:	4303      	orrs	r3, r0
 8008c9e:	3401      	adds	r4, #1
 8008ca0:	9304      	str	r3, [sp, #16]
 8008ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca6:	4826      	ldr	r0, [pc, #152]	; (8008d40 <_svfiprintf_r+0x1f0>)
 8008ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cac:	2206      	movs	r2, #6
 8008cae:	f7f7 fab7 	bl	8000220 <memchr>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d038      	beq.n	8008d28 <_svfiprintf_r+0x1d8>
 8008cb6:	4b23      	ldr	r3, [pc, #140]	; (8008d44 <_svfiprintf_r+0x1f4>)
 8008cb8:	bb1b      	cbnz	r3, 8008d02 <_svfiprintf_r+0x1b2>
 8008cba:	9b03      	ldr	r3, [sp, #12]
 8008cbc:	3307      	adds	r3, #7
 8008cbe:	f023 0307 	bic.w	r3, r3, #7
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	9303      	str	r3, [sp, #12]
 8008cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc8:	4433      	add	r3, r6
 8008cca:	9309      	str	r3, [sp, #36]	; 0x24
 8008ccc:	e767      	b.n	8008b9e <_svfiprintf_r+0x4e>
 8008cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	2001      	movs	r0, #1
 8008cd6:	e7a5      	b.n	8008c24 <_svfiprintf_r+0xd4>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	3401      	adds	r4, #1
 8008cdc:	9305      	str	r3, [sp, #20]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	f04f 0c0a 	mov.w	ip, #10
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cea:	3a30      	subs	r2, #48	; 0x30
 8008cec:	2a09      	cmp	r2, #9
 8008cee:	d903      	bls.n	8008cf8 <_svfiprintf_r+0x1a8>
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0c5      	beq.n	8008c80 <_svfiprintf_r+0x130>
 8008cf4:	9105      	str	r1, [sp, #20]
 8008cf6:	e7c3      	b.n	8008c80 <_svfiprintf_r+0x130>
 8008cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e7f0      	b.n	8008ce4 <_svfiprintf_r+0x194>
 8008d02:	ab03      	add	r3, sp, #12
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	462a      	mov	r2, r5
 8008d08:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <_svfiprintf_r+0x1f8>)
 8008d0a:	a904      	add	r1, sp, #16
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f3af 8000 	nop.w
 8008d12:	1c42      	adds	r2, r0, #1
 8008d14:	4606      	mov	r6, r0
 8008d16:	d1d6      	bne.n	8008cc6 <_svfiprintf_r+0x176>
 8008d18:	89ab      	ldrh	r3, [r5, #12]
 8008d1a:	065b      	lsls	r3, r3, #25
 8008d1c:	f53f af2c 	bmi.w	8008b78 <_svfiprintf_r+0x28>
 8008d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d22:	b01d      	add	sp, #116	; 0x74
 8008d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d28:	ab03      	add	r3, sp, #12
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	462a      	mov	r2, r5
 8008d2e:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <_svfiprintf_r+0x1f8>)
 8008d30:	a904      	add	r1, sp, #16
 8008d32:	4638      	mov	r0, r7
 8008d34:	f000 f87a 	bl	8008e2c <_printf_i>
 8008d38:	e7eb      	b.n	8008d12 <_svfiprintf_r+0x1c2>
 8008d3a:	bf00      	nop
 8008d3c:	080095c0 	.word	0x080095c0
 8008d40:	080095ca 	.word	0x080095ca
 8008d44:	00000000 	.word	0x00000000
 8008d48:	08008a99 	.word	0x08008a99
 8008d4c:	080095c6 	.word	0x080095c6

08008d50 <_printf_common>:
 8008d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d54:	4616      	mov	r6, r2
 8008d56:	4699      	mov	r9, r3
 8008d58:	688a      	ldr	r2, [r1, #8]
 8008d5a:	690b      	ldr	r3, [r1, #16]
 8008d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d60:	4293      	cmp	r3, r2
 8008d62:	bfb8      	it	lt
 8008d64:	4613      	movlt	r3, r2
 8008d66:	6033      	str	r3, [r6, #0]
 8008d68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	460c      	mov	r4, r1
 8008d70:	b10a      	cbz	r2, 8008d76 <_printf_common+0x26>
 8008d72:	3301      	adds	r3, #1
 8008d74:	6033      	str	r3, [r6, #0]
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	0699      	lsls	r1, r3, #26
 8008d7a:	bf42      	ittt	mi
 8008d7c:	6833      	ldrmi	r3, [r6, #0]
 8008d7e:	3302      	addmi	r3, #2
 8008d80:	6033      	strmi	r3, [r6, #0]
 8008d82:	6825      	ldr	r5, [r4, #0]
 8008d84:	f015 0506 	ands.w	r5, r5, #6
 8008d88:	d106      	bne.n	8008d98 <_printf_common+0x48>
 8008d8a:	f104 0a19 	add.w	sl, r4, #25
 8008d8e:	68e3      	ldr	r3, [r4, #12]
 8008d90:	6832      	ldr	r2, [r6, #0]
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	42ab      	cmp	r3, r5
 8008d96:	dc26      	bgt.n	8008de6 <_printf_common+0x96>
 8008d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d9c:	1e13      	subs	r3, r2, #0
 8008d9e:	6822      	ldr	r2, [r4, #0]
 8008da0:	bf18      	it	ne
 8008da2:	2301      	movne	r3, #1
 8008da4:	0692      	lsls	r2, r2, #26
 8008da6:	d42b      	bmi.n	8008e00 <_printf_common+0xb0>
 8008da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dac:	4649      	mov	r1, r9
 8008dae:	4638      	mov	r0, r7
 8008db0:	47c0      	blx	r8
 8008db2:	3001      	adds	r0, #1
 8008db4:	d01e      	beq.n	8008df4 <_printf_common+0xa4>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	68e5      	ldr	r5, [r4, #12]
 8008dba:	6832      	ldr	r2, [r6, #0]
 8008dbc:	f003 0306 	and.w	r3, r3, #6
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	bf08      	it	eq
 8008dc4:	1aad      	subeq	r5, r5, r2
 8008dc6:	68a3      	ldr	r3, [r4, #8]
 8008dc8:	6922      	ldr	r2, [r4, #16]
 8008dca:	bf0c      	ite	eq
 8008dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dd0:	2500      	movne	r5, #0
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	bfc4      	itt	gt
 8008dd6:	1a9b      	subgt	r3, r3, r2
 8008dd8:	18ed      	addgt	r5, r5, r3
 8008dda:	2600      	movs	r6, #0
 8008ddc:	341a      	adds	r4, #26
 8008dde:	42b5      	cmp	r5, r6
 8008de0:	d11a      	bne.n	8008e18 <_printf_common+0xc8>
 8008de2:	2000      	movs	r0, #0
 8008de4:	e008      	b.n	8008df8 <_printf_common+0xa8>
 8008de6:	2301      	movs	r3, #1
 8008de8:	4652      	mov	r2, sl
 8008dea:	4649      	mov	r1, r9
 8008dec:	4638      	mov	r0, r7
 8008dee:	47c0      	blx	r8
 8008df0:	3001      	adds	r0, #1
 8008df2:	d103      	bne.n	8008dfc <_printf_common+0xac>
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfc:	3501      	adds	r5, #1
 8008dfe:	e7c6      	b.n	8008d8e <_printf_common+0x3e>
 8008e00:	18e1      	adds	r1, r4, r3
 8008e02:	1c5a      	adds	r2, r3, #1
 8008e04:	2030      	movs	r0, #48	; 0x30
 8008e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e0a:	4422      	add	r2, r4
 8008e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e14:	3302      	adds	r3, #2
 8008e16:	e7c7      	b.n	8008da8 <_printf_common+0x58>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	4638      	mov	r0, r7
 8008e20:	47c0      	blx	r8
 8008e22:	3001      	adds	r0, #1
 8008e24:	d0e6      	beq.n	8008df4 <_printf_common+0xa4>
 8008e26:	3601      	adds	r6, #1
 8008e28:	e7d9      	b.n	8008dde <_printf_common+0x8e>
	...

08008e2c <_printf_i>:
 8008e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e30:	7e0f      	ldrb	r7, [r1, #24]
 8008e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e34:	2f78      	cmp	r7, #120	; 0x78
 8008e36:	4691      	mov	r9, r2
 8008e38:	4680      	mov	r8, r0
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	469a      	mov	sl, r3
 8008e3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e42:	d807      	bhi.n	8008e54 <_printf_i+0x28>
 8008e44:	2f62      	cmp	r7, #98	; 0x62
 8008e46:	d80a      	bhi.n	8008e5e <_printf_i+0x32>
 8008e48:	2f00      	cmp	r7, #0
 8008e4a:	f000 80d8 	beq.w	8008ffe <_printf_i+0x1d2>
 8008e4e:	2f58      	cmp	r7, #88	; 0x58
 8008e50:	f000 80a3 	beq.w	8008f9a <_printf_i+0x16e>
 8008e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e5c:	e03a      	b.n	8008ed4 <_printf_i+0xa8>
 8008e5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e62:	2b15      	cmp	r3, #21
 8008e64:	d8f6      	bhi.n	8008e54 <_printf_i+0x28>
 8008e66:	a101      	add	r1, pc, #4	; (adr r1, 8008e6c <_printf_i+0x40>)
 8008e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e6c:	08008ec5 	.word	0x08008ec5
 8008e70:	08008ed9 	.word	0x08008ed9
 8008e74:	08008e55 	.word	0x08008e55
 8008e78:	08008e55 	.word	0x08008e55
 8008e7c:	08008e55 	.word	0x08008e55
 8008e80:	08008e55 	.word	0x08008e55
 8008e84:	08008ed9 	.word	0x08008ed9
 8008e88:	08008e55 	.word	0x08008e55
 8008e8c:	08008e55 	.word	0x08008e55
 8008e90:	08008e55 	.word	0x08008e55
 8008e94:	08008e55 	.word	0x08008e55
 8008e98:	08008fe5 	.word	0x08008fe5
 8008e9c:	08008f09 	.word	0x08008f09
 8008ea0:	08008fc7 	.word	0x08008fc7
 8008ea4:	08008e55 	.word	0x08008e55
 8008ea8:	08008e55 	.word	0x08008e55
 8008eac:	08009007 	.word	0x08009007
 8008eb0:	08008e55 	.word	0x08008e55
 8008eb4:	08008f09 	.word	0x08008f09
 8008eb8:	08008e55 	.word	0x08008e55
 8008ebc:	08008e55 	.word	0x08008e55
 8008ec0:	08008fcf 	.word	0x08008fcf
 8008ec4:	682b      	ldr	r3, [r5, #0]
 8008ec6:	1d1a      	adds	r2, r3, #4
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	602a      	str	r2, [r5, #0]
 8008ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e0a3      	b.n	8009020 <_printf_i+0x1f4>
 8008ed8:	6820      	ldr	r0, [r4, #0]
 8008eda:	6829      	ldr	r1, [r5, #0]
 8008edc:	0606      	lsls	r6, r0, #24
 8008ede:	f101 0304 	add.w	r3, r1, #4
 8008ee2:	d50a      	bpl.n	8008efa <_printf_i+0xce>
 8008ee4:	680e      	ldr	r6, [r1, #0]
 8008ee6:	602b      	str	r3, [r5, #0]
 8008ee8:	2e00      	cmp	r6, #0
 8008eea:	da03      	bge.n	8008ef4 <_printf_i+0xc8>
 8008eec:	232d      	movs	r3, #45	; 0x2d
 8008eee:	4276      	negs	r6, r6
 8008ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef4:	485e      	ldr	r0, [pc, #376]	; (8009070 <_printf_i+0x244>)
 8008ef6:	230a      	movs	r3, #10
 8008ef8:	e019      	b.n	8008f2e <_printf_i+0x102>
 8008efa:	680e      	ldr	r6, [r1, #0]
 8008efc:	602b      	str	r3, [r5, #0]
 8008efe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008f02:	bf18      	it	ne
 8008f04:	b236      	sxthne	r6, r6
 8008f06:	e7ef      	b.n	8008ee8 <_printf_i+0xbc>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	6820      	ldr	r0, [r4, #0]
 8008f0c:	1d19      	adds	r1, r3, #4
 8008f0e:	6029      	str	r1, [r5, #0]
 8008f10:	0601      	lsls	r1, r0, #24
 8008f12:	d501      	bpl.n	8008f18 <_printf_i+0xec>
 8008f14:	681e      	ldr	r6, [r3, #0]
 8008f16:	e002      	b.n	8008f1e <_printf_i+0xf2>
 8008f18:	0646      	lsls	r6, r0, #25
 8008f1a:	d5fb      	bpl.n	8008f14 <_printf_i+0xe8>
 8008f1c:	881e      	ldrh	r6, [r3, #0]
 8008f1e:	4854      	ldr	r0, [pc, #336]	; (8009070 <_printf_i+0x244>)
 8008f20:	2f6f      	cmp	r7, #111	; 0x6f
 8008f22:	bf0c      	ite	eq
 8008f24:	2308      	moveq	r3, #8
 8008f26:	230a      	movne	r3, #10
 8008f28:	2100      	movs	r1, #0
 8008f2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f2e:	6865      	ldr	r5, [r4, #4]
 8008f30:	60a5      	str	r5, [r4, #8]
 8008f32:	2d00      	cmp	r5, #0
 8008f34:	bfa2      	ittt	ge
 8008f36:	6821      	ldrge	r1, [r4, #0]
 8008f38:	f021 0104 	bicge.w	r1, r1, #4
 8008f3c:	6021      	strge	r1, [r4, #0]
 8008f3e:	b90e      	cbnz	r6, 8008f44 <_printf_i+0x118>
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	d04d      	beq.n	8008fe0 <_printf_i+0x1b4>
 8008f44:	4615      	mov	r5, r2
 8008f46:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f4a:	fb03 6711 	mls	r7, r3, r1, r6
 8008f4e:	5dc7      	ldrb	r7, [r0, r7]
 8008f50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f54:	4637      	mov	r7, r6
 8008f56:	42bb      	cmp	r3, r7
 8008f58:	460e      	mov	r6, r1
 8008f5a:	d9f4      	bls.n	8008f46 <_printf_i+0x11a>
 8008f5c:	2b08      	cmp	r3, #8
 8008f5e:	d10b      	bne.n	8008f78 <_printf_i+0x14c>
 8008f60:	6823      	ldr	r3, [r4, #0]
 8008f62:	07de      	lsls	r6, r3, #31
 8008f64:	d508      	bpl.n	8008f78 <_printf_i+0x14c>
 8008f66:	6923      	ldr	r3, [r4, #16]
 8008f68:	6861      	ldr	r1, [r4, #4]
 8008f6a:	4299      	cmp	r1, r3
 8008f6c:	bfde      	ittt	le
 8008f6e:	2330      	movle	r3, #48	; 0x30
 8008f70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f78:	1b52      	subs	r2, r2, r5
 8008f7a:	6122      	str	r2, [r4, #16]
 8008f7c:	f8cd a000 	str.w	sl, [sp]
 8008f80:	464b      	mov	r3, r9
 8008f82:	aa03      	add	r2, sp, #12
 8008f84:	4621      	mov	r1, r4
 8008f86:	4640      	mov	r0, r8
 8008f88:	f7ff fee2 	bl	8008d50 <_printf_common>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d14c      	bne.n	800902a <_printf_i+0x1fe>
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295
 8008f94:	b004      	add	sp, #16
 8008f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9a:	4835      	ldr	r0, [pc, #212]	; (8009070 <_printf_i+0x244>)
 8008f9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008fa0:	6829      	ldr	r1, [r5, #0]
 8008fa2:	6823      	ldr	r3, [r4, #0]
 8008fa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fa8:	6029      	str	r1, [r5, #0]
 8008faa:	061d      	lsls	r5, r3, #24
 8008fac:	d514      	bpl.n	8008fd8 <_printf_i+0x1ac>
 8008fae:	07df      	lsls	r7, r3, #31
 8008fb0:	bf44      	itt	mi
 8008fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8008fb6:	6023      	strmi	r3, [r4, #0]
 8008fb8:	b91e      	cbnz	r6, 8008fc2 <_printf_i+0x196>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	f023 0320 	bic.w	r3, r3, #32
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	2310      	movs	r3, #16
 8008fc4:	e7b0      	b.n	8008f28 <_printf_i+0xfc>
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	f043 0320 	orr.w	r3, r3, #32
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	2378      	movs	r3, #120	; 0x78
 8008fd0:	4828      	ldr	r0, [pc, #160]	; (8009074 <_printf_i+0x248>)
 8008fd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fd6:	e7e3      	b.n	8008fa0 <_printf_i+0x174>
 8008fd8:	0659      	lsls	r1, r3, #25
 8008fda:	bf48      	it	mi
 8008fdc:	b2b6      	uxthmi	r6, r6
 8008fde:	e7e6      	b.n	8008fae <_printf_i+0x182>
 8008fe0:	4615      	mov	r5, r2
 8008fe2:	e7bb      	b.n	8008f5c <_printf_i+0x130>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	6826      	ldr	r6, [r4, #0]
 8008fe8:	6961      	ldr	r1, [r4, #20]
 8008fea:	1d18      	adds	r0, r3, #4
 8008fec:	6028      	str	r0, [r5, #0]
 8008fee:	0635      	lsls	r5, r6, #24
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	d501      	bpl.n	8008ff8 <_printf_i+0x1cc>
 8008ff4:	6019      	str	r1, [r3, #0]
 8008ff6:	e002      	b.n	8008ffe <_printf_i+0x1d2>
 8008ff8:	0670      	lsls	r0, r6, #25
 8008ffa:	d5fb      	bpl.n	8008ff4 <_printf_i+0x1c8>
 8008ffc:	8019      	strh	r1, [r3, #0]
 8008ffe:	2300      	movs	r3, #0
 8009000:	6123      	str	r3, [r4, #16]
 8009002:	4615      	mov	r5, r2
 8009004:	e7ba      	b.n	8008f7c <_printf_i+0x150>
 8009006:	682b      	ldr	r3, [r5, #0]
 8009008:	1d1a      	adds	r2, r3, #4
 800900a:	602a      	str	r2, [r5, #0]
 800900c:	681d      	ldr	r5, [r3, #0]
 800900e:	6862      	ldr	r2, [r4, #4]
 8009010:	2100      	movs	r1, #0
 8009012:	4628      	mov	r0, r5
 8009014:	f7f7 f904 	bl	8000220 <memchr>
 8009018:	b108      	cbz	r0, 800901e <_printf_i+0x1f2>
 800901a:	1b40      	subs	r0, r0, r5
 800901c:	6060      	str	r0, [r4, #4]
 800901e:	6863      	ldr	r3, [r4, #4]
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	2300      	movs	r3, #0
 8009024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009028:	e7a8      	b.n	8008f7c <_printf_i+0x150>
 800902a:	6923      	ldr	r3, [r4, #16]
 800902c:	462a      	mov	r2, r5
 800902e:	4649      	mov	r1, r9
 8009030:	4640      	mov	r0, r8
 8009032:	47d0      	blx	sl
 8009034:	3001      	adds	r0, #1
 8009036:	d0ab      	beq.n	8008f90 <_printf_i+0x164>
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	079b      	lsls	r3, r3, #30
 800903c:	d413      	bmi.n	8009066 <_printf_i+0x23a>
 800903e:	68e0      	ldr	r0, [r4, #12]
 8009040:	9b03      	ldr	r3, [sp, #12]
 8009042:	4298      	cmp	r0, r3
 8009044:	bfb8      	it	lt
 8009046:	4618      	movlt	r0, r3
 8009048:	e7a4      	b.n	8008f94 <_printf_i+0x168>
 800904a:	2301      	movs	r3, #1
 800904c:	4632      	mov	r2, r6
 800904e:	4649      	mov	r1, r9
 8009050:	4640      	mov	r0, r8
 8009052:	47d0      	blx	sl
 8009054:	3001      	adds	r0, #1
 8009056:	d09b      	beq.n	8008f90 <_printf_i+0x164>
 8009058:	3501      	adds	r5, #1
 800905a:	68e3      	ldr	r3, [r4, #12]
 800905c:	9903      	ldr	r1, [sp, #12]
 800905e:	1a5b      	subs	r3, r3, r1
 8009060:	42ab      	cmp	r3, r5
 8009062:	dcf2      	bgt.n	800904a <_printf_i+0x21e>
 8009064:	e7eb      	b.n	800903e <_printf_i+0x212>
 8009066:	2500      	movs	r5, #0
 8009068:	f104 0619 	add.w	r6, r4, #25
 800906c:	e7f5      	b.n	800905a <_printf_i+0x22e>
 800906e:	bf00      	nop
 8009070:	080095d1 	.word	0x080095d1
 8009074:	080095e2 	.word	0x080095e2

08009078 <memcpy>:
 8009078:	440a      	add	r2, r1
 800907a:	4291      	cmp	r1, r2
 800907c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009080:	d100      	bne.n	8009084 <memcpy+0xc>
 8009082:	4770      	bx	lr
 8009084:	b510      	push	{r4, lr}
 8009086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800908a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800908e:	4291      	cmp	r1, r2
 8009090:	d1f9      	bne.n	8009086 <memcpy+0xe>
 8009092:	bd10      	pop	{r4, pc}

08009094 <memmove>:
 8009094:	4288      	cmp	r0, r1
 8009096:	b510      	push	{r4, lr}
 8009098:	eb01 0402 	add.w	r4, r1, r2
 800909c:	d902      	bls.n	80090a4 <memmove+0x10>
 800909e:	4284      	cmp	r4, r0
 80090a0:	4623      	mov	r3, r4
 80090a2:	d807      	bhi.n	80090b4 <memmove+0x20>
 80090a4:	1e43      	subs	r3, r0, #1
 80090a6:	42a1      	cmp	r1, r4
 80090a8:	d008      	beq.n	80090bc <memmove+0x28>
 80090aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090b2:	e7f8      	b.n	80090a6 <memmove+0x12>
 80090b4:	4402      	add	r2, r0
 80090b6:	4601      	mov	r1, r0
 80090b8:	428a      	cmp	r2, r1
 80090ba:	d100      	bne.n	80090be <memmove+0x2a>
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090c6:	e7f7      	b.n	80090b8 <memmove+0x24>

080090c8 <_free_r>:
 80090c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090ca:	2900      	cmp	r1, #0
 80090cc:	d044      	beq.n	8009158 <_free_r+0x90>
 80090ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d2:	9001      	str	r0, [sp, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f1a1 0404 	sub.w	r4, r1, #4
 80090da:	bfb8      	it	lt
 80090dc:	18e4      	addlt	r4, r4, r3
 80090de:	f000 f913 	bl	8009308 <__malloc_lock>
 80090e2:	4a1e      	ldr	r2, [pc, #120]	; (800915c <_free_r+0x94>)
 80090e4:	9801      	ldr	r0, [sp, #4]
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	b933      	cbnz	r3, 80090f8 <_free_r+0x30>
 80090ea:	6063      	str	r3, [r4, #4]
 80090ec:	6014      	str	r4, [r2, #0]
 80090ee:	b003      	add	sp, #12
 80090f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090f4:	f000 b90e 	b.w	8009314 <__malloc_unlock>
 80090f8:	42a3      	cmp	r3, r4
 80090fa:	d908      	bls.n	800910e <_free_r+0x46>
 80090fc:	6825      	ldr	r5, [r4, #0]
 80090fe:	1961      	adds	r1, r4, r5
 8009100:	428b      	cmp	r3, r1
 8009102:	bf01      	itttt	eq
 8009104:	6819      	ldreq	r1, [r3, #0]
 8009106:	685b      	ldreq	r3, [r3, #4]
 8009108:	1949      	addeq	r1, r1, r5
 800910a:	6021      	streq	r1, [r4, #0]
 800910c:	e7ed      	b.n	80090ea <_free_r+0x22>
 800910e:	461a      	mov	r2, r3
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	b10b      	cbz	r3, 8009118 <_free_r+0x50>
 8009114:	42a3      	cmp	r3, r4
 8009116:	d9fa      	bls.n	800910e <_free_r+0x46>
 8009118:	6811      	ldr	r1, [r2, #0]
 800911a:	1855      	adds	r5, r2, r1
 800911c:	42a5      	cmp	r5, r4
 800911e:	d10b      	bne.n	8009138 <_free_r+0x70>
 8009120:	6824      	ldr	r4, [r4, #0]
 8009122:	4421      	add	r1, r4
 8009124:	1854      	adds	r4, r2, r1
 8009126:	42a3      	cmp	r3, r4
 8009128:	6011      	str	r1, [r2, #0]
 800912a:	d1e0      	bne.n	80090ee <_free_r+0x26>
 800912c:	681c      	ldr	r4, [r3, #0]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	6053      	str	r3, [r2, #4]
 8009132:	4421      	add	r1, r4
 8009134:	6011      	str	r1, [r2, #0]
 8009136:	e7da      	b.n	80090ee <_free_r+0x26>
 8009138:	d902      	bls.n	8009140 <_free_r+0x78>
 800913a:	230c      	movs	r3, #12
 800913c:	6003      	str	r3, [r0, #0]
 800913e:	e7d6      	b.n	80090ee <_free_r+0x26>
 8009140:	6825      	ldr	r5, [r4, #0]
 8009142:	1961      	adds	r1, r4, r5
 8009144:	428b      	cmp	r3, r1
 8009146:	bf04      	itt	eq
 8009148:	6819      	ldreq	r1, [r3, #0]
 800914a:	685b      	ldreq	r3, [r3, #4]
 800914c:	6063      	str	r3, [r4, #4]
 800914e:	bf04      	itt	eq
 8009150:	1949      	addeq	r1, r1, r5
 8009152:	6021      	streq	r1, [r4, #0]
 8009154:	6054      	str	r4, [r2, #4]
 8009156:	e7ca      	b.n	80090ee <_free_r+0x26>
 8009158:	b003      	add	sp, #12
 800915a:	bd30      	pop	{r4, r5, pc}
 800915c:	20000808 	.word	0x20000808

08009160 <sbrk_aligned>:
 8009160:	b570      	push	{r4, r5, r6, lr}
 8009162:	4e0e      	ldr	r6, [pc, #56]	; (800919c <sbrk_aligned+0x3c>)
 8009164:	460c      	mov	r4, r1
 8009166:	6831      	ldr	r1, [r6, #0]
 8009168:	4605      	mov	r5, r0
 800916a:	b911      	cbnz	r1, 8009172 <sbrk_aligned+0x12>
 800916c:	f000 f8bc 	bl	80092e8 <_sbrk_r>
 8009170:	6030      	str	r0, [r6, #0]
 8009172:	4621      	mov	r1, r4
 8009174:	4628      	mov	r0, r5
 8009176:	f000 f8b7 	bl	80092e8 <_sbrk_r>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	d00a      	beq.n	8009194 <sbrk_aligned+0x34>
 800917e:	1cc4      	adds	r4, r0, #3
 8009180:	f024 0403 	bic.w	r4, r4, #3
 8009184:	42a0      	cmp	r0, r4
 8009186:	d007      	beq.n	8009198 <sbrk_aligned+0x38>
 8009188:	1a21      	subs	r1, r4, r0
 800918a:	4628      	mov	r0, r5
 800918c:	f000 f8ac 	bl	80092e8 <_sbrk_r>
 8009190:	3001      	adds	r0, #1
 8009192:	d101      	bne.n	8009198 <sbrk_aligned+0x38>
 8009194:	f04f 34ff 	mov.w	r4, #4294967295
 8009198:	4620      	mov	r0, r4
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	2000080c 	.word	0x2000080c

080091a0 <_malloc_r>:
 80091a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a4:	1ccd      	adds	r5, r1, #3
 80091a6:	f025 0503 	bic.w	r5, r5, #3
 80091aa:	3508      	adds	r5, #8
 80091ac:	2d0c      	cmp	r5, #12
 80091ae:	bf38      	it	cc
 80091b0:	250c      	movcc	r5, #12
 80091b2:	2d00      	cmp	r5, #0
 80091b4:	4607      	mov	r7, r0
 80091b6:	db01      	blt.n	80091bc <_malloc_r+0x1c>
 80091b8:	42a9      	cmp	r1, r5
 80091ba:	d905      	bls.n	80091c8 <_malloc_r+0x28>
 80091bc:	230c      	movs	r3, #12
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	2600      	movs	r6, #0
 80091c2:	4630      	mov	r0, r6
 80091c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091c8:	4e2e      	ldr	r6, [pc, #184]	; (8009284 <_malloc_r+0xe4>)
 80091ca:	f000 f89d 	bl	8009308 <__malloc_lock>
 80091ce:	6833      	ldr	r3, [r6, #0]
 80091d0:	461c      	mov	r4, r3
 80091d2:	bb34      	cbnz	r4, 8009222 <_malloc_r+0x82>
 80091d4:	4629      	mov	r1, r5
 80091d6:	4638      	mov	r0, r7
 80091d8:	f7ff ffc2 	bl	8009160 <sbrk_aligned>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	4604      	mov	r4, r0
 80091e0:	d14d      	bne.n	800927e <_malloc_r+0xde>
 80091e2:	6834      	ldr	r4, [r6, #0]
 80091e4:	4626      	mov	r6, r4
 80091e6:	2e00      	cmp	r6, #0
 80091e8:	d140      	bne.n	800926c <_malloc_r+0xcc>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	4631      	mov	r1, r6
 80091ee:	4638      	mov	r0, r7
 80091f0:	eb04 0803 	add.w	r8, r4, r3
 80091f4:	f000 f878 	bl	80092e8 <_sbrk_r>
 80091f8:	4580      	cmp	r8, r0
 80091fa:	d13a      	bne.n	8009272 <_malloc_r+0xd2>
 80091fc:	6821      	ldr	r1, [r4, #0]
 80091fe:	3503      	adds	r5, #3
 8009200:	1a6d      	subs	r5, r5, r1
 8009202:	f025 0503 	bic.w	r5, r5, #3
 8009206:	3508      	adds	r5, #8
 8009208:	2d0c      	cmp	r5, #12
 800920a:	bf38      	it	cc
 800920c:	250c      	movcc	r5, #12
 800920e:	4629      	mov	r1, r5
 8009210:	4638      	mov	r0, r7
 8009212:	f7ff ffa5 	bl	8009160 <sbrk_aligned>
 8009216:	3001      	adds	r0, #1
 8009218:	d02b      	beq.n	8009272 <_malloc_r+0xd2>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	442b      	add	r3, r5
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	e00e      	b.n	8009240 <_malloc_r+0xa0>
 8009222:	6822      	ldr	r2, [r4, #0]
 8009224:	1b52      	subs	r2, r2, r5
 8009226:	d41e      	bmi.n	8009266 <_malloc_r+0xc6>
 8009228:	2a0b      	cmp	r2, #11
 800922a:	d916      	bls.n	800925a <_malloc_r+0xba>
 800922c:	1961      	adds	r1, r4, r5
 800922e:	42a3      	cmp	r3, r4
 8009230:	6025      	str	r5, [r4, #0]
 8009232:	bf18      	it	ne
 8009234:	6059      	strne	r1, [r3, #4]
 8009236:	6863      	ldr	r3, [r4, #4]
 8009238:	bf08      	it	eq
 800923a:	6031      	streq	r1, [r6, #0]
 800923c:	5162      	str	r2, [r4, r5]
 800923e:	604b      	str	r3, [r1, #4]
 8009240:	4638      	mov	r0, r7
 8009242:	f104 060b 	add.w	r6, r4, #11
 8009246:	f000 f865 	bl	8009314 <__malloc_unlock>
 800924a:	f026 0607 	bic.w	r6, r6, #7
 800924e:	1d23      	adds	r3, r4, #4
 8009250:	1af2      	subs	r2, r6, r3
 8009252:	d0b6      	beq.n	80091c2 <_malloc_r+0x22>
 8009254:	1b9b      	subs	r3, r3, r6
 8009256:	50a3      	str	r3, [r4, r2]
 8009258:	e7b3      	b.n	80091c2 <_malloc_r+0x22>
 800925a:	6862      	ldr	r2, [r4, #4]
 800925c:	42a3      	cmp	r3, r4
 800925e:	bf0c      	ite	eq
 8009260:	6032      	streq	r2, [r6, #0]
 8009262:	605a      	strne	r2, [r3, #4]
 8009264:	e7ec      	b.n	8009240 <_malloc_r+0xa0>
 8009266:	4623      	mov	r3, r4
 8009268:	6864      	ldr	r4, [r4, #4]
 800926a:	e7b2      	b.n	80091d2 <_malloc_r+0x32>
 800926c:	4634      	mov	r4, r6
 800926e:	6876      	ldr	r6, [r6, #4]
 8009270:	e7b9      	b.n	80091e6 <_malloc_r+0x46>
 8009272:	230c      	movs	r3, #12
 8009274:	603b      	str	r3, [r7, #0]
 8009276:	4638      	mov	r0, r7
 8009278:	f000 f84c 	bl	8009314 <__malloc_unlock>
 800927c:	e7a1      	b.n	80091c2 <_malloc_r+0x22>
 800927e:	6025      	str	r5, [r4, #0]
 8009280:	e7de      	b.n	8009240 <_malloc_r+0xa0>
 8009282:	bf00      	nop
 8009284:	20000808 	.word	0x20000808

08009288 <_realloc_r>:
 8009288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800928c:	4680      	mov	r8, r0
 800928e:	4614      	mov	r4, r2
 8009290:	460e      	mov	r6, r1
 8009292:	b921      	cbnz	r1, 800929e <_realloc_r+0x16>
 8009294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	4611      	mov	r1, r2
 800929a:	f7ff bf81 	b.w	80091a0 <_malloc_r>
 800929e:	b92a      	cbnz	r2, 80092ac <_realloc_r+0x24>
 80092a0:	f7ff ff12 	bl	80090c8 <_free_r>
 80092a4:	4625      	mov	r5, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ac:	f000 f838 	bl	8009320 <_malloc_usable_size_r>
 80092b0:	4284      	cmp	r4, r0
 80092b2:	4607      	mov	r7, r0
 80092b4:	d802      	bhi.n	80092bc <_realloc_r+0x34>
 80092b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092ba:	d812      	bhi.n	80092e2 <_realloc_r+0x5a>
 80092bc:	4621      	mov	r1, r4
 80092be:	4640      	mov	r0, r8
 80092c0:	f7ff ff6e 	bl	80091a0 <_malloc_r>
 80092c4:	4605      	mov	r5, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d0ed      	beq.n	80092a6 <_realloc_r+0x1e>
 80092ca:	42bc      	cmp	r4, r7
 80092cc:	4622      	mov	r2, r4
 80092ce:	4631      	mov	r1, r6
 80092d0:	bf28      	it	cs
 80092d2:	463a      	movcs	r2, r7
 80092d4:	f7ff fed0 	bl	8009078 <memcpy>
 80092d8:	4631      	mov	r1, r6
 80092da:	4640      	mov	r0, r8
 80092dc:	f7ff fef4 	bl	80090c8 <_free_r>
 80092e0:	e7e1      	b.n	80092a6 <_realloc_r+0x1e>
 80092e2:	4635      	mov	r5, r6
 80092e4:	e7df      	b.n	80092a6 <_realloc_r+0x1e>
	...

080092e8 <_sbrk_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d06      	ldr	r5, [pc, #24]	; (8009304 <_sbrk_r+0x1c>)
 80092ec:	2300      	movs	r3, #0
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	602b      	str	r3, [r5, #0]
 80092f4:	f7f8 f91c 	bl	8001530 <_sbrk>
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	d102      	bne.n	8009302 <_sbrk_r+0x1a>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	b103      	cbz	r3, 8009302 <_sbrk_r+0x1a>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	20000810 	.word	0x20000810

08009308 <__malloc_lock>:
 8009308:	4801      	ldr	r0, [pc, #4]	; (8009310 <__malloc_lock+0x8>)
 800930a:	f000 b811 	b.w	8009330 <__retarget_lock_acquire_recursive>
 800930e:	bf00      	nop
 8009310:	20000814 	.word	0x20000814

08009314 <__malloc_unlock>:
 8009314:	4801      	ldr	r0, [pc, #4]	; (800931c <__malloc_unlock+0x8>)
 8009316:	f000 b80c 	b.w	8009332 <__retarget_lock_release_recursive>
 800931a:	bf00      	nop
 800931c:	20000814 	.word	0x20000814

08009320 <_malloc_usable_size_r>:
 8009320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009324:	1f18      	subs	r0, r3, #4
 8009326:	2b00      	cmp	r3, #0
 8009328:	bfbc      	itt	lt
 800932a:	580b      	ldrlt	r3, [r1, r0]
 800932c:	18c0      	addlt	r0, r0, r3
 800932e:	4770      	bx	lr

08009330 <__retarget_lock_acquire_recursive>:
 8009330:	4770      	bx	lr

08009332 <__retarget_lock_release_recursive>:
 8009332:	4770      	bx	lr

08009334 <_init>:
 8009334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009336:	bf00      	nop
 8009338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800933a:	bc08      	pop	{r3}
 800933c:	469e      	mov	lr, r3
 800933e:	4770      	bx	lr

08009340 <_fini>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr
