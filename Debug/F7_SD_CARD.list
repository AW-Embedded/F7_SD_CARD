
F7_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007680  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007934  08007934  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007934  08007934  00017934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800793c  0800793c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800793c  0800793c  0001793c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007940  08007940  00017940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  20000070  080079b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200005e4  080079b4  000205e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fee  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307a  00000000  00000000  0003408e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00037108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00038018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293be  00000000  00000000  00038db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168a1  00000000  00000000  0006216e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef20a  00000000  00000000  00078a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167c19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f64  00000000  00000000  00167c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007838 	.word	0x08007838

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007838 	.word	0x08007838

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_DMA_Init+0x48>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a0f      	ldr	r2, [pc, #60]	; (800060c <MX_DMA_Init+0x48>)
 80005d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_DMA_Init+0x48>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	203b      	movs	r0, #59	; 0x3b
 80005e8:	f001 f98d 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005ec:	203b      	movs	r0, #59	; 0x3b
 80005ee:	f001 f9a6 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2045      	movs	r0, #69	; 0x45
 80005f8:	f001 f985 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005fc:	2045      	movs	r0, #69	; 0x45
 80005fe:	f001 f99e 	bl	800193e <HAL_NVIC_EnableIRQ>

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800

08000610 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b090      	sub	sp, #64	; 0x40
 8000614:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000626:	4bad      	ldr	r3, [pc, #692]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4aac      	ldr	r2, [pc, #688]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4baa      	ldr	r3, [pc, #680]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0310 	and.w	r3, r3, #16
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
 800063c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063e:	4ba7      	ldr	r3, [pc, #668]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4aa6      	ldr	r2, [pc, #664]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4ba4      	ldr	r3, [pc, #656]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000652:	627b      	str	r3, [r7, #36]	; 0x24
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4ba1      	ldr	r3, [pc, #644]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4aa0      	ldr	r2, [pc, #640]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b9e      	ldr	r3, [pc, #632]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	623b      	str	r3, [r7, #32]
 800066c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066e:	4b9b      	ldr	r3, [pc, #620]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a9a      	ldr	r2, [pc, #616]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000674:	f043 0308 	orr.w	r3, r3, #8
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b98      	ldr	r3, [pc, #608]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0308 	and.w	r3, r3, #8
 8000682:	61fb      	str	r3, [r7, #28]
 8000684:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b95      	ldr	r3, [pc, #596]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a94      	ldr	r2, [pc, #592]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b92      	ldr	r3, [pc, #584]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b8f      	ldr	r3, [pc, #572]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a8e      	ldr	r2, [pc, #568]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b8c      	ldr	r3, [pc, #560]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006b6:	4b89      	ldr	r3, [pc, #548]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a88      	ldr	r2, [pc, #544]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b86      	ldr	r3, [pc, #536]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ce:	4b83      	ldr	r3, [pc, #524]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a82      	ldr	r2, [pc, #520]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b80      	ldr	r3, [pc, #512]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80006e6:	4b7d      	ldr	r3, [pc, #500]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a7c      	ldr	r2, [pc, #496]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b7a      	ldr	r3, [pc, #488]	; (80008dc <MX_GPIO_Init+0x2cc>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006fe:	4b77      	ldr	r3, [pc, #476]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a76      	ldr	r2, [pc, #472]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000704:	f043 0320 	orr.w	r3, r3, #32
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b74      	ldr	r3, [pc, #464]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0320 	and.w	r3, r3, #32
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	4b71      	ldr	r3, [pc, #452]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a70      	ldr	r2, [pc, #448]	; (80008dc <MX_GPIO_Init+0x2cc>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b6e      	ldr	r3, [pc, #440]	; (80008dc <MX_GPIO_Init+0x2cc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2120      	movs	r1, #32
 8000732:	486b      	ldr	r0, [pc, #428]	; (80008e0 <MX_GPIO_Init+0x2d0>)
 8000734:	f001 fe88 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f241 010c 	movw	r1, #4108	; 0x100c
 800073e:	4869      	ldr	r0, [pc, #420]	; (80008e4 <MX_GPIO_Init+0x2d4>)
 8000740:	f001 fe82 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2108      	movs	r1, #8
 8000748:	4867      	ldr	r0, [pc, #412]	; (80008e8 <MX_GPIO_Init+0x2d8>)
 800074a:	f001 fe7d 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000754:	4865      	ldr	r0, [pc, #404]	; (80008ec <MX_GPIO_Init+0x2dc>)
 8000756:	f001 fe77 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	21c8      	movs	r1, #200	; 0xc8
 800075e:	4864      	ldr	r0, [pc, #400]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 8000760:	f001 fe72 	bl	8002448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000774:	230e      	movs	r3, #14
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800077c:	4619      	mov	r1, r3
 800077e:	485d      	ldr	r0, [pc, #372]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 8000780:	f001 fc9e 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000784:	2308      	movs	r3, #8
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000794:	4619      	mov	r1, r3
 8000796:	4857      	ldr	r0, [pc, #348]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 8000798:	f001 fc92 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800079c:	2304      	movs	r3, #4
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007ac:	2309      	movs	r3, #9
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	484f      	ldr	r0, [pc, #316]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 80007b8:	f001 fc82 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007bc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ce:	230b      	movs	r3, #11
 80007d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d6:	4619      	mov	r1, r3
 80007d8:	4845      	ldr	r0, [pc, #276]	; (80008f0 <MX_GPIO_Init+0x2e0>)
 80007da:	f001 fc71 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ec:	2303      	movs	r3, #3
 80007ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007f0:	230c      	movs	r3, #12
 80007f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f8:	4619      	mov	r1, r3
 80007fa:	483e      	ldr	r0, [pc, #248]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 80007fc:	f001 fc60 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000800:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000806:	2312      	movs	r3, #18
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000812:	2304      	movs	r3, #4
 8000814:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081a:	4619      	mov	r1, r3
 800081c:	4836      	ldr	r0, [pc, #216]	; (80008f8 <MX_GPIO_Init+0x2e8>)
 800081e:	f001 fc4f 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000822:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000834:	230a      	movs	r3, #10
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083c:	4619      	mov	r1, r3
 800083e:	482e      	ldr	r0, [pc, #184]	; (80008f8 <MX_GPIO_Init+0x2e8>)
 8000840:	f001 fc3e 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000844:	2310      	movs	r3, #16
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000854:	2302      	movs	r3, #2
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085c:	4619      	mov	r1, r3
 800085e:	4826      	ldr	r0, [pc, #152]	; (80008f8 <MX_GPIO_Init+0x2e8>)
 8000860:	f001 fc2e 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000874:	2308      	movs	r3, #8
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <MX_GPIO_Init+0x2d0>)
 8000880:	f001 fc1e 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8000884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000896:	2301      	movs	r3, #1
 8000898:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089e:	4619      	mov	r1, r3
 80008a0:	4816      	ldr	r0, [pc, #88]	; (80008fc <MX_GPIO_Init+0x2ec>)
 80008a2:	f001 fc0d 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008a6:	2360      	movs	r3, #96	; 0x60
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008b6:	230d      	movs	r3, #13
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_GPIO_Init+0x2e4>)
 80008c2:	f001 fbfd 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008c6:	2340      	movs	r3, #64	; 0x40
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008d6:	230a      	movs	r3, #10
 80008d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008da:	e011      	b.n	8000900 <MX_GPIO_Init+0x2f0>
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40022000 	.word	0x40022000
 80008e8:	40022800 	.word	0x40022800
 80008ec:	40021c00 	.word	0x40021c00
 80008f0:	40021800 	.word	0x40021800
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40020000 	.word	0x40020000
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000904:	4619      	mov	r1, r3
 8000906:	48bd      	ldr	r0, [pc, #756]	; (8000bfc <MX_GPIO_Init+0x5ec>)
 8000908:	f001 fbda 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800090c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800091e:	230c      	movs	r3, #12
 8000920:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000926:	4619      	mov	r1, r3
 8000928:	48b5      	ldr	r0, [pc, #724]	; (8000c00 <MX_GPIO_Init+0x5f0>)
 800092a:	f001 fbc9 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800092e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000940:	230e      	movs	r3, #14
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000948:	4619      	mov	r1, r3
 800094a:	48ae      	ldr	r0, [pc, #696]	; (8000c04 <MX_GPIO_Init+0x5f4>)
 800094c:	f001 fbb8 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000962:	4619      	mov	r1, r3
 8000964:	48a7      	ldr	r0, [pc, #668]	; (8000c04 <MX_GPIO_Init+0x5f4>)
 8000966:	f001 fbab 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097c:	4619      	mov	r1, r3
 800097e:	48a2      	ldr	r0, [pc, #648]	; (8000c08 <MX_GPIO_Init+0x5f8>)
 8000980:	f001 fb9e 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000984:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000996:	230c      	movs	r3, #12
 8000998:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099e:	4619      	mov	r1, r3
 80009a0:	4899      	ldr	r0, [pc, #612]	; (8000c08 <MX_GPIO_Init+0x5f8>)
 80009a2:	f001 fb8d 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80009a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b8:	230a      	movs	r3, #10
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c0:	4619      	mov	r1, r3
 80009c2:	4892      	ldr	r0, [pc, #584]	; (8000c0c <MX_GPIO_Init+0x5fc>)
 80009c4:	f001 fb7c 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80009c8:	23f0      	movs	r3, #240	; 0xf0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009d8:	230a      	movs	r3, #10
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e0:	4619      	mov	r1, r3
 80009e2:	488b      	ldr	r0, [pc, #556]	; (8000c10 <MX_GPIO_Init+0x600>)
 80009e4:	f001 fb6c 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009e8:	23f7      	movs	r3, #247	; 0xf7
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009f8:	230e      	movs	r3, #14
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4884      	ldr	r0, [pc, #528]	; (8000c14 <MX_GPIO_Init+0x604>)
 8000a04:	f001 fb5c 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a1a:	2309      	movs	r3, #9
 8000a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a22:	4619      	mov	r1, r3
 8000a24:	4876      	ldr	r0, [pc, #472]	; (8000c00 <MX_GPIO_Init+0x5f0>)
 8000a26:	f001 fb4b 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a3c:	230a      	movs	r3, #10
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a44:	4619      	mov	r1, r3
 8000a46:	486e      	ldr	r0, [pc, #440]	; (8000c00 <MX_GPIO_Init+0x5f0>)
 8000a48:	f001 fb3a 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a4c:	2320      	movs	r3, #32
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a60:	4619      	mov	r1, r3
 8000a62:	4869      	ldr	r0, [pc, #420]	; (8000c08 <MX_GPIO_Init+0x5f8>)
 8000a64:	f001 fb2c 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a78:	230d      	movs	r3, #13
 8000a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a80:	4619      	mov	r1, r3
 8000a82:	4861      	ldr	r0, [pc, #388]	; (8000c08 <MX_GPIO_Init+0x5f8>)
 8000a84:	f001 fb1c 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000a88:	f241 030c 	movw	r3, #4108	; 0x100c
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	485b      	ldr	r0, [pc, #364]	; (8000c10 <MX_GPIO_Init+0x600>)
 8000aa2:	f001 fb0d 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4857      	ldr	r0, [pc, #348]	; (8000c18 <MX_GPIO_Init+0x608>)
 8000abc:	f001 fb00 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000ac0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad2:	230c      	movs	r3, #12
 8000ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ada:	4619      	mov	r1, r3
 8000adc:	484f      	ldr	r0, [pc, #316]	; (8000c1c <MX_GPIO_Init+0x60c>)
 8000ade:	f001 faef 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000ae2:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000af4:	230e      	movs	r3, #14
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afc:	4619      	mov	r1, r3
 8000afe:	4844      	ldr	r0, [pc, #272]	; (8000c10 <MX_GPIO_Init+0x600>)
 8000b00:	f001 fade 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b04:	2308      	movs	r3, #8
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	483e      	ldr	r0, [pc, #248]	; (8000c14 <MX_GPIO_Init+0x604>)
 8000b1c:	f001 fad0 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b32:	230d      	movs	r3, #13
 8000b34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4830      	ldr	r0, [pc, #192]	; (8000c00 <MX_GPIO_Init+0x5f0>)
 8000b3e:	f001 fabf 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b42:	2310      	movs	r3, #16
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b52:	4619      	mov	r1, r3
 8000b54:	482c      	ldr	r0, [pc, #176]	; (8000c08 <MX_GPIO_Init+0x5f8>)
 8000b56:	f001 fab3 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b5a:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	482c      	ldr	r0, [pc, #176]	; (8000c20 <MX_GPIO_Init+0x610>)
 8000b70:	f001 faa6 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b84:	2305      	movs	r3, #5
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4820      	ldr	r0, [pc, #128]	; (8000c10 <MX_GPIO_Init+0x600>)
 8000b90:	f001 fa96 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000baa:	4619      	mov	r1, r3
 8000bac:	481c      	ldr	r0, [pc, #112]	; (8000c20 <MX_GPIO_Init+0x610>)
 8000bae:	f001 fa87 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000bb2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bc4:	230d      	movs	r3, #13
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4814      	ldr	r0, [pc, #80]	; (8000c20 <MX_GPIO_Init+0x610>)
 8000bd0:	f001 fa76 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000be4:	2302      	movs	r3, #2
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	4808      	ldr	r0, [pc, #32]	; (8000c10 <MX_GPIO_Init+0x600>)
 8000bf0:	f001 fa66 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	e014      	b.n	8000c24 <MX_GPIO_Init+0x614>
 8000bfa:	bf00      	nop
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	40021800 	.word	0x40021800
 8000c04:	40022400 	.word	0x40022400
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40022000 	.word	0x40022000
 8000c14:	40022800 	.word	0x40022800
 8000c18:	40020800 	.word	0x40020800
 8000c1c:	40021400 	.word	0x40021400
 8000c20:	40021c00 	.word	0x40021c00
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4895      	ldr	r0, [pc, #596]	; (8000e94 <MX_GPIO_Init+0x884>)
 8000c3e:	f001 fa3f 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c48:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c56:	4619      	mov	r1, r3
 8000c58:	488f      	ldr	r0, [pc, #572]	; (8000e98 <MX_GPIO_Init+0x888>)
 8000c5a:	f001 fa31 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c5e:	23c0      	movs	r3, #192	; 0xc0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c6e:	2308      	movs	r3, #8
 8000c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c76:	4619      	mov	r1, r3
 8000c78:	4888      	ldr	r0, [pc, #544]	; (8000e9c <MX_GPIO_Init+0x88c>)
 8000c7a:	f001 fa21 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c7e:	2310      	movs	r3, #16
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c8e:	230a      	movs	r3, #10
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4881      	ldr	r0, [pc, #516]	; (8000ea0 <MX_GPIO_Init+0x890>)
 8000c9a:	f001 fa11 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c9e:	2328      	movs	r3, #40	; 0x28
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cae:	230c      	movs	r3, #12
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4879      	ldr	r0, [pc, #484]	; (8000ea0 <MX_GPIO_Init+0x890>)
 8000cba:	f001 fa01 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000cbe:	23c8      	movs	r3, #200	; 0xc8
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4873      	ldr	r0, [pc, #460]	; (8000ea4 <MX_GPIO_Init+0x894>)
 8000cd6:	f001 f9f3 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000cda:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	486e      	ldr	r0, [pc, #440]	; (8000ea8 <MX_GPIO_Init+0x898>)
 8000cf0:	f001 f9e6 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d04:	230c      	movs	r3, #12
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4863      	ldr	r0, [pc, #396]	; (8000e9c <MX_GPIO_Init+0x88c>)
 8000d10:	f001 f9d6 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d14:	2305      	movs	r3, #5
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d24:	230a      	movs	r3, #10
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	485b      	ldr	r0, [pc, #364]	; (8000e9c <MX_GPIO_Init+0x88c>)
 8000d30:	f001 f9c6 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d34:	2332      	movs	r3, #50	; 0x32
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d44:	230b      	movs	r3, #11
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4853      	ldr	r0, [pc, #332]	; (8000e9c <MX_GPIO_Init+0x88c>)
 8000d50:	f001 f9b6 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d54:	2304      	movs	r3, #4
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d64:	2309      	movs	r3, #9
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	484f      	ldr	r0, [pc, #316]	; (8000eac <MX_GPIO_Init+0x89c>)
 8000d70:	f001 f9a6 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d86:	2309      	movs	r3, #9
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4847      	ldr	r0, [pc, #284]	; (8000eb0 <MX_GPIO_Init+0x8a0>)
 8000d92:	f001 f995 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d96:	2304      	movs	r3, #4
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da6:	4619      	mov	r1, r3
 8000da8:	483e      	ldr	r0, [pc, #248]	; (8000ea4 <MX_GPIO_Init+0x894>)
 8000daa:	f001 f989 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dae:	2386      	movs	r3, #134	; 0x86
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dbe:	230b      	movs	r3, #11
 8000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4832      	ldr	r0, [pc, #200]	; (8000e94 <MX_GPIO_Init+0x884>)
 8000dca:	f001 f979 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dde:	4619      	mov	r1, r3
 8000de0:	482c      	ldr	r0, [pc, #176]	; (8000e94 <MX_GPIO_Init+0x884>)
 8000de2:	f001 f96d 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000de6:	2350      	movs	r3, #80	; 0x50
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000df6:	230d      	movs	r3, #13
 8000df8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4824      	ldr	r0, [pc, #144]	; (8000e94 <MX_GPIO_Init+0x884>)
 8000e02:	f001 f95d 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e06:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0c:	2312      	movs	r3, #18
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e20:	4619      	mov	r1, r3
 8000e22:	481f      	ldr	r0, [pc, #124]	; (8000ea0 <MX_GPIO_Init+0x890>)
 8000e24:	f001 f94c 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e28:	2328      	movs	r3, #40	; 0x28
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e38:	230a      	movs	r3, #10
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e40:	4619      	mov	r1, r3
 8000e42:	4814      	ldr	r0, [pc, #80]	; (8000e94 <MX_GPIO_Init+0x884>)
 8000e44:	f001 f93c 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e48:	2340      	movs	r3, #64	; 0x40
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e58:	2309      	movs	r3, #9
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e60:	4619      	mov	r1, r3
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <MX_GPIO_Init+0x890>)
 8000e64:	f001 f92c 	bl	80020c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e68:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e82:	4619      	mov	r1, r3
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <MX_GPIO_Init+0x89c>)
 8000e86:	f001 f91b 	bl	80020c0 <HAL_GPIO_Init>

}
 8000e8a:	bf00      	nop
 8000e8c:	3740      	adds	r7, #64	; 0x40
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40022000 	.word	0x40022000
 8000e9c:	40020800 	.word	0x40020800
 8000ea0:	40021c00 	.word	0x40021c00
 8000ea4:	40021800 	.word	0x40021800
 8000ea8:	40021400 	.word	0x40021400
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	40020c00 	.word	0x40020c00

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f000 fbc8 	bl	800164e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f851 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec2:	f7ff fba5 	bl	8000610 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8000ec6:	f000 f907 	bl	80010d8 <MX_SDMMC1_SD_Init>
  MX_DMA_Init();
 8000eca:	f7ff fb7b 	bl	80005c4 <MX_DMA_Init>
  MX_FATFS_Init();
 8000ece:	f005 f8c5 	bl	800605c <MX_FATFS_Init>
  MX_USART1_UART_Init();
 8000ed2:	f000 fae1 	bl	8001498 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Time for Disco-Board USB VCP via ST-Link to enumerate */
  HAL_Delay(300);
 8000ed6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000eda:	f000 fc15 	bl	8001708 <HAL_Delay>
  //uint8_t bufferText[] = "Hello";
  //HAL_UART_Transmit(&huart1, &bufferText[0], sizeof(bufferText), 100);

  /* Check SD card present - Pin pulled low when card is inserted */
  GPIO_PinState nCardDetect = HAL_GPIO_ReadPin(uSD_Detect_GPIO_Port, uSD_Detect_Pin);
 8000ede:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee2:	4819      	ldr	r0, [pc, #100]	; (8000f48 <main+0x94>)
 8000ee4:	f001 fa98 	bl	8002418 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]

  if(nCardDetect == CARD_REMOVED)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d103      	bne.n	8000efa <main+0x46>
  {
      myprintf("SD Card not detected\r\n");
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <main+0x98>)
 8000ef4:	f000 f89e 	bl	8001034 <myprintf>
 8000ef8:	e025      	b.n	8000f46 <main+0x92>
  }
  else if(nCardDetect == CARD_INSERTED)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d122      	bne.n	8000f46 <main+0x92>
  {
      myprintf("SD Card detected\r\n");
 8000f00:	4813      	ldr	r0, [pc, #76]	; (8000f50 <main+0x9c>)
 8000f02:	f000 f897 	bl	8001034 <myprintf>

      /* Mount SD before file operations - power up / card swap */
      res = sd_mount();
 8000f06:	f000 f8c1 	bl	800108c <sd_mount>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71bb      	strb	r3, [r7, #6]
      if(res != FR_OK)
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <main+0x6c>
          myprintf("sd_mount error (%i)\r\n", res);
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	4619      	mov	r1, r3
 8000f18:	480e      	ldr	r0, [pc, #56]	; (8000f54 <main+0xa0>)
 8000f1a:	f000 f88b 	bl	8001034 <myprintf>
 8000f1e:	e002      	b.n	8000f26 <main+0x72>
      else
          myprintf("SD Mounted\r\n");
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <main+0xa4>)
 8000f22:	f000 f887 	bl	8001034 <myprintf>

      /* FatFS operations test code here */


      /* Unmount SD after file operations - power down / card swap */
      res = sd_unmount();
 8000f26:	f000 f8c5 	bl	80010b4 <sd_unmount>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71bb      	strb	r3, [r7, #6]
      if(res != FR_OK)
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <main+0x8c>
          myprintf("sd_unmount error (%i)\r\n", res);
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4808      	ldr	r0, [pc, #32]	; (8000f5c <main+0xa8>)
 8000f3a:	f000 f87b 	bl	8001034 <myprintf>
 8000f3e:	e002      	b.n	8000f46 <main+0x92>
      else
          myprintf("SD Unmounted\r\n");
 8000f40:	4807      	ldr	r0, [pc, #28]	; (8000f60 <main+0xac>)
 8000f42:	f000 f877 	bl	8001034 <myprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <main+0x92>
 8000f48:	40020800 	.word	0x40020800
 8000f4c:	08007850 	.word	0x08007850
 8000f50:	08007868 	.word	0x08007868
 8000f54:	0800787c 	.word	0x0800787c
 8000f58:	08007894 	.word	0x08007894
 8000f5c:	080078a4 	.word	0x080078a4
 8000f60:	080078bc 	.word	0x080078bc

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b094      	sub	sp, #80	; 0x50
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	2230      	movs	r2, #48	; 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f005 ffd0 	bl	8006f18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <SystemClock_Config+0xc8>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a27      	ldr	r2, [pc, #156]	; (800102c <SystemClock_Config+0xc8>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <SystemClock_Config+0xc8>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <SystemClock_Config+0xcc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <SystemClock_Config+0xcc>)
 8000faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <SystemClock_Config+0xcc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000fd4:	2332      	movs	r3, #50	; 0x32
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fa49 	bl	800247c <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ff0:	f000 f846 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001000:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001004:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2101      	movs	r1, #1
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fcd6 	bl	80029c4 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800101e:	f000 f82f 	bl	8001080 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	; 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <myprintf>:

/* USER CODE BEGIN 4 */
void myprintf(const char *fmt, ...)
{
 8001034:	b40f      	push	{r0, r1, r2, r3}
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <myprintf+0x44>)
 800104c:	f005 ff98 	bl	8006f80 <vsniprintf>
    va_end(args);

    int len = strlen(buffer);
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <myprintf+0x44>)
 8001052:	f7ff f8dd 	bl	8000210 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, 100);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b29a      	uxth	r2, r3
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	4905      	ldr	r1, [pc, #20]	; (8001078 <myprintf+0x44>)
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <myprintf+0x48>)
 8001064:	f003 fdfd 	bl	8004c62 <HAL_UART_Transmit>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001072:	b004      	add	sp, #16
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000008c 	.word	0x2000008c
 800107c:	200002d4 	.word	0x200002d4

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	e7fe      	b.n	8001088 <Error_Handler+0x8>
	...

0800108c <sd_mount>:
uint8_t testReadBuf[45];


/* Mount drive, default root 0:/ */
FRESULT sd_mount()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
    FRESULT res;

    res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 1);
 8001092:	2201      	movs	r2, #1
 8001094:	4905      	ldr	r1, [pc, #20]	; (80010ac <sd_mount+0x20>)
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <sd_mount+0x24>)
 8001098:	f005 fe72 	bl	8006d80 <f_mount>
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]

    return res;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000364 	.word	0x20000364
 80010b0:	20000368 	.word	0x20000368

080010b4 <sd_unmount>:


/* Unmount drive, default root 0:/ */
FRESULT sd_unmount()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
    FRESULT res;

    res = f_mount(NULL, (TCHAR const*)SDPath, 1);
 80010ba:	2201      	movs	r2, #1
 80010bc:	4905      	ldr	r1, [pc, #20]	; (80010d4 <sd_unmount+0x20>)
 80010be:	2000      	movs	r0, #0
 80010c0:	f005 fe5e 	bl	8006d80 <f_mount>
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]

    return res;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000364 	.word	0x20000364

080010d8 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_SDMMC1_SD_Init+0x38>)
 80010de:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <MX_SDMMC1_SD_Init+0x3c>)
 80010e0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_SDMMC1_SD_Init+0x38>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_SDMMC1_SD_Init+0x38>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_SDMMC1_SD_Init+0x38>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_SDMMC1_SD_Init+0x38>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <MX_SDMMC1_SD_Init+0x38>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <MX_SDMMC1_SD_Init+0x38>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	2000018c 	.word	0x2000018c
 8001114:	40012c00 	.word	0x40012c00

08001118 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ac      	sub	sp, #176	; 0xb0
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	2284      	movs	r2, #132	; 0x84
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f005 feed 	bl	8006f18 <memset>
  if(sdHandle->Instance==SDMMC1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a73      	ldr	r2, [pc, #460]	; (8001310 <HAL_SD_MspInit+0x1f8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	f040 80de 	bne.w	8001306 <HAL_SD_MspInit+0x1ee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800114a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800114e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001150:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001158:	f107 0318 	add.w	r3, r7, #24
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fe17 	bl	8002d90 <HAL_RCCEx_PeriphCLKConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001168:	f7ff ff8a 	bl	8001080 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800116c:	4b69      	ldr	r3, [pc, #420]	; (8001314 <HAL_SD_MspInit+0x1fc>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	4a68      	ldr	r2, [pc, #416]	; (8001314 <HAL_SD_MspInit+0x1fc>)
 8001172:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001176:	6453      	str	r3, [r2, #68]	; 0x44
 8001178:	4b66      	ldr	r3, [pc, #408]	; (8001314 <HAL_SD_MspInit+0x1fc>)
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001184:	4b63      	ldr	r3, [pc, #396]	; (8001314 <HAL_SD_MspInit+0x1fc>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a62      	ldr	r2, [pc, #392]	; (8001314 <HAL_SD_MspInit+0x1fc>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_SD_MspInit+0x1fc>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119c:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_SD_MspInit+0x1fc>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4a5c      	ldr	r2, [pc, #368]	; (8001314 <HAL_SD_MspInit+0x1fc>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
 80011a8:	4b5a      	ldr	r3, [pc, #360]	; (8001314 <HAL_SD_MspInit+0x1fc>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	f003 0308 	and.w	r3, r3, #8
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80011b4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80011b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011ce:	230c      	movs	r3, #12
 80011d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d8:	4619      	mov	r1, r3
 80011da:	484f      	ldr	r0, [pc, #316]	; (8001318 <HAL_SD_MspInit+0x200>)
 80011dc:	f000 ff70 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80011e0:	2304      	movs	r3, #4
 80011e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011f8:	230c      	movs	r3, #12
 80011fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001202:	4619      	mov	r1, r3
 8001204:	4845      	ldr	r0, [pc, #276]	; (800131c <HAL_SD_MspInit+0x204>)
 8001206:	f000 ff5b 	bl	80020c0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800120a:	4b45      	ldr	r3, [pc, #276]	; (8001320 <HAL_SD_MspInit+0x208>)
 800120c:	4a45      	ldr	r2, [pc, #276]	; (8001324 <HAL_SD_MspInit+0x20c>)
 800120e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001210:	4b43      	ldr	r3, [pc, #268]	; (8001320 <HAL_SD_MspInit+0x208>)
 8001212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001216:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001218:	4b41      	ldr	r3, [pc, #260]	; (8001320 <HAL_SD_MspInit+0x208>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800121e:	4b40      	ldr	r3, [pc, #256]	; (8001320 <HAL_SD_MspInit+0x208>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001224:	4b3e      	ldr	r3, [pc, #248]	; (8001320 <HAL_SD_MspInit+0x208>)
 8001226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800122c:	4b3c      	ldr	r3, [pc, #240]	; (8001320 <HAL_SD_MspInit+0x208>)
 800122e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001232:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001234:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <HAL_SD_MspInit+0x208>)
 8001236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800123a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800123c:	4b38      	ldr	r3, [pc, #224]	; (8001320 <HAL_SD_MspInit+0x208>)
 800123e:	2220      	movs	r2, #32
 8001240:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001242:	4b37      	ldr	r3, [pc, #220]	; (8001320 <HAL_SD_MspInit+0x208>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001248:	4b35      	ldr	r3, [pc, #212]	; (8001320 <HAL_SD_MspInit+0x208>)
 800124a:	2204      	movs	r2, #4
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800124e:	4b34      	ldr	r3, [pc, #208]	; (8001320 <HAL_SD_MspInit+0x208>)
 8001250:	2203      	movs	r2, #3
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <HAL_SD_MspInit+0x208>)
 8001256:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800125c:	4b30      	ldr	r3, [pc, #192]	; (8001320 <HAL_SD_MspInit+0x208>)
 800125e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001262:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001264:	482e      	ldr	r0, [pc, #184]	; (8001320 <HAL_SD_MspInit+0x208>)
 8001266:	f000 fb85 	bl	8001974 <HAL_DMA_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_SD_MspInit+0x15c>
    {
      Error_Handler();
 8001270:	f7ff ff06 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a2a      	ldr	r2, [pc, #168]	; (8001320 <HAL_SD_MspInit+0x208>)
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
 800127a:	4a29      	ldr	r2, [pc, #164]	; (8001320 <HAL_SD_MspInit+0x208>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <HAL_SD_MspInit+0x210>)
 8001282:	4a2a      	ldr	r2, [pc, #168]	; (800132c <HAL_SD_MspInit+0x214>)
 8001284:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <HAL_SD_MspInit+0x210>)
 8001288:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800128c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_SD_MspInit+0x210>)
 8001290:	2240      	movs	r2, #64	; 0x40
 8001292:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_SD_MspInit+0x210>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800129a:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_SD_MspInit+0x210>)
 800129c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012b4:	2220      	movs	r2, #32
 80012b6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012c0:	2204      	movs	r2, #4
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012c6:	2203      	movs	r2, #3
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80012d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80012da:	4813      	ldr	r0, [pc, #76]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012dc:	f000 fb4a 	bl	8001974 <HAL_DMA_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_SD_MspInit+0x1d2>
    {
      Error_Handler();
 80012e6:	f7ff fecb 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_SD_MspInit+0x210>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2031      	movs	r0, #49	; 0x31
 80012fc:	f000 fb03 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001300:	2031      	movs	r0, #49	; 0x31
 8001302:	f000 fb1c 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001306:	bf00      	nop
 8001308:	37b0      	adds	r7, #176	; 0xb0
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40012c00 	.word	0x40012c00
 8001314:	40023800 	.word	0x40023800
 8001318:	40020800 	.word	0x40020800
 800131c:	40020c00 	.word	0x40020c00
 8001320:	20000210 	.word	0x20000210
 8001324:	40026458 	.word	0x40026458
 8001328:	20000270 	.word	0x20000270
 800132c:	400264a0 	.word	0x400264a0

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_MspInit+0x44>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_MspInit+0x44>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_MspInit+0x44>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_MspInit+0x44>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_MspInit+0x44>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_MspInit+0x44>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800137c:	e7fe      	b.n	800137c <NMI_Handler+0x4>

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler+0x4>

0800138a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler+0x4>

08001396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 f980 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <SDMMC1_IRQHandler+0x10>)
 80013d2:	f002 fb4d 	bl	8003a70 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000018c 	.word	0x2000018c

080013e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <DMA2_Stream3_IRQHandler+0x10>)
 80013e6:	f000 fbf5 	bl	8001bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000210 	.word	0x20000210

080013f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <DMA2_Stream6_IRQHandler+0x10>)
 80013fa:	f000 fbeb 	bl	8001bd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000270 	.word	0x20000270

08001408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001410:	4a14      	ldr	r2, [pc, #80]	; (8001464 <_sbrk+0x5c>)
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <_sbrk+0x60>)
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <_sbrk+0x64>)
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <_sbrk+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	429a      	cmp	r2, r3
 8001436:	d207      	bcs.n	8001448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001438:	f005 fd44 	bl	8006ec4 <__errno>
 800143c:	4603      	mov	r3, r0
 800143e:	220c      	movs	r2, #12
 8001440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	e009      	b.n	800145c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <_sbrk+0x64>)
 8001458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20050000 	.word	0x20050000
 8001468:	00000800 	.word	0x00000800
 800146c:	200002d0 	.word	0x200002d0
 8001470:	200005e8 	.word	0x200005e8

08001474 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <SystemInit+0x20>)
 800147a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <SystemInit+0x20>)
 8001480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <MX_USART1_UART_Init+0x5c>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a2:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_USART1_UART_Init+0x58>)
 80014dc:	f003 fb73 	bl	8004bc6 <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014e6:	f7ff fdcb 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200002d4 	.word	0x200002d4
 80014f4:	40011000 	.word	0x40011000

080014f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0ac      	sub	sp, #176	; 0xb0
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	2284      	movs	r2, #132	; 0x84
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f005 fcfd 	bl	8006f18 <memset>
  if(uartHandle->Instance==USART1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a32      	ldr	r2, [pc, #200]	; (80015ec <HAL_UART_MspInit+0xf4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d15c      	bne.n	80015e2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001528:	2340      	movs	r3, #64	; 0x40
 800152a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800152c:	2300      	movs	r3, #0
 800152e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	4618      	mov	r0, r3
 8001536:	f001 fc2b 	bl	8002d90 <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001540:	f7ff fd9e 	bl	8001080 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001544:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_UART_MspInit+0xf8>)
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	4a29      	ldr	r2, [pc, #164]	; (80015f0 <HAL_UART_MspInit+0xf8>)
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	6453      	str	r3, [r2, #68]	; 0x44
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_UART_MspInit+0xf8>)
 8001552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_UART_MspInit+0xf8>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <HAL_UART_MspInit+0xf8>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	6313      	str	r3, [r2, #48]	; 0x30
 8001568:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <HAL_UART_MspInit+0xf8>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <HAL_UART_MspInit+0xf8>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_UART_MspInit+0xf8>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6313      	str	r3, [r2, #48]	; 0x30
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0xf8>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015a4:	2307      	movs	r3, #7
 80015a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015ae:	4619      	mov	r1, r3
 80015b0:	4810      	ldr	r0, [pc, #64]	; (80015f4 <HAL_UART_MspInit+0xfc>)
 80015b2:	f000 fd85 	bl	80020c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015d0:	2307      	movs	r3, #7
 80015d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015da:	4619      	mov	r1, r3
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <HAL_UART_MspInit+0x100>)
 80015de:	f000 fd6f 	bl	80020c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015e2:	bf00      	nop
 80015e4:	37b0      	adds	r7, #176	; 0xb0
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40011000 	.word	0x40011000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40020000 	.word	0x40020000

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001602:	490e      	ldr	r1, [pc, #56]	; (800163c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001604:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001618:	4c0b      	ldr	r4, [pc, #44]	; (8001648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001626:	f7ff ff25 	bl	8001474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162a:	f005 fc51 	bl	8006ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7ff fc41 	bl	8000eb4 <main>
  bx  lr    
 8001632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001640:	08007944 	.word	0x08007944
  ldr r2, =_sbss
 8001644:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001648:	200005e4 	.word	0x200005e4

0800164c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC_IRQHandler>

0800164e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001652:	2003      	movs	r0, #3
 8001654:	f000 f94c 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001658:	2000      	movs	r0, #0
 800165a:	f000 f805 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800165e:	f7ff fe67 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x54>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f967 	bl	800195a <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 f92f 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_InitTick+0x5c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000008 	.word	0x20000008
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008
 80016ec:	2000035c 	.word	0x2000035c

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2000035c 	.word	0x2000035c

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff ffee 	bl	80016f0 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffde 	bl	80016f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <__NVIC_SetPriorityGrouping+0x40>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	4313      	orrs	r3, r2
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x40>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00
 8001794:	05fa0000 	.word	0x05fa0000

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff29 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff3e 	bl	8001798 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff31 	bl	80017b4 <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff feb6 	bl	80016f0 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e099      	b.n	8001ac4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b0:	e00f      	b.n	80019d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b2:	f7ff fe9d 	bl	80016f0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d908      	bls.n	80019d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e078      	b.n	8001ac4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e8      	bne.n	80019b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_DMA_Init+0x158>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d107      	bne.n	8001a3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4313      	orrs	r3, r2
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f023 0307 	bic.w	r3, r3, #7
 8001a52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d117      	bne.n	8001a96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00e      	beq.n	8001a96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 faa5 	bl	8001fc8 <DMA_CheckFifoParam>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a92:	2301      	movs	r3, #1
 8001a94:	e016      	b.n	8001ac4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fa5c 	bl	8001f5c <DMA_CalcBaseAndBitshift>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	223f      	movs	r2, #63	; 0x3f
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	f010803f 	.word	0xf010803f

08001ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_DMA_Start_IT+0x26>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e048      	b.n	8001b88 <HAL_DMA_Start_IT+0xb8>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d137      	bne.n	8001b7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f9ee 	bl	8001f00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	223f      	movs	r2, #63	; 0x3f
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0216 	orr.w	r2, r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b4e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e005      	b.n	8001b86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b82:	2302      	movs	r3, #2
 8001b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d004      	beq.n	8001bae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00c      	b.n	8001bc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001be0:	4b8e      	ldr	r3, [pc, #568]	; (8001e1c <HAL_DMA_IRQHandler+0x248>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a8e      	ldr	r2, [pc, #568]	; (8001e20 <HAL_DMA_IRQHandler+0x24c>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	0a9b      	lsrs	r3, r3, #10
 8001bec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfe:	2208      	movs	r2, #8
 8001c00:	409a      	lsls	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01a      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0204 	bic.w	r2, r2, #4
 8001c26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	2201      	movs	r2, #1
 8001c46:	409a      	lsls	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d012      	beq.n	8001c76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c62:	2201      	movs	r2, #1
 8001c64:	409a      	lsls	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6e:	f043 0202 	orr.w	r2, r3, #2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d012      	beq.n	8001cac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00b      	beq.n	8001cac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	2204      	movs	r2, #4
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca4:	f043 0204 	orr.w	r2, r3, #4
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d043      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03c      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	2210      	movs	r2, #16
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d018      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d108      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d024      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
 8001d02:	e01f      	b.n	8001d44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01b      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
 8001d14:	e016      	b.n	8001d44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f022 0208 	bic.w	r2, r2, #8
 8001d32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2220      	movs	r2, #32
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 808f 	beq.w	8001e74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8087 	beq.w	8001e74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d136      	bne.n	8001dec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0216 	bic.w	r2, r2, #22
 8001d8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <HAL_DMA_IRQHandler+0x1da>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0208 	bic.w	r2, r2, #8
 8001dbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc2:	223f      	movs	r2, #63	; 0x3f
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d07e      	beq.n	8001ee0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	4798      	blx	r3
        }
        return;
 8001dea:	e079      	b.n	8001ee0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01d      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10d      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d031      	beq.n	8001e74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	4798      	blx	r3
 8001e18:	e02c      	b.n	8001e74 <HAL_DMA_IRQHandler+0x2a0>
 8001e1a:	bf00      	nop
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d023      	beq.n	8001e74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	4798      	blx	r3
 8001e34:	e01e      	b.n	8001e74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10f      	bne.n	8001e64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0210 	bic.w	r2, r2, #16
 8001e52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d032      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d022      	beq.n	8001ece <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2205      	movs	r2, #5
 8001e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0201 	bic.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d307      	bcc.n	8001ebc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f2      	bne.n	8001ea0 <HAL_DMA_IRQHandler+0x2cc>
 8001eba:	e000      	b.n	8001ebe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ebc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	4798      	blx	r3
 8001ede:	e000      	b.n	8001ee2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ee0:	bf00      	nop
    }
  }
}
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b40      	cmp	r3, #64	; 0x40
 8001f2c:	d108      	bne.n	8001f40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f3e:	e007      	b.n	8001f50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3b10      	subs	r3, #16
 8001f6c:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <DMA_CalcBaseAndBitshift+0x60>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d908      	bls.n	8001f9c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	1d1a      	adds	r2, r3, #4
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	659a      	str	r2, [r3, #88]	; 0x58
 8001f9a:	e006      	b.n	8001faa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <DMA_CalcBaseAndBitshift+0x68>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	aaaaaaab 	.word	0xaaaaaaab
 8001fc0:	080078e4 	.word	0x080078e4
 8001fc4:	fffffc00 	.word	0xfffffc00

08001fc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d11f      	bne.n	8002022 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d856      	bhi.n	8002096 <DMA_CheckFifoParam+0xce>
 8001fe8:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <DMA_CheckFifoParam+0x28>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002013 	.word	0x08002013
 8001ff8:	08002001 	.word	0x08002001
 8001ffc:	08002097 	.word	0x08002097
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d046      	beq.n	800209a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002010:	e043      	b.n	800209a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800201a:	d140      	bne.n	800209e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002020:	e03d      	b.n	800209e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202a:	d121      	bne.n	8002070 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d837      	bhi.n	80020a2 <DMA_CheckFifoParam+0xda>
 8002032:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <DMA_CheckFifoParam+0x70>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	08002049 	.word	0x08002049
 800203c:	0800204f 	.word	0x0800204f
 8002040:	08002049 	.word	0x08002049
 8002044:	08002061 	.word	0x08002061
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      break;
 800204c:	e030      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d025      	beq.n	80020a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800205e:	e022      	b.n	80020a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002068:	d11f      	bne.n	80020aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800206e:	e01c      	b.n	80020aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d903      	bls.n	800207e <DMA_CheckFifoParam+0xb6>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d003      	beq.n	8002084 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800207c:	e018      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
      break;
 8002082:	e015      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00e      	beq.n	80020ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      break;
 8002094:	e00b      	b.n	80020ae <DMA_CheckFifoParam+0xe6>
      break;
 8002096:	bf00      	nop
 8002098:	e00a      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;
 800209a:	bf00      	nop
 800209c:	e008      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;
 800209e:	bf00      	nop
 80020a0:	e006      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;
 80020a2:	bf00      	nop
 80020a4:	e004      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;
 80020a6:	bf00      	nop
 80020a8:	e002      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80020aa:	bf00      	nop
 80020ac:	e000      	b.n	80020b0 <DMA_CheckFifoParam+0xe8>
      break;
 80020ae:	bf00      	nop
    }
  } 
  
  return status; 
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop

080020c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	e175      	b.n	80023cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 8164 	bne.w	80023c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d005      	beq.n	8002116 <HAL_GPIO_Init+0x56>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d130      	bne.n	8002178 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0201 	and.w	r2, r3, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b03      	cmp	r3, #3
 8002182:	d017      	beq.n	80021b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d123      	bne.n	8002208 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	08da      	lsrs	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3208      	adds	r2, #8
 80021c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	220f      	movs	r2, #15
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	08da      	lsrs	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 80be 	beq.w	80023c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_GPIO_Init+0x324>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_GPIO_Init+0x324>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_GPIO_Init+0x324>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002262:	4a61      	ldr	r2, [pc, #388]	; (80023e8 <HAL_GPIO_Init+0x328>)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a58      	ldr	r2, [pc, #352]	; (80023ec <HAL_GPIO_Init+0x32c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d037      	beq.n	80022fe <HAL_GPIO_Init+0x23e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a57      	ldr	r2, [pc, #348]	; (80023f0 <HAL_GPIO_Init+0x330>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d031      	beq.n	80022fa <HAL_GPIO_Init+0x23a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_GPIO_Init+0x334>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02b      	beq.n	80022f6 <HAL_GPIO_Init+0x236>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a55      	ldr	r2, [pc, #340]	; (80023f8 <HAL_GPIO_Init+0x338>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d025      	beq.n	80022f2 <HAL_GPIO_Init+0x232>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a54      	ldr	r2, [pc, #336]	; (80023fc <HAL_GPIO_Init+0x33c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01f      	beq.n	80022ee <HAL_GPIO_Init+0x22e>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a53      	ldr	r2, [pc, #332]	; (8002400 <HAL_GPIO_Init+0x340>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d019      	beq.n	80022ea <HAL_GPIO_Init+0x22a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_GPIO_Init+0x344>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0x226>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a51      	ldr	r2, [pc, #324]	; (8002408 <HAL_GPIO_Init+0x348>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00d      	beq.n	80022e2 <HAL_GPIO_Init+0x222>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a50      	ldr	r2, [pc, #320]	; (800240c <HAL_GPIO_Init+0x34c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x21e>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4f      	ldr	r2, [pc, #316]	; (8002410 <HAL_GPIO_Init+0x350>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_GPIO_Init+0x21a>
 80022d6:	2309      	movs	r3, #9
 80022d8:	e012      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022da:	230a      	movs	r3, #10
 80022dc:	e010      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022de:	2308      	movs	r3, #8
 80022e0:	e00e      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022e2:	2307      	movs	r3, #7
 80022e4:	e00c      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022e6:	2306      	movs	r3, #6
 80022e8:	e00a      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022ea:	2305      	movs	r3, #5
 80022ec:	e008      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e004      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_Init+0x240>
 80022fe:	2300      	movs	r3, #0
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	4093      	lsls	r3, r2
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002310:	4935      	ldr	r1, [pc, #212]	; (80023e8 <HAL_GPIO_Init+0x328>)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_GPIO_Init+0x354>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002342:	4a34      	ldr	r2, [pc, #208]	; (8002414 <HAL_GPIO_Init+0x354>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002348:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_GPIO_Init+0x354>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800236c:	4a29      	ldr	r2, [pc, #164]	; (8002414 <HAL_GPIO_Init+0x354>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002372:	4b28      	ldr	r3, [pc, #160]	; (8002414 <HAL_GPIO_Init+0x354>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002396:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_GPIO_Init+0x354>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HAL_GPIO_Init+0x354>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <HAL_GPIO_Init+0x354>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	f67f ae86 	bls.w	80020e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40013800 	.word	0x40013800
 80023ec:	40020000 	.word	0x40020000
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	40021000 	.word	0x40021000
 8002400:	40021400 	.word	0x40021400
 8002404:	40021800 	.word	0x40021800
 8002408:	40021c00 	.word	0x40021c00
 800240c:	40022000 	.word	0x40022000
 8002410:	40022400 	.word	0x40022400
 8002414:	40013c00 	.word	0x40013c00

08002418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	e001      	b.n	800243a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800243a:	7bfb      	ldrb	r3, [r7, #15]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	807b      	strh	r3, [r7, #2]
 8002454:	4613      	mov	r3, r2
 8002456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002458:	787b      	ldrb	r3, [r7, #1]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002464:	e003      	b.n	800246e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	041a      	lsls	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	619a      	str	r2, [r3, #24]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e291      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 8087 	beq.w	80025ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a0:	4b96      	ldr	r3, [pc, #600]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 030c 	and.w	r3, r3, #12
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d00c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ac:	4b93      	ldr	r3, [pc, #588]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d112      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
 80024b8:	4b90      	ldr	r3, [pc, #576]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c4:	d10b      	bne.n	80024de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c6:	4b8d      	ldr	r3, [pc, #564]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d06c      	beq.n	80025ac <HAL_RCC_OscConfig+0x130>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d168      	bne.n	80025ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e26b      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x7a>
 80024e8:	4b84      	ldr	r3, [pc, #528]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a83      	ldr	r2, [pc, #524]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80024ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e02e      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x9c>
 80024fe:	4b7f      	ldr	r3, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a7e      	ldr	r2, [pc, #504]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7b      	ldr	r2, [pc, #492]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e01d      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0xc0>
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a75      	ldr	r2, [pc, #468]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	4b73      	ldr	r3, [pc, #460]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a72      	ldr	r2, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0xd8>
 800253c:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	4b6c      	ldr	r3, [pc, #432]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6b      	ldr	r2, [pc, #428]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800254e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7ff f8c8 	bl	80016f0 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff f8c4 	bl	80016f0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e21f      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0xe8>
 8002582:	e014      	b.n	80025ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7ff f8b4 	bl	80016f0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7ff f8b0 	bl	80016f0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e20b      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259e:	4b57      	ldr	r3, [pc, #348]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x110>
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d069      	beq.n	800268e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ba:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00b      	beq.n	80025de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b4d      	ldr	r3, [pc, #308]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d11c      	bne.n	800260c <HAL_RCC_OscConfig+0x190>
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d116      	bne.n	800260c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x17a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e1df      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	493d      	ldr	r1, [pc, #244]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	e040      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002614:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a38      	ldr	r2, [pc, #224]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7ff f866 	bl	80016f0 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002628:	f7ff f862 	bl	80016f0 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1bd      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4929      	ldr	r1, [pc, #164]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]
 800265a:	e018      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a26      	ldr	r2, [pc, #152]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff f842 	bl	80016f0 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7ff f83e 	bl	80016f0 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e199      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	4b1e      	ldr	r3, [pc, #120]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d038      	beq.n	800270c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d019      	beq.n	80026d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7ff f81f 	bl	80016f0 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b6:	f7ff f81b 	bl	80016f0 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e176      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x23a>
 80026d4:	e01a      	b.n	800270c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026da:	4a08      	ldr	r2, [pc, #32]	; (80026fc <HAL_RCC_OscConfig+0x280>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e2:	f7ff f805 	bl	80016f0 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	e00a      	b.n	8002700 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ea:	f7ff f801 	bl	80016f0 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d903      	bls.n	8002700 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e15c      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
 80026fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002700:	4b91      	ldr	r3, [pc, #580]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1ee      	bne.n	80026ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a4 	beq.w	8002862 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800271a:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a87      	ldr	r2, [pc, #540]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b85      	ldr	r3, [pc, #532]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002742:	4b82      	ldr	r3, [pc, #520]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800274e:	4b7f      	ldr	r3, [pc, #508]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a7e      	ldr	r2, [pc, #504]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe ffc9 	bl	80016f0 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fe ffc5 	bl	80016f0 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b64      	cmp	r3, #100	; 0x64
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e120      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002774:	4b75      	ldr	r3, [pc, #468]	; (800294c <HAL_RCC_OscConfig+0x4d0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x31a>
 8002788:	4b6f      	ldr	r3, [pc, #444]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a6e      	ldr	r2, [pc, #440]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	e02d      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x33c>
 800279e:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a69      	ldr	r2, [pc, #420]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a66      	ldr	r2, [pc, #408]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	e01c      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x35e>
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a60      	ldr	r2, [pc, #384]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a5d      	ldr	r2, [pc, #372]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0x376>
 80027da:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a5a      	ldr	r2, [pc, #360]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
 80027e6:	4b58      	ldr	r3, [pc, #352]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a57      	ldr	r2, [pc, #348]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d015      	beq.n	8002826 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe ff79 	bl	80016f0 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe ff75 	bl	80016f0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0ce      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCC_OscConfig+0x386>
 8002824:	e014      	b.n	8002850 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7fe ff63 	bl	80016f0 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fe ff5f 	bl	80016f0 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0b8      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	4b40      	ldr	r3, [pc, #256]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a3b      	ldr	r2, [pc, #236]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800285c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80a4 	beq.w	80029b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d06b      	beq.n	8002950 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d149      	bne.n	8002914 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a30      	ldr	r2, [pc, #192]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7fe ff30 	bl	80016f0 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe ff2c 	bl	80016f0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e087      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b28      	ldr	r3, [pc, #160]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	019b      	lsls	r3, r3, #6
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	085b      	lsrs	r3, r3, #1
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	4313      	orrs	r3, r2
 80028d8:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028de:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe ff00 	bl	80016f0 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f4:	f7fe fefc 	bl	80016f0 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e057      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0x478>
 8002912:	e04f      	b.n	80029b4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800291a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fee6 	bl	80016f0 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fee2 	bl	80016f0 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e03d      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293a:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_RCC_OscConfig+0x4cc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x4ac>
 8002946:	e035      	b.n	80029b4 <HAL_RCC_OscConfig+0x538>
 8002948:	40023800 	.word	0x40023800
 800294c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x544>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d028      	beq.n	80029b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d121      	bne.n	80029b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d11a      	bne.n	80029b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002986:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	085b      	lsrs	r3, r3, #1
 8002998:	3b01      	subs	r3, #1
 800299a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0d0      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d910      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	4965      	ldr	r1, [pc, #404]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d040      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e073      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e06b      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4936      	ldr	r1, [pc, #216]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab8:	f7fe fe1a 	bl	80016f0 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7fe fe16 	bl	80016f0 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e053      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1eb      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d210      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 020f 	bic.w	r2, r3, #15
 8002afe:	4922      	ldr	r1, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f821 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1cc>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1d0>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1d4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fd76 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	080078cc 	.word	0x080078cc
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba0:	b090      	sub	sp, #64	; 0x40
 8002ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba8:	2300      	movs	r3, #0
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bac:	2300      	movs	r3, #0
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb4:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d00d      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x40>
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	f200 80a1 	bhi.w	8002d08 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bce:	e09b      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bd4:	e09b      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd6:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bda:	e098      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bdc:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002be6:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d028      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf2:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	623b      	str	r3, [r7, #32]
 8002bfc:	627a      	str	r2, [r7, #36]	; 0x24
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c04:	2100      	movs	r1, #0
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c08:	fb03 f201 	mul.w	r2, r3, r1
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	fb00 f303 	mul.w	r3, r0, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	4a43      	ldr	r2, [pc, #268]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c16:	fba0 1202 	umull	r1, r2, r0, r2
 8002c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c1c:	460a      	mov	r2, r1
 8002c1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c22:	4413      	add	r3, r2
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c28:	2200      	movs	r2, #0
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	61fa      	str	r2, [r7, #28]
 8002c2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c36:	f7fd fb43 	bl	80002c0 <__aeabi_uldivmod>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4613      	mov	r3, r2
 8002c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c42:	e053      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c44:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	099b      	lsrs	r3, r3, #6
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	617a      	str	r2, [r7, #20]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c56:	f04f 0b00 	mov.w	fp, #0
 8002c5a:	4652      	mov	r2, sl
 8002c5c:	465b      	mov	r3, fp
 8002c5e:	f04f 0000 	mov.w	r0, #0
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	0159      	lsls	r1, r3, #5
 8002c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6c:	0150      	lsls	r0, r2, #5
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	ebb2 080a 	subs.w	r8, r2, sl
 8002c76:	eb63 090b 	sbc.w	r9, r3, fp
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c8e:	ebb2 0408 	subs.w	r4, r2, r8
 8002c92:	eb63 0509 	sbc.w	r5, r3, r9
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	00eb      	lsls	r3, r5, #3
 8002ca0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ca4:	00e2      	lsls	r2, r4, #3
 8002ca6:	4614      	mov	r4, r2
 8002ca8:	461d      	mov	r5, r3
 8002caa:	eb14 030a 	adds.w	r3, r4, sl
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	eb45 030b 	adc.w	r3, r5, fp
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	028b      	lsls	r3, r1, #10
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ccc:	4621      	mov	r1, r4
 8002cce:	028a      	lsls	r2, r1, #10
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	60fa      	str	r2, [r7, #12]
 8002cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ce0:	f7fd faee 	bl	80002c0 <__aeabi_uldivmod>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d06:	e002      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3740      	adds	r7, #64	; 0x40
 8002d14:	46bd      	mov	sp, r7
 8002d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	017d7840 	.word	0x017d7840

08002d28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000000 	.word	0x20000000

08002d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d44:	f7ff fff0 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	0a9b      	lsrs	r3, r3, #10
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	080078dc 	.word	0x080078dc

08002d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d6c:	f7ff ffdc 	bl	8002d28 <HAL_RCC_GetHCLKFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	0b5b      	lsrs	r3, r3, #13
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	4903      	ldr	r1, [pc, #12]	; (8002d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	080078dc 	.word	0x080078dc

08002d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d012      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002db8:	4b69      	ldr	r3, [pc, #420]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a68      	ldr	r2, [pc, #416]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dc2:	6093      	str	r3, [r2, #8]
 8002dc4:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dcc:	4964      	ldr	r1, [pc, #400]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d017      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dea:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	4959      	ldr	r1, [pc, #356]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e08:	d101      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e16:	2301      	movs	r3, #1
 8002e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d017      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e26:	4b4e      	ldr	r3, [pc, #312]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	494a      	ldr	r1, [pc, #296]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e44:	d101      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e62:	2301      	movs	r3, #1
 8002e64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 808b 	beq.w	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e74:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	4a39      	ldr	r2, [pc, #228]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e80:	4b37      	ldr	r3, [pc, #220]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e8c:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a34      	ldr	r2, [pc, #208]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fe fc2a 	bl	80016f0 <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea0:	f7fe fc26 	bl	80016f0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e357      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ebe:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d035      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d02e      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002edc:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef2:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a1a      	ldr	r2, [pc, #104]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002efe:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f04:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d114      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fbee 	bl	80016f0 <HAL_GetTick>
 8002f14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f16:	e00a      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f18:	f7fe fbea 	bl	80016f0 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e319      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0ee      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f46:	d111      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f56:	400b      	ands	r3, r1
 8002f58:	4901      	ldr	r1, [pc, #4]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40007000 	.word	0x40007000
 8002f68:	0ffffcff 	.word	0x0ffffcff
 8002f6c:	4baa      	ldr	r3, [pc, #680]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4aa9      	ldr	r2, [pc, #676]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f76:	6093      	str	r3, [r2, #8]
 8002f78:	4ba7      	ldr	r3, [pc, #668]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	49a4      	ldr	r1, [pc, #656]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f96:	4ba0      	ldr	r3, [pc, #640]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f9c:	4a9e      	ldr	r2, [pc, #632]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fa6:	4b9c      	ldr	r3, [pc, #624]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	4999      	ldr	r1, [pc, #612]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fc4:	4b94      	ldr	r3, [pc, #592]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd2:	4991      	ldr	r1, [pc, #580]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fe6:	4b8c      	ldr	r3, [pc, #560]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff4:	4988      	ldr	r1, [pc, #544]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003008:	4b83      	ldr	r3, [pc, #524]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003016:	4980      	ldr	r1, [pc, #512]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800302a:	4b7b      	ldr	r3, [pc, #492]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003030:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4977      	ldr	r1, [pc, #476]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800304c:	4b72      	ldr	r3, [pc, #456]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003052:	f023 0203 	bic.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	496f      	ldr	r1, [pc, #444]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800306e:	4b6a      	ldr	r3, [pc, #424]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f023 020c 	bic.w	r2, r3, #12
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307c:	4966      	ldr	r1, [pc, #408]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003090:	4b61      	ldr	r3, [pc, #388]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	495e      	ldr	r1, [pc, #376]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030b2:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c0:	4955      	ldr	r1, [pc, #340]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	494d      	ldr	r1, [pc, #308]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030f6:	4b48      	ldr	r3, [pc, #288]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	4944      	ldr	r1, [pc, #272]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003118:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	493c      	ldr	r1, [pc, #240]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800313a:	4b37      	ldr	r3, [pc, #220]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003148:	4933      	ldr	r1, [pc, #204]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800315c:	4b2e      	ldr	r3, [pc, #184]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800316a:	492b      	ldr	r1, [pc, #172]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d011      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800317e:	4b26      	ldr	r3, [pc, #152]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800318c:	4922      	ldr	r1, [pc, #136]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319c:	d101      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800319e:	2301      	movs	r3, #1
 80031a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	4912      	ldr	r1, [pc, #72]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f0:	4909      	ldr	r1, [pc, #36]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d006      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80d9 	beq.w	80033be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800320c:	4b02      	ldr	r3, [pc, #8]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a01      	ldr	r2, [pc, #4]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003216:	e001      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003218:	40023800 	.word	0x40023800
 800321c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800321e:	f7fe fa67 	bl	80016f0 <HAL_GetTick>
 8003222:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003224:	e008      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003226:	f7fe fa63 	bl	80016f0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b64      	cmp	r3, #100	; 0x64
 8003232:	d901      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e194      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003238:	4b6c      	ldr	r3, [pc, #432]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1f0      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d021      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11d      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003258:	4b64      	ldr	r3, [pc, #400]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800325a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003266:	4b61      	ldr	r3, [pc, #388]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	0e1b      	lsrs	r3, r3, #24
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	019a      	lsls	r2, r3, #6
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	431a      	orrs	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	061b      	lsls	r3, r3, #24
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	071b      	lsls	r3, r3, #28
 800328c:	4957      	ldr	r1, [pc, #348]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d02e      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032be:	d129      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032c0:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c6:	0c1b      	lsrs	r3, r3, #16
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032ce:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d4:	0f1b      	lsrs	r3, r3, #28
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	019a      	lsls	r2, r3, #6
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	071b      	lsls	r3, r3, #28
 80032f4:	493d      	ldr	r1, [pc, #244]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80032fc:	4b3b      	ldr	r3, [pc, #236]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003302:	f023 021f 	bic.w	r2, r3, #31
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	3b01      	subs	r3, #1
 800330c:	4937      	ldr	r1, [pc, #220]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d01d      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003320:	4b32      	ldr	r3, [pc, #200]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003326:	0e1b      	lsrs	r3, r3, #24
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800332e:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003334:	0f1b      	lsrs	r3, r3, #28
 8003336:	f003 0307 	and.w	r3, r3, #7
 800333a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	019a      	lsls	r2, r3, #6
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	431a      	orrs	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	431a      	orrs	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	071b      	lsls	r3, r3, #28
 8003354:	4925      	ldr	r1, [pc, #148]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d011      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	019a      	lsls	r2, r3, #6
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	061b      	lsls	r3, r3, #24
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	071b      	lsls	r3, r3, #28
 8003384:	4919      	ldr	r1, [pc, #100]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800338c:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a16      	ldr	r2, [pc, #88]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003392:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003398:	f7fe f9aa 	bl	80016f0 <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033a0:	f7fe f9a6 	bl	80016f0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b64      	cmp	r3, #100	; 0x64
 80033ac:	d901      	bls.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0d7      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	f040 80cd 	bne.w	8003560 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d2:	f7fe f98d 	bl	80016f0 <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033da:	f7fe f989 	bl	80016f0 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b64      	cmp	r3, #100	; 0x64
 80033e6:	d903      	bls.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0ba      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80033ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033f0:	4b5e      	ldr	r3, [pc, #376]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033fc:	d0ed      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800341a:	2b00      	cmp	r3, #0
 800341c:	d02e      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d12a      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003426:	4b51      	ldr	r3, [pc, #324]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	0c1b      	lsrs	r3, r3, #16
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003434:	4b4d      	ldr	r3, [pc, #308]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	0f1b      	lsrs	r3, r3, #28
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	019a      	lsls	r2, r3, #6
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	431a      	orrs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	071b      	lsls	r3, r3, #28
 800345a:	4944      	ldr	r1, [pc, #272]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003462:	4b42      	ldr	r3, [pc, #264]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003468:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	493d      	ldr	r1, [pc, #244]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d022      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800348c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003490:	d11d      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003492:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003498:	0e1b      	lsrs	r3, r3, #24
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034a0:	4b32      	ldr	r3, [pc, #200]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a6:	0f1b      	lsrs	r3, r3, #28
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	019a      	lsls	r2, r3, #6
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	041b      	lsls	r3, r3, #16
 80034ba:	431a      	orrs	r2, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	061b      	lsls	r3, r3, #24
 80034c0:	431a      	orrs	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	071b      	lsls	r3, r3, #28
 80034c6:	4929      	ldr	r1, [pc, #164]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d028      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	0e1b      	lsrs	r3, r3, #24
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	0c1b      	lsrs	r3, r3, #16
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	019a      	lsls	r2, r3, #6
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	061b      	lsls	r3, r3, #24
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	071b      	lsls	r3, r3, #28
 800350e:	4917      	ldr	r1, [pc, #92]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800351c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4911      	ldr	r1, [pc, #68]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800352c:	4b0f      	ldr	r3, [pc, #60]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0e      	ldr	r2, [pc, #56]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003538:	f7fe f8da 	bl	80016f0 <HAL_GetTick>
 800353c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003540:	f7fe f8d6 	bl	80016f0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e007      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003552:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800355a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800355e:	d1ef      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023800 	.word	0x40023800

08003570 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e022      	b.n	80035c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d105      	bne.n	800359a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fd fdbf 	bl	8001118 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2203      	movs	r2, #3
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f814 	bl	80035d0 <HAL_SD_InitCard>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e00a      	b.n	80035c8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80035d0:	b5b0      	push	{r4, r5, r7, lr}
 80035d2:	b08e      	sub	sp, #56	; 0x38
 80035d4:	af04      	add	r7, sp, #16
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80035d8:	2300      	movs	r3, #0
 80035da:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80035ec:	2376      	movs	r3, #118	; 0x76
 80035ee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681d      	ldr	r5, [r3, #0]
 80035f4:	466c      	mov	r4, sp
 80035f6:	f107 0314 	add.w	r3, r7, #20
 80035fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003602:	f107 0308 	add.w	r3, r7, #8
 8003606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003608:	4628      	mov	r0, r5
 800360a:	f001 ffb1 	bl	8005570 <SDMMC_Init>
 800360e:	4603      	mov	r3, r0
 8003610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e059      	b.n	80036d4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800362e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f001 ffe5 	bl	8005604 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003648:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800364a:	2002      	movs	r0, #2
 800364c:	f7fe f85c 	bl	8001708 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 fff3 	bl	800463c <SD_PowerON>
 8003656:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00b      	beq.n	8003676 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e02e      	b.n	80036d4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 ff12 	bl	80044a0 <SD_InitCard>
 800367c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e01b      	b.n	80036d4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 f83f 	bl	8005728 <SDMMC_CmdBlockLength>
 80036aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00f      	beq.n	80036d2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_SD_InitCard+0x10c>)
 80036b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3728      	adds	r7, #40	; 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdb0      	pop	{r4, r5, r7, pc}
 80036dc:	004005ff 	.word	0x004005ff

080036e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	; 0x30
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d107      	bne.n	8003708 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0c3      	b.n	8003890 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 80bc 	bne.w	800388e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800371c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	441a      	add	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003726:	429a      	cmp	r2, r3
 8003728:	d907      	bls.n	800373a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0aa      	b.n	8003890 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2203      	movs	r2, #3
 800373e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a4e      	ldr	r2, [pc, #312]	; (8003898 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a4d      	ldr	r2, [pc, #308]	; (800389c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8003768:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2200      	movs	r2, #0
 8003770:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3380      	adds	r3, #128	; 0x80
 80037a0:	4619      	mov	r1, r3
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	025b      	lsls	r3, r3, #9
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	f7fe f991 	bl	8001ad0 <HAL_DMA_Start_IT>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d017      	beq.n	80037e4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80037c2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a35      	ldr	r2, [pc, #212]	; (80038a0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e055      	b.n	8003890 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0208 	orr.w	r2, r2, #8
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d002      	beq.n	8003802 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	025b      	lsls	r3, r3, #9
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003802:	f04f 33ff 	mov.w	r3, #4294967295
 8003806:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	025b      	lsls	r3, r3, #9
 800380c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800380e:	2390      	movs	r3, #144	; 0x90
 8003810:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003812:	2302      	movs	r3, #2
 8003814:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003816:	2300      	movs	r3, #0
 8003818:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800381a:	2301      	movs	r3, #1
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f107 0210 	add.w	r2, r7, #16
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f001 ff51 	bl	80056d0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d90a      	bls.n	800384a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2282      	movs	r2, #130	; 0x82
 8003838:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003840:	4618      	mov	r0, r3
 8003842:	f001 ffb5 	bl	80057b0 <SDMMC_CmdReadMultiBlock>
 8003846:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003848:	e009      	b.n	800385e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2281      	movs	r2, #129	; 0x81
 800384e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003856:	4618      	mov	r0, r3
 8003858:	f001 ff88 	bl	800576c <SDMMC_CmdReadSingleBlock>
 800385c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d012      	beq.n	800388a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0d      	ldr	r2, [pc, #52]	; (80038a0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	431a      	orrs	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e002      	b.n	8003890 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	e000      	b.n	8003890 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800388e:	2302      	movs	r3, #2
  }
}
 8003890:	4618      	mov	r0, r3
 8003892:	3730      	adds	r7, #48	; 0x30
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	080042af 	.word	0x080042af
 800389c:	08004321 	.word	0x08004321
 80038a0:	004005ff 	.word	0x004005ff

080038a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08c      	sub	sp, #48	; 0x30
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d107      	bne.n	80038cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0c6      	b.n	8003a5a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	f040 80bf 	bne.w	8003a58 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80038e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	441a      	add	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d907      	bls.n	80038fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0ad      	b.n	8003a5a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2203      	movs	r2, #3
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 021a 	orr.w	r2, r2, #26
 800391c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003922:	4a50      	ldr	r2, [pc, #320]	; (8003a64 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	4a4f      	ldr	r2, [pc, #316]	; (8003a68 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800392c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	2200      	movs	r2, #0
 8003934:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	2b01      	cmp	r3, #1
 800393c:	d002      	beq.n	8003944 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	025b      	lsls	r3, r3, #9
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d90a      	bls.n	8003960 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	22a0      	movs	r2, #160	; 0xa0
 800394e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003956:	4618      	mov	r0, r3
 8003958:	f001 ff6e 	bl	8005838 <SDMMC_CmdWriteMultiBlock>
 800395c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800395e:	e009      	b.n	8003974 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2290      	movs	r2, #144	; 0x90
 8003964:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800396c:	4618      	mov	r0, r3
 800396e:	f001 ff41 	bl	80057f4 <SDMMC_CmdWriteSingleBlock>
 8003972:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d012      	beq.n	80039a0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a3b      	ldr	r2, [pc, #236]	; (8003a6c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e05c      	b.n	8003a5a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0208 	orr.w	r2, r2, #8
 80039ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	2240      	movs	r2, #64	; 0x40
 80039b6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3380      	adds	r3, #128	; 0x80
 80039e0:	461a      	mov	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	025b      	lsls	r3, r3, #9
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	f7fe f872 	bl	8001ad0 <HAL_DMA_Start_IT>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d01a      	beq.n	8003a28 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 021a 	bic.w	r2, r2, #26
 8003a00:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a19      	ldr	r2, [pc, #100]	; (8003a6c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e018      	b.n	8003a5a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003a28:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	025b      	lsls	r3, r3, #9
 8003a32:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003a34:	2390      	movs	r3, #144	; 0x90
 8003a36:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003a40:	2301      	movs	r3, #1
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f107 0210 	add.w	r2, r7, #16
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fe3e 	bl	80056d0 <SDMMC_ConfigData>

      return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3730      	adds	r7, #48	; 0x30
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	08004285 	.word	0x08004285
 8003a68:	08004321 	.word	0x08004321
 8003a6c:	004005ff 	.word	0x004005ff

08003a70 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_SD_IRQHandler+0x2e>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 ffef 	bl	8004a7a <SD_Read_IT>
 8003a9c:	e15a      	b.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 808d 	beq.w	8003bc8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b9a      	ldr	r3, [pc, #616]	; (8003d2c <HAL_SD_IRQHandler+0x2bc>)
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d039      	beq.n	8003b56 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <HAL_SD_IRQHandler+0x86>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d011      	beq.n	8003b1a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 febe 	bl	800587c <SDMMC_CmdStopTransfer>
 8003b00:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f921 	bl	8003d5c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d104      	bne.n	8003b46 <HAL_SD_IRQHandler+0xd6>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f002 fb26 	bl	8006198 <HAL_SD_RxCpltCallback>
 8003b4c:	e102      	b.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f002 fb18 	bl	8006184 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b54:	e0fe      	b.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80f9 	beq.w	8003d54 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d011      	beq.n	8003b90 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 fe83 	bl	800587c <SDMMC_CmdStopTransfer>
 8003b76:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f8e6 	bl	8003d5c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 80dc 	bne.w	8003d54 <HAL_SD_IRQHandler+0x2e4>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 80d6 	bne.w	8003d54 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0208 	bic.w	r2, r2, #8
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f002 fadf 	bl	8006184 <HAL_SD_TxCpltCallback>
}
 8003bc6:	e0c5      	b.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_SD_IRQHandler+0x178>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 ff9b 	bl	8004b1c <SD_Write_IT>
 8003be6:	e0b5      	b.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80ae 	beq.w	8003d54 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	f043 0202 	orr.w	r2, r3, #2
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	f043 0208 	orr.w	r2, r3, #8
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	f043 0220 	orr.w	r2, r3, #32
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d005      	beq.n	8003c60 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003c78:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 fdfc 	bl	800587c <SDMMC_CmdStopTransfer>
 8003c84:	4602      	mov	r2, r0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f857 	bl	8003d5c <HAL_SD_ErrorCallback>
}
 8003cae:	e051      	b.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d04c      	beq.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <HAL_SD_IRQHandler+0x25e>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d011      	beq.n	8003cf2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <HAL_SD_IRQHandler+0x2c0>)
 8003cd4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd ff58 	bl	8001b90 <HAL_DMA_Abort_IT>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d036      	beq.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fb6a 	bl	80043c4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003cf0:	e030      	b.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <HAL_SD_IRQHandler+0x296>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d018      	beq.n	8003d38 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <HAL_SD_IRQHandler+0x2c4>)
 8003d0c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd ff3c 	bl	8001b90 <HAL_DMA_Abort_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01a      	beq.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fb85 	bl	8004432 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003d28:	e014      	b.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
 8003d2a:	bf00      	nop
 8003d2c:	ffff3ec5 	.word	0xffff3ec5
 8003d30:	080043c5 	.word	0x080043c5
 8003d34:	08004433 	.word	0x08004433
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f002 fa0f 	bl	8006170 <HAL_SD_AbortCallback>
}
 8003d52:	e7ff      	b.n	8003d54 <HAL_SD_IRQHandler+0x2e4>
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d7e:	0f9b      	lsrs	r3, r3, #30
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d8a:	0e9b      	lsrs	r3, r3, #26
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d9c:	0e1b      	lsrs	r3, r3, #24
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 0303 	and.w	r3, r3, #3
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dae:	0c1b      	lsrs	r3, r3, #16
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd0:	0d1b      	lsrs	r3, r3, #20
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dee:	0bdb      	lsrs	r3, r3, #15
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e00:	0b9b      	lsrs	r3, r3, #14
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e12:	0b5b      	lsrs	r3, r3, #13
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e24:	0b1b      	lsrs	r3, r3, #12
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2200      	movs	r2, #0
 8003e36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d163      	bne.n	8003f08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e44:	009a      	lsls	r2, r3, #2
 8003e46:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003e50:	0f92      	lsrs	r2, r2, #30
 8003e52:	431a      	orrs	r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e5c:	0edb      	lsrs	r3, r3, #27
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e6e:	0e1b      	lsrs	r3, r3, #24
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e80:	0d5b      	lsrs	r3, r3, #21
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e92:	0c9b      	lsrs	r3, r3, #18
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea4:	0bdb      	lsrs	r3, r3, #15
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	7e1b      	ldrb	r3, [r3, #24]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	3302      	adds	r3, #2
 8003ec8:	2201      	movs	r2, #1
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ed2:	fb03 f202 	mul.w	r2, r3, r2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	7a1b      	ldrb	r3, [r3, #8]
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ef4:	0a52      	lsrs	r2, r2, #9
 8003ef6:	fb03 f202 	mul.w	r2, r3, r2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f04:	661a      	str	r2, [r3, #96]	; 0x60
 8003f06:	e031      	b.n	8003f6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d11d      	bne.n	8003f4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1e:	0c1b      	lsrs	r3, r3, #16
 8003f20:	431a      	orrs	r2, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	029a      	lsls	r2, r3, #10
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f40:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	661a      	str	r2, [r3, #96]	; 0x60
 8003f4a:	e00f      	b.n	8003f6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a58      	ldr	r2, [pc, #352]	; (80040b4 <HAL_SD_GetCardCSD+0x344>)
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e09d      	b.n	80040a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f70:	0b9b      	lsrs	r3, r3, #14
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f82:	09db      	lsrs	r3, r3, #7
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	0fdb      	lsrs	r3, r3, #31
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	0f5b      	lsrs	r3, r3, #29
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	0e9b      	lsrs	r3, r3, #26
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	0d9b      	lsrs	r3, r3, #22
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	0d5b      	lsrs	r3, r3, #21
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	b2da      	uxtb	r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	0bdb      	lsrs	r3, r3, #15
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	b2da      	uxtb	r2, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	0b9b      	lsrs	r3, r3, #14
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	b2da      	uxtb	r2, r3
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	0b5b      	lsrs	r3, r3, #13
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	b2da      	uxtb	r2, r3
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	0b1b      	lsrs	r3, r3, #12
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	0a9b      	lsrs	r3, r3, #10
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	b2da      	uxtb	r2, r3
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004096:	b2da      	uxtb	r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	004005ff 	.word	0x004005ff

080040b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004110:	b5b0      	push	{r4, r5, r7, lr}
 8004112:	b08e      	sub	sp, #56	; 0x38
 8004114:	af04      	add	r7, sp, #16
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2203      	movs	r2, #3
 8004124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	2b03      	cmp	r3, #3
 800412e:	d02e      	beq.n	800418e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004136:	d106      	bne.n	8004146 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	639a      	str	r2, [r3, #56]	; 0x38
 8004144:	e029      	b.n	800419a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800414c:	d10a      	bne.n	8004164 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fb2a 	bl	80047a8 <SD_WideBus_Enable>
 8004154:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
 8004162:	e01a      	b.n	800419a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 fb67 	bl	800483e <SD_WideBus_Disable>
 8004170:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
 800417e:	e00c      	b.n	800419a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
 800418c:	e005      	b.n	800419a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a26      	ldr	r2, [pc, #152]	; (8004240 <HAL_SD_ConfigWideBusOperation+0x130>)
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80041b8:	e01f      	b.n	80041fa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681d      	ldr	r5, [r3, #0]
 80041e0:	466c      	mov	r4, sp
 80041e2:	f107 0314 	add.w	r3, r7, #20
 80041e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041ee:	f107 0308 	add.w	r3, r7, #8
 80041f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041f4:	4628      	mov	r0, r5
 80041f6:	f001 f9bb 	bl	8005570 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004202:	4618      	mov	r0, r3
 8004204:	f001 fa90 	bl	8005728 <SDMMC_CmdBlockLength>
 8004208:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00c      	beq.n	800422a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004236:	4618      	mov	r0, r3
 8004238:	3728      	adds	r7, #40	; 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bdb0      	pop	{r4, r5, r7, pc}
 800423e:	bf00      	nop
 8004240:	004005ff 	.word	0x004005ff

08004244 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004250:	f107 030c 	add.w	r3, r7, #12
 8004254:	4619      	mov	r1, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fa7e 	bl	8004758 <SD_SendStatus>
 800425c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	0a5b      	lsrs	r3, r3, #9
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800427a:	693b      	ldr	r3, [r7, #16]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	2b82      	cmp	r3, #130	; 0x82
 80042c2:	d111      	bne.n	80042e8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fad7 	bl	800587c <SDMMC_CmdStopTransfer>
 80042ce:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff fd3a 	bl	8003d5c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0208 	bic.w	r2, r2, #8
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8004300:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f001 ff41 	bl	8006198 <HAL_SD_RxCpltCallback>
#endif
}
 8004316:	bf00      	nop
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd fdda 	bl	8001ee8 <HAL_DMA_GetError>
 8004334:	4603      	mov	r3, r0
 8004336:	2b02      	cmp	r3, #2
 8004338:	d03e      	beq.n	80043b8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d002      	beq.n	8004356 <SD_DMAError+0x36>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d12d      	bne.n	80043b2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a19      	ldr	r2, [pc, #100]	; (80043c0 <SD_DMAError+0xa0>)
 800435c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800436c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800437a:	6978      	ldr	r0, [r7, #20]
 800437c:	f7ff ff62 	bl	8004244 <HAL_SD_GetCardState>
 8004380:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b06      	cmp	r3, #6
 8004386:	d002      	beq.n	800438e <SD_DMAError+0x6e>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b05      	cmp	r3, #5
 800438c:	d10a      	bne.n	80043a4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f001 fa72 	bl	800587c <SDMMC_CmdStopTransfer>
 8004398:	4602      	mov	r2, r0
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	431a      	orrs	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80043b2:	6978      	ldr	r0, [r7, #20]
 80043b4:	f7ff fcd2 	bl	8003d5c <HAL_SD_ErrorCallback>
#endif
  }
}
 80043b8:	bf00      	nop
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	004005ff 	.word	0x004005ff

080043c4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80043da:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f7ff ff31 	bl	8004244 <HAL_SD_GetCardState>
 80043e2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d002      	beq.n	80043fe <SD_DMATxAbort+0x3a>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	d10a      	bne.n	8004414 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f001 fa3a 	bl	800587c <SDMMC_CmdStopTransfer>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	431a      	orrs	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f001 fea7 	bl	8006170 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004422:	e002      	b.n	800442a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff fc99 	bl	8003d5c <HAL_SD_ErrorCallback>
}
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f240 523a 	movw	r2, #1338	; 0x53a
 8004448:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f7ff fefa 	bl	8004244 <HAL_SD_GetCardState>
 8004450:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b06      	cmp	r3, #6
 8004464:	d002      	beq.n	800446c <SD_DMARxAbort+0x3a>
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b05      	cmp	r3, #5
 800446a:	d10a      	bne.n	8004482 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f001 fa03 	bl	800587c <SDMMC_CmdStopTransfer>
 8004476:	4602      	mov	r2, r0
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447c:	431a      	orrs	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	2b00      	cmp	r3, #0
 8004488:	d103      	bne.n	8004492 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f001 fe70 	bl	8006170 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004490:	e002      	b.n	8004498 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff fc62 	bl	8003d5c <HAL_SD_ErrorCallback>
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80044a0:	b5b0      	push	{r4, r5, r7, lr}
 80044a2:	b094      	sub	sp, #80	; 0x50
 80044a4:	af04      	add	r7, sp, #16
 80044a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80044a8:	2301      	movs	r3, #1
 80044aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f001 f8b5 	bl	8005620 <SDMMC_GetPowerState>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80044bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80044c0:	e0b8      	b.n	8004634 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d02f      	beq.n	800452a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 fadf 	bl	8005a92 <SDMMC_CmdSendCID>
 80044d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80044d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80044dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044de:	e0a9      	b.n	8004634 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 f8df 	bl	80056aa <SDMMC_GetResponse>
 80044ec:	4602      	mov	r2, r0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2104      	movs	r1, #4
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 f8d6 	bl	80056aa <SDMMC_GetResponse>
 80044fe:	4602      	mov	r2, r0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2108      	movs	r1, #8
 800450a:	4618      	mov	r0, r3
 800450c:	f001 f8cd 	bl	80056aa <SDMMC_GetResponse>
 8004510:	4602      	mov	r2, r0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	210c      	movs	r1, #12
 800451c:	4618      	mov	r0, r3
 800451e:	f001 f8c4 	bl	80056aa <SDMMC_GetResponse>
 8004522:	4602      	mov	r2, r0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	2b03      	cmp	r3, #3
 8004530:	d00d      	beq.n	800454e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f107 020e 	add.w	r2, r7, #14
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f001 fae5 	bl	8005b0c <SDMMC_CmdSetRelAdd>
 8004542:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <SD_InitCard+0xae>
    {
      return errorstate;
 800454a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454c:	e072      	b.n	8004634 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	2b03      	cmp	r3, #3
 8004554:	d036      	beq.n	80045c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004556:	89fb      	ldrh	r3, [r7, #14]
 8004558:	461a      	mov	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f001 faaf 	bl	8005ace <SDMMC_CmdSendCSD>
 8004570:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457a:	e05b      	b.n	8004634 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2100      	movs	r1, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f001 f891 	bl	80056aa <SDMMC_GetResponse>
 8004588:	4602      	mov	r2, r0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2104      	movs	r1, #4
 8004594:	4618      	mov	r0, r3
 8004596:	f001 f888 	bl	80056aa <SDMMC_GetResponse>
 800459a:	4602      	mov	r2, r0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2108      	movs	r1, #8
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f87f 	bl	80056aa <SDMMC_GetResponse>
 80045ac:	4602      	mov	r2, r0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	210c      	movs	r1, #12
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 f876 	bl	80056aa <SDMMC_GetResponse>
 80045be:	4602      	mov	r2, r0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2104      	movs	r1, #4
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 f86d 	bl	80056aa <SDMMC_GetResponse>
 80045d0:	4603      	mov	r3, r0
 80045d2:	0d1a      	lsrs	r2, r3, #20
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80045d8:	f107 0310 	add.w	r3, r7, #16
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff fbc6 	bl	8003d70 <HAL_SD_GetCardCSD>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045ee:	e021      	b.n	8004634 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f8:	041b      	lsls	r3, r3, #16
 80045fa:	2200      	movs	r2, #0
 80045fc:	461c      	mov	r4, r3
 80045fe:	4615      	mov	r5, r2
 8004600:	4622      	mov	r2, r4
 8004602:	462b      	mov	r3, r5
 8004604:	4608      	mov	r0, r1
 8004606:	f001 f95b 	bl	80058c0 <SDMMC_CmdSelDesel>
 800460a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800460c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <SD_InitCard+0x176>
  {
    return errorstate;
 8004612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004614:	e00e      	b.n	8004634 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681d      	ldr	r5, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	466c      	mov	r4, sp
 800461e:	f103 0210 	add.w	r2, r3, #16
 8004622:	ca07      	ldmia	r2, {r0, r1, r2}
 8004624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004628:	3304      	adds	r3, #4
 800462a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800462c:	4628      	mov	r0, r5
 800462e:	f000 ff9f 	bl	8005570 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3740      	adds	r7, #64	; 0x40
 8004638:	46bd      	mov	sp, r7
 800463a:	bdb0      	pop	{r4, r5, r7, pc}

0800463c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	2300      	movs	r3, #0
 800464e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f001 f956 	bl	8005906 <SDMMC_CmdGoIdleState>
 800465a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	e072      	b.n	800474c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f001 f969 	bl	8005942 <SDMMC_CmdOperCond>
 8004670:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00d      	beq.n	8004694 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f001 f93f 	bl	8005906 <SDMMC_CmdGoIdleState>
 8004688:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d004      	beq.n	800469a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	e05b      	b.n	800474c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d137      	bne.n	8004712 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f969 	bl	8005980 <SDMMC_CmdAppCommand>
 80046ae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d02d      	beq.n	8004712 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046ba:	e047      	b.n	800474c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 f95c 	bl	8005980 <SDMMC_CmdAppCommand>
 80046c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <SD_PowerON+0x98>
    {
      return errorstate;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	e03b      	b.n	800474c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	491e      	ldr	r1, [pc, #120]	; (8004754 <SD_PowerON+0x118>)
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 f972 	bl	80059c4 <SDMMC_CmdAppOperCommand>
 80046e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046ec:	e02e      	b.n	800474c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2100      	movs	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 ffd8 	bl	80056aa <SDMMC_GetResponse>
 80046fa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	0fdb      	lsrs	r3, r3, #31
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <SD_PowerON+0xcc>
 8004704:	2301      	movs	r3, #1
 8004706:	e000      	b.n	800470a <SD_PowerON+0xce>
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]

    count++;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	3301      	adds	r3, #1
 8004710:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004718:	4293      	cmp	r3, r2
 800471a:	d802      	bhi.n	8004722 <SD_PowerON+0xe6>
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0cc      	beq.n	80046bc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004728:	4293      	cmp	r3, r2
 800472a:	d902      	bls.n	8004732 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800472c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004730:	e00c      	b.n	800474c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
 8004742:	e002      	b.n	800474a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	c1100000 	.word	0xc1100000

08004758 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004768:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800476c:	e018      	b.n	80047a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f001 f9e7 	bl	8005b4e <SDMMC_CmdSendStatus>
 8004780:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	e009      	b.n	80047a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f000 ff89 	bl	80056aa <SDMMC_GetResponse>
 8004798:	4602      	mov	r2, r0
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 ff73 	bl	80056aa <SDMMC_GetResponse>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ce:	d102      	bne.n	80047d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80047d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047d4:	e02f      	b.n	8004836 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80047d6:	f107 030c 	add.w	r3, r7, #12
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f879 	bl	80048d4 <SD_FindSCR>
 80047e2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	e023      	b.n	8004836 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01c      	beq.n	8004832 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004800:	041b      	lsls	r3, r3, #16
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f001 f8bb 	bl	8005980 <SDMMC_CmdAppCommand>
 800480a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	e00f      	b.n	8004836 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2102      	movs	r1, #2
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f8f5 	bl	8005a0c <SDMMC_CmdBusWidth>
 8004822:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	e003      	b.n	8004836 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800482e:	2300      	movs	r3, #0
 8004830:	e001      	b.n	8004836 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004832:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	2300      	movs	r3, #0
 800484c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 ff28 	bl	80056aa <SDMMC_GetResponse>
 800485a:	4603      	mov	r3, r0
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004864:	d102      	bne.n	800486c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800486a:	e02f      	b.n	80048cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800486c:	f107 030c 	add.w	r3, r7, #12
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f82e 	bl	80048d4 <SD_FindSCR>
 8004878:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	e023      	b.n	80048cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01c      	beq.n	80048c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	4619      	mov	r1, r3
 800489a:	4610      	mov	r0, r2
 800489c:	f001 f870 	bl	8005980 <SDMMC_CmdAppCommand>
 80048a0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	e00f      	b.n	80048cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 f8aa 	bl	8005a0c <SDMMC_CmdBusWidth>
 80048b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	e003      	b.n	80048cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e001      	b.n	80048cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80048c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b08f      	sub	sp, #60	; 0x3c
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80048de:	f7fc ff07 	bl	80016f0 <HAL_GetTick>
 80048e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2108      	movs	r1, #8
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 ff14 	bl	8005728 <SDMMC_CmdBlockLength>
 8004900:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	e0b2      	b.n	8004a72 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004914:	041b      	lsls	r3, r3, #16
 8004916:	4619      	mov	r1, r3
 8004918:	4610      	mov	r0, r2
 800491a:	f001 f831 	bl	8005980 <SDMMC_CmdAppCommand>
 800491e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004928:	e0a3      	b.n	8004a72 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295
 800492e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004930:	2308      	movs	r3, #8
 8004932:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004934:	2330      	movs	r3, #48	; 0x30
 8004936:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004938:	2302      	movs	r3, #2
 800493a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800493c:	2300      	movs	r3, #0
 800493e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004940:	2301      	movs	r3, #1
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f107 0210 	add.w	r2, r7, #16
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f000 febe 	bl	80056d0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f001 f879 	bl	8005a50 <SDMMC_CmdSendSCR>
 800495e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d02a      	beq.n	80049bc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	e083      	b.n	8004a72 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00f      	beq.n	8004998 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6819      	ldr	r1, [r3, #0]
 800497c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	f107 0208 	add.w	r2, r7, #8
 8004984:	18d4      	adds	r4, r2, r3
 8004986:	4608      	mov	r0, r1
 8004988:	f000 fe1e 	bl	80055c8 <SDMMC_ReadFIFO>
 800498c:	4603      	mov	r3, r0
 800498e:	6023      	str	r3, [r4, #0]
      index++;
 8004990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004992:	3301      	adds	r3, #1
 8004994:	637b      	str	r3, [r7, #52]	; 0x34
 8004996:	e006      	b.n	80049a6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d012      	beq.n	80049cc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80049a6:	f7fc fea3 	bl	80016f0 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d102      	bne.n	80049bc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80049b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049ba:	e05a      	b.n	8004a72 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0cf      	beq.n	800496a <SD_FindSCR+0x96>
 80049ca:	e000      	b.n	80049ce <SD_FindSCR+0xfa>
      break;
 80049cc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2208      	movs	r2, #8
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80049e4:	2308      	movs	r3, #8
 80049e6:	e044      	b.n	8004a72 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2202      	movs	r2, #2
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80049fe:	2302      	movs	r3, #2
 8004a00:	e037      	b.n	8004a72 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2220      	movs	r2, #32
 8004a16:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004a18:	2320      	movs	r3, #32
 8004a1a:	e02a      	b.n	8004a72 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	061a      	lsls	r2, r3, #24
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a32:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	0a1b      	lsrs	r3, r3, #8
 8004a38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a3c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	0e1b      	lsrs	r3, r3, #24
 8004a42:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	601a      	str	r2, [r3, #0]
    scr++;
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	061a      	lsls	r2, r3, #24
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a5a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	0a1b      	lsrs	r3, r3, #8
 8004a60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a64:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	0e1b      	lsrs	r3, r3, #24
 8004a6a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	373c      	adds	r7, #60	; 0x3c
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd90      	pop	{r4, r7, pc}

08004a7a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d03f      	beq.n	8004b14 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	e033      	b.n	8004b02 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fd92 	bl	80055c8 <SDMMC_ReadFIFO>
 8004aa4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	0e1b      	lsrs	r3, r3, #24
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3301      	adds	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	3301      	adds	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b07      	cmp	r3, #7
 8004b06:	d9c8      	bls.n	8004a9a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004b14:	bf00      	nop
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d043      	beq.n	8004bbe <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	e037      	b.n	8004bac <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3301      	adds	r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	021a      	lsls	r2, r3, #8
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	041a      	lsls	r2, r3, #16
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3301      	adds	r3, #1
 8004b76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	061a      	lsls	r2, r3, #24
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f107 0208 	add.w	r2, r7, #8
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fd1e 	bl	80055e2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b07      	cmp	r3, #7
 8004bb0:	d9c4      	bls.n	8004b3c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b082      	sub	sp, #8
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e040      	b.n	8004c5a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fc fc85 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2224      	movs	r2, #36	; 0x24
 8004bf2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0201 	bic.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f8af 	bl	8004d68 <UART_SetConfig>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e022      	b.n	8004c5a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fb07 	bl	8005230 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fb8e 	bl	8005374 <UART_CheckIdleState>
 8004c58:	4603      	mov	r3, r0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b08a      	sub	sp, #40	; 0x28
 8004c66:	af02      	add	r7, sp, #8
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d171      	bne.n	8004d5e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_UART_Transmit+0x24>
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e06a      	b.n	8004d60 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2221      	movs	r2, #33	; 0x21
 8004c96:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c98:	f7fc fd2a 	bl	80016f0 <HAL_GetTick>
 8004c9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	88fa      	ldrh	r2, [r7, #6]
 8004ca2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb6:	d108      	bne.n	8004cca <HAL_UART_Transmit+0x68>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e003      	b.n	8004cd2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cd2:	e02c      	b.n	8004d2e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2180      	movs	r1, #128	; 0x80
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fb7f 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e038      	b.n	8004d60 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	3302      	adds	r3, #2
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	e007      	b.n	8004d1c <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1cc      	bne.n	8004cd4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2140      	movs	r1, #64	; 0x40
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 fb4c 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e005      	b.n	8004d60 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e000      	b.n	8004d60 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
  }
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4ba6      	ldr	r3, [pc, #664]	; (800502c <UART_SetConfig+0x2c4>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	6979      	ldr	r1, [r7, #20]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a94      	ldr	r2, [pc, #592]	; (8005030 <UART_SetConfig+0x2c8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d120      	bne.n	8004e26 <UART_SetConfig+0xbe>
 8004de4:	4b93      	ldr	r3, [pc, #588]	; (8005034 <UART_SetConfig+0x2cc>)
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d816      	bhi.n	8004e20 <UART_SetConfig+0xb8>
 8004df2:	a201      	add	r2, pc, #4	; (adr r2, 8004df8 <UART_SetConfig+0x90>)
 8004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df8:	08004e09 	.word	0x08004e09
 8004dfc:	08004e15 	.word	0x08004e15
 8004e00:	08004e0f 	.word	0x08004e0f
 8004e04:	08004e1b 	.word	0x08004e1b
 8004e08:	2301      	movs	r3, #1
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e150      	b.n	80050b0 <UART_SetConfig+0x348>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e14d      	b.n	80050b0 <UART_SetConfig+0x348>
 8004e14:	2304      	movs	r3, #4
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e14a      	b.n	80050b0 <UART_SetConfig+0x348>
 8004e1a:	2308      	movs	r3, #8
 8004e1c:	77fb      	strb	r3, [r7, #31]
 8004e1e:	e147      	b.n	80050b0 <UART_SetConfig+0x348>
 8004e20:	2310      	movs	r3, #16
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e144      	b.n	80050b0 <UART_SetConfig+0x348>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a83      	ldr	r2, [pc, #524]	; (8005038 <UART_SetConfig+0x2d0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d132      	bne.n	8004e96 <UART_SetConfig+0x12e>
 8004e30:	4b80      	ldr	r3, [pc, #512]	; (8005034 <UART_SetConfig+0x2cc>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b0c      	cmp	r3, #12
 8004e3c:	d828      	bhi.n	8004e90 <UART_SetConfig+0x128>
 8004e3e:	a201      	add	r2, pc, #4	; (adr r2, 8004e44 <UART_SetConfig+0xdc>)
 8004e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e44:	08004e79 	.word	0x08004e79
 8004e48:	08004e91 	.word	0x08004e91
 8004e4c:	08004e91 	.word	0x08004e91
 8004e50:	08004e91 	.word	0x08004e91
 8004e54:	08004e85 	.word	0x08004e85
 8004e58:	08004e91 	.word	0x08004e91
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004e91 	.word	0x08004e91
 8004e64:	08004e7f 	.word	0x08004e7f
 8004e68:	08004e91 	.word	0x08004e91
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004e91 	.word	0x08004e91
 8004e74:	08004e8b 	.word	0x08004e8b
 8004e78:	2300      	movs	r3, #0
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e118      	b.n	80050b0 <UART_SetConfig+0x348>
 8004e7e:	2302      	movs	r3, #2
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e115      	b.n	80050b0 <UART_SetConfig+0x348>
 8004e84:	2304      	movs	r3, #4
 8004e86:	77fb      	strb	r3, [r7, #31]
 8004e88:	e112      	b.n	80050b0 <UART_SetConfig+0x348>
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e10f      	b.n	80050b0 <UART_SetConfig+0x348>
 8004e90:	2310      	movs	r3, #16
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e10c      	b.n	80050b0 <UART_SetConfig+0x348>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a68      	ldr	r2, [pc, #416]	; (800503c <UART_SetConfig+0x2d4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d120      	bne.n	8004ee2 <UART_SetConfig+0x17a>
 8004ea0:	4b64      	ldr	r3, [pc, #400]	; (8005034 <UART_SetConfig+0x2cc>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eaa:	2b30      	cmp	r3, #48	; 0x30
 8004eac:	d013      	beq.n	8004ed6 <UART_SetConfig+0x16e>
 8004eae:	2b30      	cmp	r3, #48	; 0x30
 8004eb0:	d814      	bhi.n	8004edc <UART_SetConfig+0x174>
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d009      	beq.n	8004eca <UART_SetConfig+0x162>
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d810      	bhi.n	8004edc <UART_SetConfig+0x174>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <UART_SetConfig+0x15c>
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d006      	beq.n	8004ed0 <UART_SetConfig+0x168>
 8004ec2:	e00b      	b.n	8004edc <UART_SetConfig+0x174>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e0f2      	b.n	80050b0 <UART_SetConfig+0x348>
 8004eca:	2302      	movs	r3, #2
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e0ef      	b.n	80050b0 <UART_SetConfig+0x348>
 8004ed0:	2304      	movs	r3, #4
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	e0ec      	b.n	80050b0 <UART_SetConfig+0x348>
 8004ed6:	2308      	movs	r3, #8
 8004ed8:	77fb      	strb	r3, [r7, #31]
 8004eda:	e0e9      	b.n	80050b0 <UART_SetConfig+0x348>
 8004edc:	2310      	movs	r3, #16
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e0e6      	b.n	80050b0 <UART_SetConfig+0x348>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a56      	ldr	r2, [pc, #344]	; (8005040 <UART_SetConfig+0x2d8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d120      	bne.n	8004f2e <UART_SetConfig+0x1c6>
 8004eec:	4b51      	ldr	r3, [pc, #324]	; (8005034 <UART_SetConfig+0x2cc>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ef6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ef8:	d013      	beq.n	8004f22 <UART_SetConfig+0x1ba>
 8004efa:	2bc0      	cmp	r3, #192	; 0xc0
 8004efc:	d814      	bhi.n	8004f28 <UART_SetConfig+0x1c0>
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d009      	beq.n	8004f16 <UART_SetConfig+0x1ae>
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d810      	bhi.n	8004f28 <UART_SetConfig+0x1c0>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <UART_SetConfig+0x1a8>
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d006      	beq.n	8004f1c <UART_SetConfig+0x1b4>
 8004f0e:	e00b      	b.n	8004f28 <UART_SetConfig+0x1c0>
 8004f10:	2300      	movs	r3, #0
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e0cc      	b.n	80050b0 <UART_SetConfig+0x348>
 8004f16:	2302      	movs	r3, #2
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e0c9      	b.n	80050b0 <UART_SetConfig+0x348>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	77fb      	strb	r3, [r7, #31]
 8004f20:	e0c6      	b.n	80050b0 <UART_SetConfig+0x348>
 8004f22:	2308      	movs	r3, #8
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e0c3      	b.n	80050b0 <UART_SetConfig+0x348>
 8004f28:	2310      	movs	r3, #16
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e0c0      	b.n	80050b0 <UART_SetConfig+0x348>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a44      	ldr	r2, [pc, #272]	; (8005044 <UART_SetConfig+0x2dc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d125      	bne.n	8004f84 <UART_SetConfig+0x21c>
 8004f38:	4b3e      	ldr	r3, [pc, #248]	; (8005034 <UART_SetConfig+0x2cc>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f46:	d017      	beq.n	8004f78 <UART_SetConfig+0x210>
 8004f48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f4c:	d817      	bhi.n	8004f7e <UART_SetConfig+0x216>
 8004f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f52:	d00b      	beq.n	8004f6c <UART_SetConfig+0x204>
 8004f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f58:	d811      	bhi.n	8004f7e <UART_SetConfig+0x216>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <UART_SetConfig+0x1fe>
 8004f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f62:	d006      	beq.n	8004f72 <UART_SetConfig+0x20a>
 8004f64:	e00b      	b.n	8004f7e <UART_SetConfig+0x216>
 8004f66:	2300      	movs	r3, #0
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e0a1      	b.n	80050b0 <UART_SetConfig+0x348>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e09e      	b.n	80050b0 <UART_SetConfig+0x348>
 8004f72:	2304      	movs	r3, #4
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e09b      	b.n	80050b0 <UART_SetConfig+0x348>
 8004f78:	2308      	movs	r3, #8
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	e098      	b.n	80050b0 <UART_SetConfig+0x348>
 8004f7e:	2310      	movs	r3, #16
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e095      	b.n	80050b0 <UART_SetConfig+0x348>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2f      	ldr	r2, [pc, #188]	; (8005048 <UART_SetConfig+0x2e0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d125      	bne.n	8004fda <UART_SetConfig+0x272>
 8004f8e:	4b29      	ldr	r3, [pc, #164]	; (8005034 <UART_SetConfig+0x2cc>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f9c:	d017      	beq.n	8004fce <UART_SetConfig+0x266>
 8004f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fa2:	d817      	bhi.n	8004fd4 <UART_SetConfig+0x26c>
 8004fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa8:	d00b      	beq.n	8004fc2 <UART_SetConfig+0x25a>
 8004faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fae:	d811      	bhi.n	8004fd4 <UART_SetConfig+0x26c>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <UART_SetConfig+0x254>
 8004fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb8:	d006      	beq.n	8004fc8 <UART_SetConfig+0x260>
 8004fba:	e00b      	b.n	8004fd4 <UART_SetConfig+0x26c>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e076      	b.n	80050b0 <UART_SetConfig+0x348>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	77fb      	strb	r3, [r7, #31]
 8004fc6:	e073      	b.n	80050b0 <UART_SetConfig+0x348>
 8004fc8:	2304      	movs	r3, #4
 8004fca:	77fb      	strb	r3, [r7, #31]
 8004fcc:	e070      	b.n	80050b0 <UART_SetConfig+0x348>
 8004fce:	2308      	movs	r3, #8
 8004fd0:	77fb      	strb	r3, [r7, #31]
 8004fd2:	e06d      	b.n	80050b0 <UART_SetConfig+0x348>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e06a      	b.n	80050b0 <UART_SetConfig+0x348>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1b      	ldr	r2, [pc, #108]	; (800504c <UART_SetConfig+0x2e4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d138      	bne.n	8005056 <UART_SetConfig+0x2ee>
 8004fe4:	4b13      	ldr	r3, [pc, #76]	; (8005034 <UART_SetConfig+0x2cc>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004fee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ff2:	d017      	beq.n	8005024 <UART_SetConfig+0x2bc>
 8004ff4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ff8:	d82a      	bhi.n	8005050 <UART_SetConfig+0x2e8>
 8004ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffe:	d00b      	beq.n	8005018 <UART_SetConfig+0x2b0>
 8005000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005004:	d824      	bhi.n	8005050 <UART_SetConfig+0x2e8>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <UART_SetConfig+0x2aa>
 800500a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500e:	d006      	beq.n	800501e <UART_SetConfig+0x2b6>
 8005010:	e01e      	b.n	8005050 <UART_SetConfig+0x2e8>
 8005012:	2300      	movs	r3, #0
 8005014:	77fb      	strb	r3, [r7, #31]
 8005016:	e04b      	b.n	80050b0 <UART_SetConfig+0x348>
 8005018:	2302      	movs	r3, #2
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e048      	b.n	80050b0 <UART_SetConfig+0x348>
 800501e:	2304      	movs	r3, #4
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e045      	b.n	80050b0 <UART_SetConfig+0x348>
 8005024:	2308      	movs	r3, #8
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	e042      	b.n	80050b0 <UART_SetConfig+0x348>
 800502a:	bf00      	nop
 800502c:	efff69f3 	.word	0xefff69f3
 8005030:	40011000 	.word	0x40011000
 8005034:	40023800 	.word	0x40023800
 8005038:	40004400 	.word	0x40004400
 800503c:	40004800 	.word	0x40004800
 8005040:	40004c00 	.word	0x40004c00
 8005044:	40005000 	.word	0x40005000
 8005048:	40011400 	.word	0x40011400
 800504c:	40007800 	.word	0x40007800
 8005050:	2310      	movs	r3, #16
 8005052:	77fb      	strb	r3, [r7, #31]
 8005054:	e02c      	b.n	80050b0 <UART_SetConfig+0x348>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a72      	ldr	r2, [pc, #456]	; (8005224 <UART_SetConfig+0x4bc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d125      	bne.n	80050ac <UART_SetConfig+0x344>
 8005060:	4b71      	ldr	r3, [pc, #452]	; (8005228 <UART_SetConfig+0x4c0>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800506a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800506e:	d017      	beq.n	80050a0 <UART_SetConfig+0x338>
 8005070:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005074:	d817      	bhi.n	80050a6 <UART_SetConfig+0x33e>
 8005076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507a:	d00b      	beq.n	8005094 <UART_SetConfig+0x32c>
 800507c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005080:	d811      	bhi.n	80050a6 <UART_SetConfig+0x33e>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <UART_SetConfig+0x326>
 8005086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800508a:	d006      	beq.n	800509a <UART_SetConfig+0x332>
 800508c:	e00b      	b.n	80050a6 <UART_SetConfig+0x33e>
 800508e:	2300      	movs	r3, #0
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e00d      	b.n	80050b0 <UART_SetConfig+0x348>
 8005094:	2302      	movs	r3, #2
 8005096:	77fb      	strb	r3, [r7, #31]
 8005098:	e00a      	b.n	80050b0 <UART_SetConfig+0x348>
 800509a:	2304      	movs	r3, #4
 800509c:	77fb      	strb	r3, [r7, #31]
 800509e:	e007      	b.n	80050b0 <UART_SetConfig+0x348>
 80050a0:	2308      	movs	r3, #8
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e004      	b.n	80050b0 <UART_SetConfig+0x348>
 80050a6:	2310      	movs	r3, #16
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e001      	b.n	80050b0 <UART_SetConfig+0x348>
 80050ac:	2310      	movs	r3, #16
 80050ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b8:	d15b      	bne.n	8005172 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d828      	bhi.n	8005112 <UART_SetConfig+0x3aa>
 80050c0:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <UART_SetConfig+0x360>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	080050f5 	.word	0x080050f5
 80050d0:	080050fd 	.word	0x080050fd
 80050d4:	08005113 	.word	0x08005113
 80050d8:	08005103 	.word	0x08005103
 80050dc:	08005113 	.word	0x08005113
 80050e0:	08005113 	.word	0x08005113
 80050e4:	08005113 	.word	0x08005113
 80050e8:	0800510b 	.word	0x0800510b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ec:	f7fd fe28 	bl	8002d40 <HAL_RCC_GetPCLK1Freq>
 80050f0:	61b8      	str	r0, [r7, #24]
        break;
 80050f2:	e013      	b.n	800511c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050f4:	f7fd fe38 	bl	8002d68 <HAL_RCC_GetPCLK2Freq>
 80050f8:	61b8      	str	r0, [r7, #24]
        break;
 80050fa:	e00f      	b.n	800511c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050fc:	4b4b      	ldr	r3, [pc, #300]	; (800522c <UART_SetConfig+0x4c4>)
 80050fe:	61bb      	str	r3, [r7, #24]
        break;
 8005100:	e00c      	b.n	800511c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005102:	f7fd fd4b 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8005106:	61b8      	str	r0, [r7, #24]
        break;
 8005108:	e008      	b.n	800511c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800510e:	61bb      	str	r3, [r7, #24]
        break;
 8005110:	e004      	b.n	800511c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	77bb      	strb	r3, [r7, #30]
        break;
 800511a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d074      	beq.n	800520c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	005a      	lsls	r2, r3, #1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	441a      	add	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	fbb2 f3f3 	udiv	r3, r2, r3
 8005136:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	d916      	bls.n	800516c <UART_SetConfig+0x404>
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005144:	d212      	bcs.n	800516c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f023 030f 	bic.w	r3, r3, #15
 800514e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	b29b      	uxth	r3, r3
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	b29a      	uxth	r2, r3
 800515c:	89fb      	ldrh	r3, [r7, #14]
 800515e:	4313      	orrs	r3, r2
 8005160:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	89fa      	ldrh	r2, [r7, #14]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	e04f      	b.n	800520c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	77bb      	strb	r3, [r7, #30]
 8005170:	e04c      	b.n	800520c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005172:	7ffb      	ldrb	r3, [r7, #31]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d828      	bhi.n	80051ca <UART_SetConfig+0x462>
 8005178:	a201      	add	r2, pc, #4	; (adr r2, 8005180 <UART_SetConfig+0x418>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051b5 	.word	0x080051b5
 800518c:	080051cb 	.word	0x080051cb
 8005190:	080051bb 	.word	0x080051bb
 8005194:	080051cb 	.word	0x080051cb
 8005198:	080051cb 	.word	0x080051cb
 800519c:	080051cb 	.word	0x080051cb
 80051a0:	080051c3 	.word	0x080051c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a4:	f7fd fdcc 	bl	8002d40 <HAL_RCC_GetPCLK1Freq>
 80051a8:	61b8      	str	r0, [r7, #24]
        break;
 80051aa:	e013      	b.n	80051d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ac:	f7fd fddc 	bl	8002d68 <HAL_RCC_GetPCLK2Freq>
 80051b0:	61b8      	str	r0, [r7, #24]
        break;
 80051b2:	e00f      	b.n	80051d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b4:	4b1d      	ldr	r3, [pc, #116]	; (800522c <UART_SetConfig+0x4c4>)
 80051b6:	61bb      	str	r3, [r7, #24]
        break;
 80051b8:	e00c      	b.n	80051d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ba:	f7fd fcef 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 80051be:	61b8      	str	r0, [r7, #24]
        break;
 80051c0:	e008      	b.n	80051d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c6:	61bb      	str	r3, [r7, #24]
        break;
 80051c8:	e004      	b.n	80051d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	77bb      	strb	r3, [r7, #30]
        break;
 80051d2:	bf00      	nop
    }

    if (pclk != 0U)
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d018      	beq.n	800520c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	085a      	lsrs	r2, r3, #1
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	441a      	add	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b0f      	cmp	r3, #15
 80051f2:	d909      	bls.n	8005208 <UART_SetConfig+0x4a0>
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fa:	d205      	bcs.n	8005208 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60da      	str	r2, [r3, #12]
 8005206:	e001      	b.n	800520c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005218:	7fbb      	ldrb	r3, [r7, #30]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40007c00 	.word	0x40007c00
 8005228:	40023800 	.word	0x40023800
 800522c:	00f42400 	.word	0x00f42400

08005230 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00a      	beq.n	800525a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00a      	beq.n	80052e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d01a      	beq.n	8005346 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800532e:	d10a      	bne.n	8005346 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af02      	add	r7, sp, #8
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005384:	f7fc f9b4 	bl	80016f0 <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b08      	cmp	r3, #8
 8005396:	d10e      	bne.n	80053b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f81b 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e011      	b.n	80053da <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b09c      	sub	sp, #112	; 0x70
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	4613      	mov	r3, r2
 80053f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f2:	e0a7      	b.n	8005544 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	f000 80a3 	beq.w	8005544 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7fc f977 	bl	80016f0 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <UART_WaitOnFlagUntilTimeout+0x32>
 800540e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005410:	2b00      	cmp	r3, #0
 8005412:	d13f      	bne.n	8005494 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005424:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005428:	667b      	str	r3, [r7, #100]	; 0x64
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005432:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005434:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005438:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005440:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e6      	bne.n	8005414 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3308      	adds	r3, #8
 800544c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	663b      	str	r3, [r7, #96]	; 0x60
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005466:	64ba      	str	r2, [r7, #72]	; 0x48
 8005468:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800546c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e068      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d050      	beq.n	8005544 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b0:	d148      	bne.n	8005544 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e6      	bne.n	80054bc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3308      	adds	r3, #8
 80054f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	e853 3f00 	ldrex	r3, [r3]
 80054fc:	613b      	str	r3, [r7, #16]
   return(result);
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f023 0301 	bic.w	r3, r3, #1
 8005504:	66bb      	str	r3, [r7, #104]	; 0x68
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3308      	adds	r3, #8
 800550c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800550e:	623a      	str	r2, [r7, #32]
 8005510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	69f9      	ldr	r1, [r7, #28]
 8005514:	6a3a      	ldr	r2, [r7, #32]
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	61bb      	str	r3, [r7, #24]
   return(result);
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e5      	bne.n	80054ee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2220      	movs	r2, #32
 800552c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e010      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69da      	ldr	r2, [r3, #28]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	4013      	ands	r3, r2
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	bf0c      	ite	eq
 8005554:	2301      	moveq	r3, #1
 8005556:	2300      	movne	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	429a      	cmp	r2, r3
 8005560:	f43f af48 	beq.w	80053f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3770      	adds	r7, #112	; 0x70
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005570:	b084      	sub	sp, #16
 8005572:	b480      	push	{r7}
 8005574:	b085      	sub	sp, #20
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	f107 001c 	add.w	r0, r7, #28
 800557e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005586:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005588:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800558a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800558e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005592:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005596:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800559a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <SDMMC_Init+0x54>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	b004      	add	sp, #16
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	ffff8100 	.word	0xffff8100

080055c8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2203      	movs	r2, #3
 8005610:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0303 	and.w	r3, r3, #3
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800565a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005660:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005666:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	4b06      	ldr	r3, [pc, #24]	; (800568c <SDMMC_SendCommand+0x50>)
 8005674:	4013      	ands	r3, r2
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	fffff000 	.word	0xfffff000

08005690 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	b2db      	uxtb	r3, r3
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3314      	adds	r3, #20
 80056b8:	461a      	mov	r2, r3
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	4413      	add	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
}  
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80056f6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80056fc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005702:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800571a:	2300      	movs	r3, #0

}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005736:	2310      	movs	r3, #16
 8005738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800573a:	2340      	movs	r3, #64	; 0x40
 800573c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005746:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005748:	f107 0308 	add.w	r3, r7, #8
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff ff74 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	2110      	movs	r1, #16
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa1a 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005762:	69fb      	ldr	r3, [r7, #28]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800577a:	2311      	movs	r3, #17
 800577c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800577e:	2340      	movs	r3, #64	; 0x40
 8005780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800578a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800578c:	f107 0308 	add.w	r3, r7, #8
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff ff52 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005798:	f241 3288 	movw	r2, #5000	; 0x1388
 800579c:	2111      	movs	r1, #17
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f9f8 	bl	8005b94 <SDMMC_GetCmdResp1>
 80057a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057a6:	69fb      	ldr	r3, [r7, #28]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80057be:	2312      	movs	r3, #18
 80057c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057c2:	2340      	movs	r3, #64	; 0x40
 80057c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057d0:	f107 0308 	add.w	r3, r7, #8
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff ff30 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80057dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e0:	2112      	movs	r1, #18
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f9d6 	bl	8005b94 <SDMMC_GetCmdResp1>
 80057e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ea:	69fb      	ldr	r3, [r7, #28]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005802:	2318      	movs	r3, #24
 8005804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005806:	2340      	movs	r3, #64	; 0x40
 8005808:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800580e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005812:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005814:	f107 0308 	add.w	r3, r7, #8
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff ff0e 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005820:	f241 3288 	movw	r2, #5000	; 0x1388
 8005824:	2118      	movs	r1, #24
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9b4 	bl	8005b94 <SDMMC_GetCmdResp1>
 800582c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800582e:	69fb      	ldr	r3, [r7, #28]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005846:	2319      	movs	r3, #25
 8005848:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800584a:	2340      	movs	r3, #64	; 0x40
 800584c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005856:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005858:	f107 0308 	add.w	r3, r7, #8
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff feec 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005864:	f241 3288 	movw	r2, #5000	; 0x1388
 8005868:	2119      	movs	r1, #25
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f992 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005872:	69fb      	ldr	r3, [r7, #28]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3720      	adds	r7, #32
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005888:	230c      	movs	r3, #12
 800588a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800588c:	2340      	movs	r3, #64	; 0x40
 800588e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005898:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800589a:	f107 0308 	add.w	r3, r7, #8
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff fecb 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80058a6:	4a05      	ldr	r2, [pc, #20]	; (80058bc <SDMMC_CmdStopTransfer+0x40>)
 80058a8:	210c      	movs	r1, #12
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f972 	bl	8005b94 <SDMMC_GetCmdResp1>
 80058b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058b2:	69fb      	ldr	r3, [r7, #28]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	05f5e100 	.word	0x05f5e100

080058c0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b08a      	sub	sp, #40	; 0x28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80058d0:	2307      	movs	r3, #7
 80058d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058d4:	2340      	movs	r3, #64	; 0x40
 80058d6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058e0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058e2:	f107 0310 	add.w	r3, r7, #16
 80058e6:	4619      	mov	r1, r3
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff fea7 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80058ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f2:	2107      	movs	r1, #7
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f94d 	bl	8005b94 <SDMMC_GetCmdResp1>
 80058fa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3728      	adds	r7, #40	; 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b088      	sub	sp, #32
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005912:	2300      	movs	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800591e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005922:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005924:	f107 0308 	add.w	r3, r7, #8
 8005928:	4619      	mov	r1, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fe86 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fb67 	bl	8006004 <SDMMC_GetCmdError>
 8005936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005938:	69fb      	ldr	r3, [r7, #28]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3720      	adds	r7, #32
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b088      	sub	sp, #32
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800594a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800594e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005950:	2308      	movs	r3, #8
 8005952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005954:	2340      	movs	r3, #64	; 0x40
 8005956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800595c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005960:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff fe67 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fafa 	bl	8005f68 <SDMMC_GetCmdResp7>
 8005974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005976:	69fb      	ldr	r3, [r7, #28]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3720      	adds	r7, #32
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800598e:	2337      	movs	r3, #55	; 0x37
 8005990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800599a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800599e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059a0:	f107 0308 	add.w	r3, r7, #8
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7ff fe48 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80059ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b0:	2137      	movs	r1, #55	; 0x37
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f8ee 	bl	8005b94 <SDMMC_GetCmdResp1>
 80059b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059ba:	69fb      	ldr	r3, [r7, #28]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	4b0d      	ldr	r3, [pc, #52]	; (8005a08 <SDMMC_CmdAppOperCommand+0x44>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80059d6:	2329      	movs	r3, #41	; 0x29
 80059d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80059da:	2340      	movs	r3, #64	; 0x40
 80059dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80059e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80059e8:	f107 0308 	add.w	r3, r7, #8
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff fe24 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fa03 	bl	8005e00 <SDMMC_GetCmdResp3>
 80059fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80059fc:	69fb      	ldr	r3, [r7, #28]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	80100000 	.word	0x80100000

08005a0c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005a1a:	2306      	movs	r3, #6
 8005a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a1e:	2340      	movs	r3, #64	; 0x40
 8005a20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a2c:	f107 0308 	add.w	r3, r7, #8
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff fe02 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3c:	2106      	movs	r1, #6
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8a8 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a46:	69fb      	ldr	r3, [r7, #28]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005a5c:	2333      	movs	r3, #51	; 0x33
 8005a5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005a60:	2340      	movs	r3, #64	; 0x40
 8005a62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005a64:	2300      	movs	r3, #0
 8005a66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005a6e:	f107 0308 	add.w	r3, r7, #8
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff fde1 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8005a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7e:	2133      	movs	r1, #51	; 0x33
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f887 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005a86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005a88:	69fb      	ldr	r3, [r7, #28]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b088      	sub	sp, #32
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005aa2:	23c0      	movs	r3, #192	; 0xc0
 8005aa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ab0:	f107 0308 	add.w	r3, r7, #8
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff fdc0 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f957 	bl	8005d70 <SDMMC_GetCmdResp2>
 8005ac2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b088      	sub	sp, #32
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005adc:	2309      	movs	r3, #9
 8005ade:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005ae0:	23c0      	movs	r3, #192	; 0xc0
 8005ae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005aee:	f107 0308 	add.w	r3, r7, #8
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fda1 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f938 	bl	8005d70 <SDMMC_GetCmdResp2>
 8005b00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b02:	69fb      	ldr	r3, [r7, #28]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b1e:	2340      	movs	r3, #64	; 0x40
 8005b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b2c:	f107 0308 	add.w	r3, r7, #8
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff fd82 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	2103      	movs	r1, #3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f99d 	bl	8005e7c <SDMMC_GetCmdResp6>
 8005b42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b44:	69fb      	ldr	r3, [r7, #28]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b088      	sub	sp, #32
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005b5c:	230d      	movs	r3, #13
 8005b5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b60:	2340      	movs	r3, #64	; 0x40
 8005b62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	4619      	mov	r1, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff fd61 	bl	800563c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7e:	210d      	movs	r1, #13
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f807 	bl	8005b94 <SDMMC_GetCmdResp1>
 8005b86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005b88:	69fb      	ldr	r3, [r7, #28]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005ba2:	4b70      	ldr	r3, [pc, #448]	; (8005d64 <SDMMC_GetCmdResp1+0x1d0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a70      	ldr	r2, [pc, #448]	; (8005d68 <SDMMC_GetCmdResp1+0x1d4>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	0a5a      	lsrs	r2, r3, #9
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	fb02 f303 	mul.w	r3, r2, r3
 8005bb4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	1e5a      	subs	r2, r3, #1
 8005bba:	61fa      	str	r2, [r7, #28]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d102      	bne.n	8005bc6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bc4:	e0c9      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0ef      	beq.n	8005bb6 <SDMMC_GetCmdResp1+0x22>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1ea      	bne.n	8005bb6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2204      	movs	r2, #4
 8005bf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bf2:	2304      	movs	r3, #4
 8005bf4:	e0b1      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d004      	beq.n	8005c0c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0a6      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	22c5      	movs	r2, #197	; 0xc5
 8005c10:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7ff fd3c 	bl	8005690 <SDMMC_GetCommandResponse>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	7afb      	ldrb	r3, [r7, #11]
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d001      	beq.n	8005c26 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e099      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005c26:	2100      	movs	r1, #0
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff fd3e 	bl	80056aa <SDMMC_GetResponse>
 8005c2e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4b4e      	ldr	r3, [pc, #312]	; (8005d6c <SDMMC_GetCmdResp1+0x1d8>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e08d      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	da02      	bge.n	8005c4a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005c44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c48:	e087      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005c54:	2340      	movs	r3, #64	; 0x40
 8005c56:	e080      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005c62:	2380      	movs	r3, #128	; 0x80
 8005c64:	e079      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c74:	e071      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c84:	e069      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c94:	e061      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ca4:	e059      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb4:	e051      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cc4:	e049      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005cd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005cd4:	e041      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce4:	e039      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005cf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cf4:	e031      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005d00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d04:	e029      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005d10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005d14:	e021      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005d20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005d24:	e019      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005d30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d34:	e011      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005d40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d44:	e009      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005d50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005d54:	e001      	b.n	8005d5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20000000 	.word	0x20000000
 8005d68:	10624dd3 	.word	0x10624dd3
 8005d6c:	fdffe008 	.word	0xfdffe008

08005d70 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d78:	4b1f      	ldr	r3, [pc, #124]	; (8005df8 <SDMMC_GetCmdResp2+0x88>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1f      	ldr	r2, [pc, #124]	; (8005dfc <SDMMC_GetCmdResp2+0x8c>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	0a5b      	lsrs	r3, r3, #9
 8005d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d88:	fb02 f303 	mul.w	r3, r2, r3
 8005d8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1e5a      	subs	r2, r3, #1
 8005d92:	60fa      	str	r2, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d102      	bne.n	8005d9e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d9c:	e026      	b.n	8005dec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0ef      	beq.n	8005d8e <SDMMC_GetCmdResp2+0x1e>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1ea      	bne.n	8005d8e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2204      	movs	r2, #4
 8005dc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005dca:	2304      	movs	r3, #4
 8005dcc:	e00e      	b.n	8005dec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d004      	beq.n	8005de4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e003      	b.n	8005dec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	22c5      	movs	r2, #197	; 0xc5
 8005de8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	20000000 	.word	0x20000000
 8005dfc:	10624dd3 	.word	0x10624dd3

08005e00 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e08:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <SDMMC_GetCmdResp3+0x74>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1a      	ldr	r2, [pc, #104]	; (8005e78 <SDMMC_GetCmdResp3+0x78>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	0a5b      	lsrs	r3, r3, #9
 8005e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e18:	fb02 f303 	mul.w	r3, r2, r3
 8005e1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1e5a      	subs	r2, r3, #1
 8005e22:	60fa      	str	r2, [r7, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d102      	bne.n	8005e2e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005e28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e2c:	e01b      	b.n	8005e66 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0ef      	beq.n	8005e1e <SDMMC_GetCmdResp3+0x1e>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1ea      	bne.n	8005e1e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2204      	movs	r2, #4
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e5a:	2304      	movs	r3, #4
 8005e5c:	e003      	b.n	8005e66 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	22c5      	movs	r2, #197	; 0xc5
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000000 	.word	0x20000000
 8005e78:	10624dd3 	.word	0x10624dd3

08005e7c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	460b      	mov	r3, r1
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005e8a:	4b35      	ldr	r3, [pc, #212]	; (8005f60 <SDMMC_GetCmdResp6+0xe4>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a35      	ldr	r2, [pc, #212]	; (8005f64 <SDMMC_GetCmdResp6+0xe8>)
 8005e90:	fba2 2303 	umull	r2, r3, r2, r3
 8005e94:	0a5b      	lsrs	r3, r3, #9
 8005e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e9a:	fb02 f303 	mul.w	r3, r2, r3
 8005e9e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	1e5a      	subs	r2, r3, #1
 8005ea4:	61fa      	str	r2, [r7, #28]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005eaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005eae:	e052      	b.n	8005f56 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0ef      	beq.n	8005ea0 <SDMMC_GetCmdResp6+0x24>
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1ea      	bne.n	8005ea0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005edc:	2304      	movs	r3, #4
 8005ede:	e03a      	b.n	8005f56 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e02f      	b.n	8005f56 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fbca 	bl	8005690 <SDMMC_GetCommandResponse>
 8005efc:	4603      	mov	r3, r0
 8005efe:	461a      	mov	r2, r3
 8005f00:	7afb      	ldrb	r3, [r7, #11]
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d001      	beq.n	8005f0a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e025      	b.n	8005f56 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	22c5      	movs	r2, #197	; 0xc5
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005f10:	2100      	movs	r1, #0
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f7ff fbc9 	bl	80056aa <SDMMC_GetResponse>
 8005f18:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e011      	b.n	8005f56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005f3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f40:	e009      	b.n	8005f56 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f50:	e001      	b.n	8005f56 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000000 	.word	0x20000000
 8005f64:	10624dd3 	.word	0x10624dd3

08005f68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005f70:	4b22      	ldr	r3, [pc, #136]	; (8005ffc <SDMMC_GetCmdResp7+0x94>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a22      	ldr	r2, [pc, #136]	; (8006000 <SDMMC_GetCmdResp7+0x98>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0a5b      	lsrs	r3, r3, #9
 8005f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f80:	fb02 f303 	mul.w	r3, r2, r3
 8005f84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	60fa      	str	r2, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d102      	bne.n	8005f96 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005f90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005f94:	e02c      	b.n	8005ff0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0ef      	beq.n	8005f86 <SDMMC_GetCmdResp7+0x1e>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1ea      	bne.n	8005f86 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2204      	movs	r2, #4
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005fc2:	2304      	movs	r3, #4
 8005fc4:	e014      	b.n	8005ff0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d004      	beq.n	8005fdc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e009      	b.n	8005ff0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2240      	movs	r2, #64	; 0x40
 8005fec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005fee:	2300      	movs	r3, #0
  
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	20000000 	.word	0x20000000
 8006000:	10624dd3 	.word	0x10624dd3

08006004 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800600c:	4b11      	ldr	r3, [pc, #68]	; (8006054 <SDMMC_GetCmdError+0x50>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a11      	ldr	r2, [pc, #68]	; (8006058 <SDMMC_GetCmdError+0x54>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	0a5b      	lsrs	r3, r3, #9
 8006018:	f241 3288 	movw	r2, #5000	; 0x1388
 800601c:	fb02 f303 	mul.w	r3, r2, r3
 8006020:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1e5a      	subs	r2, r3, #1
 8006026:	60fa      	str	r2, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800602c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006030:	e009      	b.n	8006046 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0f1      	beq.n	8006022 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	22c5      	movs	r2, #197	; 0xc5
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000000 	.word	0x20000000
 8006058:	10624dd3 	.word	0x10624dd3

0800605c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006060:	4904      	ldr	r1, [pc, #16]	; (8006074 <MX_FATFS_Init+0x18>)
 8006062:	4805      	ldr	r0, [pc, #20]	; (8006078 <MX_FATFS_Init+0x1c>)
 8006064:	f000 ff1e 	bl	8006ea4 <FATFS_LinkDriver>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	4b03      	ldr	r3, [pc, #12]	; (800607c <MX_FATFS_Init+0x20>)
 800606e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006070:	bf00      	nop
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000364 	.word	0x20000364
 8006078:	080078ec 	.word	0x080078ec
 800607c:	20000360 	.word	0x20000360

08006080 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800608a:	f000 f896 	bl	80061ba <BSP_SD_IsDetected>
 800608e:	4603      	mov	r3, r0
 8006090:	2b01      	cmp	r3, #1
 8006092:	d001      	beq.n	8006098 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006094:	2302      	movs	r3, #2
 8006096:	e012      	b.n	80060be <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006098:	480b      	ldr	r0, [pc, #44]	; (80060c8 <BSP_SD_Init+0x48>)
 800609a:	f7fd fa69 	bl	8003570 <HAL_SD_Init>
 800609e:	4603      	mov	r3, r0
 80060a0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80060a2:	79fb      	ldrb	r3, [r7, #7]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d109      	bne.n	80060bc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80060a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80060ac:	4806      	ldr	r0, [pc, #24]	; (80060c8 <BSP_SD_Init+0x48>)
 80060ae:	f7fe f82f 	bl	8004110 <HAL_SD_ConfigWideBusOperation>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80060bc:	79fb      	ldrb	r3, [r7, #7]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	2000018c 	.word	0x2000018c

080060cc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	68f9      	ldr	r1, [r7, #12]
 80060e2:	4806      	ldr	r0, [pc, #24]	; (80060fc <BSP_SD_ReadBlocks_DMA+0x30>)
 80060e4:	f7fd fafc 	bl	80036e0 <HAL_SD_ReadBlocks_DMA>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80060f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	2000018c 	.word	0x2000018c

08006100 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	68f9      	ldr	r1, [r7, #12]
 8006116:	4806      	ldr	r0, [pc, #24]	; (8006130 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006118:	f7fd fbc4 	bl	80038a4 <HAL_SD_WriteBlocks_DMA>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	2000018c 	.word	0x2000018c

08006134 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006138:	4805      	ldr	r0, [pc, #20]	; (8006150 <BSP_SD_GetCardState+0x1c>)
 800613a:	f7fe f883 	bl	8004244 <HAL_SD_GetCardState>
 800613e:	4603      	mov	r3, r0
 8006140:	2b04      	cmp	r3, #4
 8006142:	bf14      	ite	ne
 8006144:	2301      	movne	r3, #1
 8006146:	2300      	moveq	r3, #0
 8006148:	b2db      	uxtb	r3, r3
}
 800614a:	4618      	mov	r0, r3
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	2000018c 	.word	0x2000018c

08006154 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	4803      	ldr	r0, [pc, #12]	; (800616c <BSP_SD_GetCardInfo+0x18>)
 8006160:	f7fd ffaa 	bl	80040b8 <HAL_SD_GetCardInfo>
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	2000018c 	.word	0x2000018c

08006170 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006178:	f000 f818 	bl	80061ac <BSP_SD_AbortCallback>
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800618c:	f000 f9a8 	bl	80064e0 <BSP_SD_WriteCpltCallback>
}
 8006190:	bf00      	nop
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80061a0:	f000 f9aa 	bl	80064f8 <BSP_SD_ReadCpltCallback>
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0

}
 80061b0:	bf00      	nop
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80061c0:	2301      	movs	r3, #1
 80061c2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80061c4:	f000 f80c 	bl	80061e0 <BSP_PlatformIsDetected>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80061ce:	2300      	movs	r3, #0
 80061d0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	b2db      	uxtb	r3, r3
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80061e6:	2301      	movs	r3, #1
 80061e8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80061ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061ee:	4806      	ldr	r0, [pc, #24]	; (8006208 <BSP_PlatformIsDetected+0x28>)
 80061f0:	f7fc f912 	bl	8002418 <HAL_GPIO_ReadPin>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80061fa:	2300      	movs	r3, #0
 80061fc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80061fe:	79fb      	ldrb	r3, [r7, #7]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40020800 	.word	0x40020800

0800620c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006214:	f7fb fa6c 	bl	80016f0 <HAL_GetTick>
 8006218:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800621a:	e006      	b.n	800622a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800621c:	f7ff ff8a 	bl	8006134 <BSP_SD_GetCardState>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006226:	2300      	movs	r3, #0
 8006228:	e009      	b.n	800623e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800622a:	f7fb fa61 	bl	80016f0 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	429a      	cmp	r2, r3
 8006238:	d8f0      	bhi.n	800621c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800623a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <SD_CheckStatus+0x38>)
 8006254:	2201      	movs	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006258:	f7ff ff6c 	bl	8006134 <BSP_SD_GetCardState>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d107      	bne.n	8006272 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006262:	4b07      	ldr	r3, [pc, #28]	; (8006280 <SD_CheckStatus+0x38>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f023 0301 	bic.w	r3, r3, #1
 800626c:	b2da      	uxtb	r2, r3
 800626e:	4b04      	ldr	r3, [pc, #16]	; (8006280 <SD_CheckStatus+0x38>)
 8006270:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006272:	4b03      	ldr	r3, [pc, #12]	; (8006280 <SD_CheckStatus+0x38>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	b2db      	uxtb	r3, r3
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	20000009 	.word	0x20000009

08006284 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800628e:	f7ff fef7 	bl	8006080 <BSP_SD_Init>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d107      	bne.n	80062a8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff ffd4 	bl	8006248 <SD_CheckStatus>
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	4b04      	ldr	r3, [pc, #16]	; (80062b8 <SD_initialize+0x34>)
 80062a6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80062a8:	4b03      	ldr	r3, [pc, #12]	; (80062b8 <SD_initialize+0x34>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000009 	.word	0x20000009

080062bc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80062c6:	79fb      	ldrb	r3, [r7, #7]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff ffbd 	bl	8006248 <SD_CheckStatus>
 80062ce:	4603      	mov	r3, r0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
 80062e2:	603b      	str	r3, [r7, #0]
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80062ec:	f247 5030 	movw	r0, #30000	; 0x7530
 80062f0:	f7ff ff8c 	bl	800620c <SD_CheckStatusWithTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	da01      	bge.n	80062fe <SD_read+0x26>
  {
    return res;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
 80062fc:	e03b      	b.n	8006376 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	68b8      	ldr	r0, [r7, #8]
 8006304:	f7ff fee2 	bl	80060cc <BSP_SD_ReadBlocks_DMA>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d132      	bne.n	8006374 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800630e:	4b1c      	ldr	r3, [pc, #112]	; (8006380 <SD_read+0xa8>)
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006314:	f7fb f9ec 	bl	80016f0 <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800631a:	bf00      	nop
 800631c:	4b18      	ldr	r3, [pc, #96]	; (8006380 <SD_read+0xa8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d108      	bne.n	8006336 <SD_read+0x5e>
 8006324:	f7fb f9e4 	bl	80016f0 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	f247 522f 	movw	r2, #29999	; 0x752f
 8006332:	4293      	cmp	r3, r2
 8006334:	d9f2      	bls.n	800631c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006336:	4b12      	ldr	r3, [pc, #72]	; (8006380 <SD_read+0xa8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	75fb      	strb	r3, [r7, #23]
 8006342:	e017      	b.n	8006374 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006344:	4b0e      	ldr	r3, [pc, #56]	; (8006380 <SD_read+0xa8>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800634a:	f7fb f9d1 	bl	80016f0 <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006350:	e007      	b.n	8006362 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006352:	f7ff feef 	bl	8006134 <BSP_SD_GetCardState>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d102      	bne.n	8006362 <SD_read+0x8a>
          {
            res = RES_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006360:	e008      	b.n	8006374 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006362:	f7fb f9c5 	bl	80016f0 <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	f247 522f 	movw	r2, #29999	; 0x752f
 8006370:	4293      	cmp	r3, r2
 8006372:	d9ee      	bls.n	8006352 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006374:	7dfb      	ldrb	r3, [r7, #23]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	2000059c 	.word	0x2000059c

08006384 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006398:	4b24      	ldr	r3, [pc, #144]	; (800642c <SD_write+0xa8>)
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800639e:	f247 5030 	movw	r0, #30000	; 0x7530
 80063a2:	f7ff ff33 	bl	800620c <SD_CheckStatusWithTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da01      	bge.n	80063b0 <SD_write+0x2c>
  {
    return res;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	e038      	b.n	8006422 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	68b8      	ldr	r0, [r7, #8]
 80063b6:	f7ff fea3 	bl	8006100 <BSP_SD_WriteBlocks_DMA>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d12f      	bne.n	8006420 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80063c0:	f7fb f996 	bl	80016f0 <HAL_GetTick>
 80063c4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80063c6:	bf00      	nop
 80063c8:	4b18      	ldr	r3, [pc, #96]	; (800642c <SD_write+0xa8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d108      	bne.n	80063e2 <SD_write+0x5e>
 80063d0:	f7fb f98e 	bl	80016f0 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	f247 522f 	movw	r2, #29999	; 0x752f
 80063de:	4293      	cmp	r3, r2
 80063e0:	d9f2      	bls.n	80063c8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80063e2:	4b12      	ldr	r3, [pc, #72]	; (800642c <SD_write+0xa8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d102      	bne.n	80063f0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
 80063ee:	e017      	b.n	8006420 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80063f0:	4b0e      	ldr	r3, [pc, #56]	; (800642c <SD_write+0xa8>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80063f6:	f7fb f97b 	bl	80016f0 <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063fc:	e007      	b.n	800640e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80063fe:	f7ff fe99 	bl	8006134 <BSP_SD_GetCardState>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d102      	bne.n	800640e <SD_write+0x8a>
          {
            res = RES_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	75fb      	strb	r3, [r7, #23]
            break;
 800640c:	e008      	b.n	8006420 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800640e:	f7fb f96f 	bl	80016f0 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	f247 522f 	movw	r2, #29999	; 0x752f
 800641c:	4293      	cmp	r3, r2
 800641e:	d9ee      	bls.n	80063fe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006420:	7dfb      	ldrb	r3, [r7, #23]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000598 	.word	0x20000598

08006430 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08c      	sub	sp, #48	; 0x30
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	603a      	str	r2, [r7, #0]
 800643a:	71fb      	strb	r3, [r7, #7]
 800643c:	460b      	mov	r3, r1
 800643e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006446:	4b25      	ldr	r3, [pc, #148]	; (80064dc <SD_ioctl+0xac>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <SD_ioctl+0x28>
 8006454:	2303      	movs	r3, #3
 8006456:	e03c      	b.n	80064d2 <SD_ioctl+0xa2>

  switch (cmd)
 8006458:	79bb      	ldrb	r3, [r7, #6]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d834      	bhi.n	80064c8 <SD_ioctl+0x98>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <SD_ioctl+0x34>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	08006475 	.word	0x08006475
 8006468:	0800647d 	.word	0x0800647d
 800646c:	08006495 	.word	0x08006495
 8006470:	080064af 	.word	0x080064af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800647a:	e028      	b.n	80064ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800647c:	f107 030c 	add.w	r3, r7, #12
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff fe67 	bl	8006154 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006492:	e01c      	b.n	80064ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006494:	f107 030c 	add.w	r3, r7, #12
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fe5b 	bl	8006154 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80064ac:	e00f      	b.n	80064ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80064ae:	f107 030c 	add.w	r3, r7, #12
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff fe4e 	bl	8006154 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	0a5a      	lsrs	r2, r3, #9
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80064c6:	e002      	b.n	80064ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80064c8:	2304      	movs	r3, #4
 80064ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80064ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3730      	adds	r7, #48	; 0x30
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000009 	.word	0x20000009

080064e0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80064e4:	4b03      	ldr	r3, [pc, #12]	; (80064f4 <BSP_SD_WriteCpltCallback+0x14>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
}
 80064ea:	bf00      	nop
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	20000598 	.word	0x20000598

080064f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80064fc:	4b03      	ldr	r3, [pc, #12]	; (800650c <BSP_SD_ReadCpltCallback+0x14>)
 80064fe:	2201      	movs	r2, #1
 8006500:	601a      	str	r2, [r3, #0]
}
 8006502:	bf00      	nop
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	2000059c 	.word	0x2000059c

08006510 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	4a08      	ldr	r2, [pc, #32]	; (8006540 <disk_status+0x30>)
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	79fa      	ldrb	r2, [r7, #7]
 8006528:	4905      	ldr	r1, [pc, #20]	; (8006540 <disk_status+0x30>)
 800652a:	440a      	add	r2, r1
 800652c:	7a12      	ldrb	r2, [r2, #8]
 800652e:	4610      	mov	r0, r2
 8006530:	4798      	blx	r3
 8006532:	4603      	mov	r3, r0
 8006534:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006536:	7bfb      	ldrb	r3, [r7, #15]
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	200005c8 	.word	0x200005c8

08006544 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	4a0d      	ldr	r2, [pc, #52]	; (800658c <disk_initialize+0x48>)
 8006556:	5cd3      	ldrb	r3, [r2, r3]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d111      	bne.n	8006580 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	4a0b      	ldr	r2, [pc, #44]	; (800658c <disk_initialize+0x48>)
 8006560:	2101      	movs	r1, #1
 8006562:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	4a09      	ldr	r2, [pc, #36]	; (800658c <disk_initialize+0x48>)
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	79fa      	ldrb	r2, [r7, #7]
 8006572:	4906      	ldr	r1, [pc, #24]	; (800658c <disk_initialize+0x48>)
 8006574:	440a      	add	r2, r1
 8006576:	7a12      	ldrb	r2, [r2, #8]
 8006578:	4610      	mov	r0, r2
 800657a:	4798      	blx	r3
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	200005c8 	.word	0x200005c8

08006590 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4603      	mov	r3, r0
 800659e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	4a0a      	ldr	r2, [pc, #40]	; (80065cc <disk_read+0x3c>)
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	689c      	ldr	r4, [r3, #8]
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	4a07      	ldr	r2, [pc, #28]	; (80065cc <disk_read+0x3c>)
 80065b0:	4413      	add	r3, r2
 80065b2:	7a18      	ldrb	r0, [r3, #8]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	47a0      	blx	r4
 80065bc:	4603      	mov	r3, r0
 80065be:	75fb      	strb	r3, [r7, #23]
  return res;
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd90      	pop	{r4, r7, pc}
 80065ca:	bf00      	nop
 80065cc:	200005c8 	.word	0x200005c8

080065d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	607a      	str	r2, [r7, #4]
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	4a0a      	ldr	r2, [pc, #40]	; (800660c <disk_write+0x3c>)
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	68dc      	ldr	r4, [r3, #12]
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	4a07      	ldr	r2, [pc, #28]	; (800660c <disk_write+0x3c>)
 80065f0:	4413      	add	r3, r2
 80065f2:	7a18      	ldrb	r0, [r3, #8]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	68b9      	ldr	r1, [r7, #8]
 80065fa:	47a0      	blx	r4
 80065fc:	4603      	mov	r3, r0
 80065fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8006600:	7dfb      	ldrb	r3, [r7, #23]
}
 8006602:	4618      	mov	r0, r3
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	bd90      	pop	{r4, r7, pc}
 800660a:	bf00      	nop
 800660c:	200005c8 	.word	0x200005c8

08006610 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3301      	adds	r3, #1
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006620:	89fb      	ldrh	r3, [r7, #14]
 8006622:	021b      	lsls	r3, r3, #8
 8006624:	b21a      	sxth	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	b21b      	sxth	r3, r3
 800662c:	4313      	orrs	r3, r2
 800662e:	b21b      	sxth	r3, r3
 8006630:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006632:	89fb      	ldrh	r3, [r7, #14]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3303      	adds	r3, #3
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	3202      	adds	r2, #2
 8006658:	7812      	ldrb	r2, [r2, #0]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	021b      	lsls	r3, r3, #8
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	3201      	adds	r2, #1
 8006666:	7812      	ldrb	r2, [r2, #0]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	7812      	ldrb	r2, [r2, #0]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
	return rv;
 8006678:	68fb      	ldr	r3, [r7, #12]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e010      	b.n	80066b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006696:	4a0d      	ldr	r2, [pc, #52]	; (80066cc <clear_lock+0x44>)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	4413      	add	r3, r2
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d105      	bne.n	80066b2 <clear_lock+0x2a>
 80066a6:	4a09      	ldr	r2, [pc, #36]	; (80066cc <clear_lock+0x44>)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	4413      	add	r3, r2
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3301      	adds	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d9eb      	bls.n	8006696 <clear_lock+0xe>
	}
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	200005a8 	.word	0x200005a8

080066d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	78db      	ldrb	r3, [r3, #3]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d034      	beq.n	800674e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	7858      	ldrb	r0, [r3, #1]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80066f4:	2301      	movs	r3, #1
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	f7ff ff6a 	bl	80065d0 <disk_write>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006702:	2301      	movs	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
 8006706:	e022      	b.n	800674e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	1ad2      	subs	r2, r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	429a      	cmp	r2, r3
 800671c:	d217      	bcs.n	800674e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	789b      	ldrb	r3, [r3, #2]
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	e010      	b.n	8006748 <sync_window+0x78>
					wsect += fs->fsize;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4413      	add	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	7858      	ldrb	r0, [r3, #1]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800673a:	2301      	movs	r3, #1
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	f7ff ff47 	bl	80065d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	3b01      	subs	r3, #1
 8006746:	613b      	str	r3, [r7, #16]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d8eb      	bhi.n	8006726 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	429a      	cmp	r2, r3
 800676e:	d01b      	beq.n	80067a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff ffad 	bl	80066d0 <sync_window>
 8006776:	4603      	mov	r3, r0
 8006778:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d113      	bne.n	80067a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	7858      	ldrb	r0, [r3, #1]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800678a:	2301      	movs	r3, #1
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	f7ff feff 	bl	8006590 <disk_read>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d004      	beq.n	80067a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006798:	f04f 33ff 	mov.w	r3, #4294967295
 800679c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800679e:	2301      	movs	r3, #1
 80067a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b087      	sub	sp, #28
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80067ba:	f04f 33ff 	mov.w	r3, #4294967295
 80067be:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d031      	beq.n	800682c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	e002      	b.n	80067d6 <get_ldnumber+0x24>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	3301      	adds	r3, #1
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d903      	bls.n	80067e6 <get_ldnumber+0x34>
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b3a      	cmp	r3, #58	; 0x3a
 80067e4:	d1f4      	bne.n	80067d0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b3a      	cmp	r3, #58	; 0x3a
 80067ec:	d11c      	bne.n	8006828 <get_ldnumber+0x76>
			tp = *path;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	60fa      	str	r2, [r7, #12]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	3b30      	subs	r3, #48	; 0x30
 80067fe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b09      	cmp	r3, #9
 8006804:	d80e      	bhi.n	8006824 <get_ldnumber+0x72>
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	429a      	cmp	r2, r3
 800680c:	d10a      	bne.n	8006824 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d107      	bne.n	8006824 <get_ldnumber+0x72>
					vol = (int)i;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3301      	adds	r3, #1
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	e002      	b.n	800682e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006828:	2300      	movs	r3, #0
 800682a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800682c:	693b      	ldr	r3, [r7, #16]
}
 800682e:	4618      	mov	r0, r3
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	70da      	strb	r2, [r3, #3]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f04f 32ff 	mov.w	r2, #4294967295
 8006852:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff ff7e 	bl	8006758 <move_window>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <check_fs+0x2a>
 8006862:	2304      	movs	r3, #4
 8006864:	e038      	b.n	80068d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3330      	adds	r3, #48	; 0x30
 800686a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fece 	bl	8006610 <ld_word>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800687c:	429a      	cmp	r2, r3
 800687e:	d001      	beq.n	8006884 <check_fs+0x48>
 8006880:	2303      	movs	r3, #3
 8006882:	e029      	b.n	80068d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800688a:	2be9      	cmp	r3, #233	; 0xe9
 800688c:	d009      	beq.n	80068a2 <check_fs+0x66>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006894:	2beb      	cmp	r3, #235	; 0xeb
 8006896:	d11e      	bne.n	80068d6 <check_fs+0x9a>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800689e:	2b90      	cmp	r3, #144	; 0x90
 80068a0:	d119      	bne.n	80068d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3330      	adds	r3, #48	; 0x30
 80068a6:	3336      	adds	r3, #54	; 0x36
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff fec9 	bl	8006640 <ld_dword>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80068b4:	4a0a      	ldr	r2, [pc, #40]	; (80068e0 <check_fs+0xa4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d101      	bne.n	80068be <check_fs+0x82>
 80068ba:	2300      	movs	r3, #0
 80068bc:	e00c      	b.n	80068d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3330      	adds	r3, #48	; 0x30
 80068c2:	3352      	adds	r3, #82	; 0x52
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff febb 	bl	8006640 <ld_dword>
 80068ca:	4603      	mov	r3, r0
 80068cc:	4a05      	ldr	r2, [pc, #20]	; (80068e4 <check_fs+0xa8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d101      	bne.n	80068d6 <check_fs+0x9a>
 80068d2:	2300      	movs	r3, #0
 80068d4:	e000      	b.n	80068d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80068d6:	2302      	movs	r3, #2
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	00544146 	.word	0x00544146
 80068e4:	33544146 	.word	0x33544146

080068e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b096      	sub	sp, #88	; 0x58
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff ff58 	bl	80067b2 <get_ldnumber>
 8006902:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006906:	2b00      	cmp	r3, #0
 8006908:	da01      	bge.n	800690e <find_volume+0x26>
 800690a:	230b      	movs	r3, #11
 800690c:	e22d      	b.n	8006d6a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800690e:	4aa1      	ldr	r2, [pc, #644]	; (8006b94 <find_volume+0x2ac>)
 8006910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006916:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	2b00      	cmp	r3, #0
 800691c:	d101      	bne.n	8006922 <find_volume+0x3a>
 800691e:	230c      	movs	r3, #12
 8006920:	e223      	b.n	8006d6a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006926:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d01a      	beq.n	800696e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff fde7 	bl	8006510 <disk_status>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10c      	bne.n	800696e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006954:	79fb      	ldrb	r3, [r7, #7]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d007      	beq.n	800696a <find_volume+0x82>
 800695a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006966:	230a      	movs	r3, #10
 8006968:	e1ff      	b.n	8006d6a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800696a:	2300      	movs	r3, #0
 800696c:	e1fd      	b.n	8006d6a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	2200      	movs	r2, #0
 8006972:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006976:	b2da      	uxtb	r2, r3
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	4618      	mov	r0, r3
 8006982:	f7ff fddf 	bl	8006544 <disk_initialize>
 8006986:	4603      	mov	r3, r0
 8006988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800698c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006998:	2303      	movs	r3, #3
 800699a:	e1e6      	b.n	8006d6a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <find_volume+0xca>
 80069a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80069ae:	230a      	movs	r3, #10
 80069b0:	e1db      	b.n	8006d6a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80069b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069ba:	f7ff ff3f 	bl	800683c <check_fs>
 80069be:	4603      	mov	r3, r0
 80069c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80069c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d149      	bne.n	8006a60 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80069cc:	2300      	movs	r3, #0
 80069ce:	643b      	str	r3, [r7, #64]	; 0x40
 80069d0:	e01e      	b.n	8006a10 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80069e0:	4413      	add	r3, r2
 80069e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80069e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e6:	3304      	adds	r3, #4
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d006      	beq.n	80069fc <find_volume+0x114>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	3308      	adds	r3, #8
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7ff fe24 	bl	8006640 <ld_dword>
 80069f8:	4602      	mov	r2, r0
 80069fa:	e000      	b.n	80069fe <find_volume+0x116>
 80069fc:	2200      	movs	r2, #0
 80069fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	3358      	adds	r3, #88	; 0x58
 8006a04:	443b      	add	r3, r7
 8006a06:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8006a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d9dd      	bls.n	80069d2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006a16:	2300      	movs	r3, #0
 8006a18:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <find_volume+0x13e>
 8006a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a22:	3b01      	subs	r3, #1
 8006a24:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	3358      	adds	r3, #88	; 0x58
 8006a2c:	443b      	add	r3, r7
 8006a2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006a32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <find_volume+0x15e>
 8006a3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a3e:	f7ff fefd 	bl	800683c <check_fs>
 8006a42:	4603      	mov	r3, r0
 8006a44:	e000      	b.n	8006a48 <find_volume+0x160>
 8006a46:	2303      	movs	r3, #3
 8006a48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d905      	bls.n	8006a60 <find_volume+0x178>
 8006a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a56:	3301      	adds	r3, #1
 8006a58:	643b      	str	r3, [r7, #64]	; 0x40
 8006a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d9e2      	bls.n	8006a26 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d101      	bne.n	8006a6c <find_volume+0x184>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e17e      	b.n	8006d6a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d901      	bls.n	8006a78 <find_volume+0x190>
 8006a74:	230d      	movs	r3, #13
 8006a76:	e178      	b.n	8006d6a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	3330      	adds	r3, #48	; 0x30
 8006a7c:	330b      	adds	r3, #11
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff fdc6 	bl	8006610 <ld_word>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8a:	d001      	beq.n	8006a90 <find_volume+0x1a8>
 8006a8c:	230d      	movs	r3, #13
 8006a8e:	e16c      	b.n	8006d6a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	3330      	adds	r3, #48	; 0x30
 8006a94:	3316      	adds	r3, #22
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fdba 	bl	8006610 <ld_word>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d106      	bne.n	8006ab4 <find_volume+0x1cc>
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	3330      	adds	r3, #48	; 0x30
 8006aaa:	3324      	adds	r3, #36	; 0x24
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff fdc7 	bl	8006640 <ld_dword>
 8006ab2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ab8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	789b      	ldrb	r3, [r3, #2]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d005      	beq.n	8006ad8 <find_volume+0x1f0>
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	789b      	ldrb	r3, [r3, #2]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d001      	beq.n	8006ad8 <find_volume+0x1f0>
 8006ad4:	230d      	movs	r3, #13
 8006ad6:	e148      	b.n	8006d6a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	789b      	ldrb	r3, [r3, #2]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	895b      	ldrh	r3, [r3, #10]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d008      	beq.n	8006b0c <find_volume+0x224>
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	895b      	ldrh	r3, [r3, #10]
 8006afe:	461a      	mov	r2, r3
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	895b      	ldrh	r3, [r3, #10]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <find_volume+0x228>
 8006b0c:	230d      	movs	r3, #13
 8006b0e:	e12c      	b.n	8006d6a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	3330      	adds	r3, #48	; 0x30
 8006b14:	3311      	adds	r3, #17
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fd7a 	bl	8006610 <ld_word>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	891b      	ldrh	r3, [r3, #8]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <find_volume+0x24e>
 8006b32:	230d      	movs	r3, #13
 8006b34:	e119      	b.n	8006d6a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b38:	3330      	adds	r3, #48	; 0x30
 8006b3a:	3313      	adds	r3, #19
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff fd67 	bl	8006610 <ld_word>
 8006b42:	4603      	mov	r3, r0
 8006b44:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <find_volume+0x272>
 8006b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4e:	3330      	adds	r3, #48	; 0x30
 8006b50:	3320      	adds	r3, #32
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fd74 	bl	8006640 <ld_dword>
 8006b58:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	3330      	adds	r3, #48	; 0x30
 8006b5e:	330e      	adds	r3, #14
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fd55 	bl	8006610 <ld_word>
 8006b66:	4603      	mov	r3, r0
 8006b68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006b6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <find_volume+0x28c>
 8006b70:	230d      	movs	r3, #13
 8006b72:	e0fa      	b.n	8006d6a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006b74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b78:	4413      	add	r3, r2
 8006b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b7c:	8912      	ldrh	r2, [r2, #8]
 8006b7e:	0912      	lsrs	r2, r2, #4
 8006b80:	b292      	uxth	r2, r2
 8006b82:	4413      	add	r3, r2
 8006b84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d204      	bcs.n	8006b98 <find_volume+0x2b0>
 8006b8e:	230d      	movs	r3, #13
 8006b90:	e0eb      	b.n	8006d6a <find_volume+0x482>
 8006b92:	bf00      	nop
 8006b94:	200005a0 	.word	0x200005a0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ba0:	8952      	ldrh	r2, [r2, #10]
 8006ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ba6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <find_volume+0x2ca>
 8006bae:	230d      	movs	r3, #13
 8006bb0:	e0db      	b.n	8006d6a <find_volume+0x482>
		fmt = FS_FAT32;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d802      	bhi.n	8006bc8 <find_volume+0x2e0>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d802      	bhi.n	8006bd8 <find_volume+0x2f0>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	1c9a      	adds	r2, r3, #2
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006be4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006be6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bea:	441a      	add	r2, r3
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006bf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf4:	441a      	add	r2, r3
 8006bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006bfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d11e      	bne.n	8006c40 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	3330      	adds	r3, #48	; 0x30
 8006c06:	332a      	adds	r3, #42	; 0x2a
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fd01 	bl	8006610 <ld_word>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <find_volume+0x330>
 8006c14:	230d      	movs	r3, #13
 8006c16:	e0a8      	b.n	8006d6a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	891b      	ldrh	r3, [r3, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <find_volume+0x33c>
 8006c20:	230d      	movs	r3, #13
 8006c22:	e0a2      	b.n	8006d6a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	3330      	adds	r3, #48	; 0x30
 8006c28:	332c      	adds	r3, #44	; 0x2c
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff fd08 	bl	8006640 <ld_dword>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c3e:	e01f      	b.n	8006c80 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	891b      	ldrh	r3, [r3, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <find_volume+0x364>
 8006c48:	230d      	movs	r3, #13
 8006c4a:	e08e      	b.n	8006d6a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	6a1a      	ldr	r2, [r3, #32]
 8006c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c52:	441a      	add	r2, r3
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d103      	bne.n	8006c68 <find_volume+0x380>
 8006c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	e00a      	b.n	8006c7e <find_volume+0x396>
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	4413      	add	r3, r2
 8006c72:	085a      	lsrs	r2, r3, #1
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006c7e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006c8a:	0a5b      	lsrs	r3, r3, #9
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d201      	bcs.n	8006c94 <find_volume+0x3ac>
 8006c90:	230d      	movs	r3, #13
 8006c92:	e06a      	b.n	8006d6a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	611a      	str	r2, [r3, #16]
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	691a      	ldr	r2, [r3, #16]
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	2280      	movs	r2, #128	; 0x80
 8006ca8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cae:	2b03      	cmp	r3, #3
 8006cb0:	d149      	bne.n	8006d46 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	3330      	adds	r3, #48	; 0x30
 8006cb6:	3330      	adds	r3, #48	; 0x30
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff fca9 	bl	8006610 <ld_word>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d140      	bne.n	8006d46 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ccc:	f7ff fd44 	bl	8006758 <move_window>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d137      	bne.n	8006d46 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	2200      	movs	r2, #0
 8006cda:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	3330      	adds	r3, #48	; 0x30
 8006ce0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff fc93 	bl	8006610 <ld_word>
 8006cea:	4603      	mov	r3, r0
 8006cec:	461a      	mov	r2, r3
 8006cee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d127      	bne.n	8006d46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf8:	3330      	adds	r3, #48	; 0x30
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fca0 	bl	8006640 <ld_dword>
 8006d00:	4603      	mov	r3, r0
 8006d02:	4a1c      	ldr	r2, [pc, #112]	; (8006d74 <find_volume+0x48c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d11e      	bne.n	8006d46 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	3330      	adds	r3, #48	; 0x30
 8006d0c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff fc95 	bl	8006640 <ld_dword>
 8006d16:	4603      	mov	r3, r0
 8006d18:	4a17      	ldr	r2, [pc, #92]	; (8006d78 <find_volume+0x490>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d113      	bne.n	8006d46 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	3330      	adds	r3, #48	; 0x30
 8006d22:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7ff fc8a 	bl	8006640 <ld_dword>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	3330      	adds	r3, #48	; 0x30
 8006d36:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff fc80 	bl	8006640 <ld_dword>
 8006d40:	4602      	mov	r2, r0
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006d4c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <find_volume+0x494>)
 8006d50:	881b      	ldrh	r3, [r3, #0]
 8006d52:	3301      	adds	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	4b09      	ldr	r3, [pc, #36]	; (8006d7c <find_volume+0x494>)
 8006d58:	801a      	strh	r2, [r3, #0]
 8006d5a:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <find_volume+0x494>)
 8006d5c:	881a      	ldrh	r2, [r3, #0]
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006d62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d64:	f7ff fc90 	bl	8006688 <clear_lock>
#endif
	return FR_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3758      	adds	r7, #88	; 0x58
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	41615252 	.word	0x41615252
 8006d78:	61417272 	.word	0x61417272
 8006d7c:	200005a4 	.word	0x200005a4

08006d80 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006d92:	f107 0310 	add.w	r3, r7, #16
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff fd0b 	bl	80067b2 <get_ldnumber>
 8006d9c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da01      	bge.n	8006da8 <f_mount+0x28>
 8006da4:	230b      	movs	r3, #11
 8006da6:	e02b      	b.n	8006e00 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006da8:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <f_mount+0x88>)
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006db8:	69b8      	ldr	r0, [r7, #24]
 8006dba:	f7ff fc65 	bl	8006688 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	490d      	ldr	r1, [pc, #52]	; (8006e08 <f_mount+0x88>)
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <f_mount+0x66>
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d001      	beq.n	8006dea <f_mount+0x6a>
 8006de6:	2300      	movs	r3, #0
 8006de8:	e00a      	b.n	8006e00 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006dea:	f107 010c 	add.w	r1, r7, #12
 8006dee:	f107 0308 	add.w	r3, r7, #8
 8006df2:	2200      	movs	r2, #0
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7ff fd77 	bl	80068e8 <find_volume>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3720      	adds	r7, #32
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	200005a0 	.word	0x200005a0

08006e0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	4613      	mov	r3, r2
 8006e18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006e22:	4b1f      	ldr	r3, [pc, #124]	; (8006ea0 <FATFS_LinkDriverEx+0x94>)
 8006e24:	7a5b      	ldrb	r3, [r3, #9]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d131      	bne.n	8006e90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e2c:	4b1c      	ldr	r3, [pc, #112]	; (8006ea0 <FATFS_LinkDriverEx+0x94>)
 8006e2e:	7a5b      	ldrb	r3, [r3, #9]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	4b1a      	ldr	r3, [pc, #104]	; (8006ea0 <FATFS_LinkDriverEx+0x94>)
 8006e36:	2100      	movs	r1, #0
 8006e38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006e3a:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <FATFS_LinkDriverEx+0x94>)
 8006e3c:	7a5b      	ldrb	r3, [r3, #9]
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	4a17      	ldr	r2, [pc, #92]	; (8006ea0 <FATFS_LinkDriverEx+0x94>)
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006e4a:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <FATFS_LinkDriverEx+0x94>)
 8006e4c:	7a5b      	ldrb	r3, [r3, #9]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	4b13      	ldr	r3, [pc, #76]	; (8006ea0 <FATFS_LinkDriverEx+0x94>)
 8006e54:	4413      	add	r3, r2
 8006e56:	79fa      	ldrb	r2, [r7, #7]
 8006e58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006e5a:	4b11      	ldr	r3, [pc, #68]	; (8006ea0 <FATFS_LinkDriverEx+0x94>)
 8006e5c:	7a5b      	ldrb	r3, [r3, #9]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	b2d1      	uxtb	r1, r2
 8006e64:	4a0e      	ldr	r2, [pc, #56]	; (8006ea0 <FATFS_LinkDriverEx+0x94>)
 8006e66:	7251      	strb	r1, [r2, #9]
 8006e68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006e6a:	7dbb      	ldrb	r3, [r7, #22]
 8006e6c:	3330      	adds	r3, #48	; 0x30
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	3301      	adds	r3, #1
 8006e78:	223a      	movs	r2, #58	; 0x3a
 8006e7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	3302      	adds	r3, #2
 8006e80:	222f      	movs	r2, #47	; 0x2f
 8006e82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	3303      	adds	r3, #3
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	200005c8 	.word	0x200005c8

08006ea4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006eae:	2200      	movs	r2, #0
 8006eb0:	6839      	ldr	r1, [r7, #0]
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff ffaa 	bl	8006e0c <FATFS_LinkDriverEx>
 8006eb8:	4603      	mov	r3, r0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <__errno>:
 8006ec4:	4b01      	ldr	r3, [pc, #4]	; (8006ecc <__errno+0x8>)
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	2000000c 	.word	0x2000000c

08006ed0 <__libc_init_array>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4d0d      	ldr	r5, [pc, #52]	; (8006f08 <__libc_init_array+0x38>)
 8006ed4:	4c0d      	ldr	r4, [pc, #52]	; (8006f0c <__libc_init_array+0x3c>)
 8006ed6:	1b64      	subs	r4, r4, r5
 8006ed8:	10a4      	asrs	r4, r4, #2
 8006eda:	2600      	movs	r6, #0
 8006edc:	42a6      	cmp	r6, r4
 8006ede:	d109      	bne.n	8006ef4 <__libc_init_array+0x24>
 8006ee0:	4d0b      	ldr	r5, [pc, #44]	; (8006f10 <__libc_init_array+0x40>)
 8006ee2:	4c0c      	ldr	r4, [pc, #48]	; (8006f14 <__libc_init_array+0x44>)
 8006ee4:	f000 fca8 	bl	8007838 <_init>
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	2600      	movs	r6, #0
 8006eee:	42a6      	cmp	r6, r4
 8006ef0:	d105      	bne.n	8006efe <__libc_init_array+0x2e>
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef8:	4798      	blx	r3
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7ee      	b.n	8006edc <__libc_init_array+0xc>
 8006efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f02:	4798      	blx	r3
 8006f04:	3601      	adds	r6, #1
 8006f06:	e7f2      	b.n	8006eee <__libc_init_array+0x1e>
 8006f08:	0800793c 	.word	0x0800793c
 8006f0c:	0800793c 	.word	0x0800793c
 8006f10:	0800793c 	.word	0x0800793c
 8006f14:	08007940 	.word	0x08007940

08006f18 <memset>:
 8006f18:	4402      	add	r2, r0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d100      	bne.n	8006f22 <memset+0xa>
 8006f20:	4770      	bx	lr
 8006f22:	f803 1b01 	strb.w	r1, [r3], #1
 8006f26:	e7f9      	b.n	8006f1c <memset+0x4>

08006f28 <_vsniprintf_r>:
 8006f28:	b530      	push	{r4, r5, lr}
 8006f2a:	4614      	mov	r4, r2
 8006f2c:	2c00      	cmp	r4, #0
 8006f2e:	b09b      	sub	sp, #108	; 0x6c
 8006f30:	4605      	mov	r5, r0
 8006f32:	461a      	mov	r2, r3
 8006f34:	da05      	bge.n	8006f42 <_vsniprintf_r+0x1a>
 8006f36:	238b      	movs	r3, #139	; 0x8b
 8006f38:	6003      	str	r3, [r0, #0]
 8006f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f3e:	b01b      	add	sp, #108	; 0x6c
 8006f40:	bd30      	pop	{r4, r5, pc}
 8006f42:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006f46:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006f4a:	bf14      	ite	ne
 8006f4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f50:	4623      	moveq	r3, r4
 8006f52:	9302      	str	r3, [sp, #8]
 8006f54:	9305      	str	r3, [sp, #20]
 8006f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f5a:	9100      	str	r1, [sp, #0]
 8006f5c:	9104      	str	r1, [sp, #16]
 8006f5e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006f62:	4669      	mov	r1, sp
 8006f64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f66:	f000 f875 	bl	8007054 <_svfiprintf_r>
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	bfbc      	itt	lt
 8006f6e:	238b      	movlt	r3, #139	; 0x8b
 8006f70:	602b      	strlt	r3, [r5, #0]
 8006f72:	2c00      	cmp	r4, #0
 8006f74:	d0e3      	beq.n	8006f3e <_vsniprintf_r+0x16>
 8006f76:	9b00      	ldr	r3, [sp, #0]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	e7df      	b.n	8006f3e <_vsniprintf_r+0x16>
	...

08006f80 <vsniprintf>:
 8006f80:	b507      	push	{r0, r1, r2, lr}
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	460a      	mov	r2, r1
 8006f88:	4601      	mov	r1, r0
 8006f8a:	4803      	ldr	r0, [pc, #12]	; (8006f98 <vsniprintf+0x18>)
 8006f8c:	6800      	ldr	r0, [r0, #0]
 8006f8e:	f7ff ffcb 	bl	8006f28 <_vsniprintf_r>
 8006f92:	b003      	add	sp, #12
 8006f94:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f98:	2000000c 	.word	0x2000000c

08006f9c <__ssputs_r>:
 8006f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	688e      	ldr	r6, [r1, #8]
 8006fa2:	429e      	cmp	r6, r3
 8006fa4:	4682      	mov	sl, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	4690      	mov	r8, r2
 8006faa:	461f      	mov	r7, r3
 8006fac:	d838      	bhi.n	8007020 <__ssputs_r+0x84>
 8006fae:	898a      	ldrh	r2, [r1, #12]
 8006fb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fb4:	d032      	beq.n	800701c <__ssputs_r+0x80>
 8006fb6:	6825      	ldr	r5, [r4, #0]
 8006fb8:	6909      	ldr	r1, [r1, #16]
 8006fba:	eba5 0901 	sub.w	r9, r5, r1
 8006fbe:	6965      	ldr	r5, [r4, #20]
 8006fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fc8:	3301      	adds	r3, #1
 8006fca:	444b      	add	r3, r9
 8006fcc:	106d      	asrs	r5, r5, #1
 8006fce:	429d      	cmp	r5, r3
 8006fd0:	bf38      	it	cc
 8006fd2:	461d      	movcc	r5, r3
 8006fd4:	0553      	lsls	r3, r2, #21
 8006fd6:	d531      	bpl.n	800703c <__ssputs_r+0xa0>
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f000 fb63 	bl	80076a4 <_malloc_r>
 8006fde:	4606      	mov	r6, r0
 8006fe0:	b950      	cbnz	r0, 8006ff8 <__ssputs_r+0x5c>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	f8ca 3000 	str.w	r3, [sl]
 8006fe8:	89a3      	ldrh	r3, [r4, #12]
 8006fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	6921      	ldr	r1, [r4, #16]
 8006ffa:	464a      	mov	r2, r9
 8006ffc:	f000 fabe 	bl	800757c <memcpy>
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700a:	81a3      	strh	r3, [r4, #12]
 800700c:	6126      	str	r6, [r4, #16]
 800700e:	6165      	str	r5, [r4, #20]
 8007010:	444e      	add	r6, r9
 8007012:	eba5 0509 	sub.w	r5, r5, r9
 8007016:	6026      	str	r6, [r4, #0]
 8007018:	60a5      	str	r5, [r4, #8]
 800701a:	463e      	mov	r6, r7
 800701c:	42be      	cmp	r6, r7
 800701e:	d900      	bls.n	8007022 <__ssputs_r+0x86>
 8007020:	463e      	mov	r6, r7
 8007022:	6820      	ldr	r0, [r4, #0]
 8007024:	4632      	mov	r2, r6
 8007026:	4641      	mov	r1, r8
 8007028:	f000 fab6 	bl	8007598 <memmove>
 800702c:	68a3      	ldr	r3, [r4, #8]
 800702e:	1b9b      	subs	r3, r3, r6
 8007030:	60a3      	str	r3, [r4, #8]
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	4433      	add	r3, r6
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	2000      	movs	r0, #0
 800703a:	e7db      	b.n	8006ff4 <__ssputs_r+0x58>
 800703c:	462a      	mov	r2, r5
 800703e:	f000 fba5 	bl	800778c <_realloc_r>
 8007042:	4606      	mov	r6, r0
 8007044:	2800      	cmp	r0, #0
 8007046:	d1e1      	bne.n	800700c <__ssputs_r+0x70>
 8007048:	6921      	ldr	r1, [r4, #16]
 800704a:	4650      	mov	r0, sl
 800704c:	f000 fabe 	bl	80075cc <_free_r>
 8007050:	e7c7      	b.n	8006fe2 <__ssputs_r+0x46>
	...

08007054 <_svfiprintf_r>:
 8007054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007058:	4698      	mov	r8, r3
 800705a:	898b      	ldrh	r3, [r1, #12]
 800705c:	061b      	lsls	r3, r3, #24
 800705e:	b09d      	sub	sp, #116	; 0x74
 8007060:	4607      	mov	r7, r0
 8007062:	460d      	mov	r5, r1
 8007064:	4614      	mov	r4, r2
 8007066:	d50e      	bpl.n	8007086 <_svfiprintf_r+0x32>
 8007068:	690b      	ldr	r3, [r1, #16]
 800706a:	b963      	cbnz	r3, 8007086 <_svfiprintf_r+0x32>
 800706c:	2140      	movs	r1, #64	; 0x40
 800706e:	f000 fb19 	bl	80076a4 <_malloc_r>
 8007072:	6028      	str	r0, [r5, #0]
 8007074:	6128      	str	r0, [r5, #16]
 8007076:	b920      	cbnz	r0, 8007082 <_svfiprintf_r+0x2e>
 8007078:	230c      	movs	r3, #12
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	e0d1      	b.n	8007226 <_svfiprintf_r+0x1d2>
 8007082:	2340      	movs	r3, #64	; 0x40
 8007084:	616b      	str	r3, [r5, #20]
 8007086:	2300      	movs	r3, #0
 8007088:	9309      	str	r3, [sp, #36]	; 0x24
 800708a:	2320      	movs	r3, #32
 800708c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007090:	f8cd 800c 	str.w	r8, [sp, #12]
 8007094:	2330      	movs	r3, #48	; 0x30
 8007096:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007240 <_svfiprintf_r+0x1ec>
 800709a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800709e:	f04f 0901 	mov.w	r9, #1
 80070a2:	4623      	mov	r3, r4
 80070a4:	469a      	mov	sl, r3
 80070a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070aa:	b10a      	cbz	r2, 80070b0 <_svfiprintf_r+0x5c>
 80070ac:	2a25      	cmp	r2, #37	; 0x25
 80070ae:	d1f9      	bne.n	80070a4 <_svfiprintf_r+0x50>
 80070b0:	ebba 0b04 	subs.w	fp, sl, r4
 80070b4:	d00b      	beq.n	80070ce <_svfiprintf_r+0x7a>
 80070b6:	465b      	mov	r3, fp
 80070b8:	4622      	mov	r2, r4
 80070ba:	4629      	mov	r1, r5
 80070bc:	4638      	mov	r0, r7
 80070be:	f7ff ff6d 	bl	8006f9c <__ssputs_r>
 80070c2:	3001      	adds	r0, #1
 80070c4:	f000 80aa 	beq.w	800721c <_svfiprintf_r+0x1c8>
 80070c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ca:	445a      	add	r2, fp
 80070cc:	9209      	str	r2, [sp, #36]	; 0x24
 80070ce:	f89a 3000 	ldrb.w	r3, [sl]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 80a2 	beq.w	800721c <_svfiprintf_r+0x1c8>
 80070d8:	2300      	movs	r3, #0
 80070da:	f04f 32ff 	mov.w	r2, #4294967295
 80070de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e2:	f10a 0a01 	add.w	sl, sl, #1
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	9307      	str	r3, [sp, #28]
 80070ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ee:	931a      	str	r3, [sp, #104]	; 0x68
 80070f0:	4654      	mov	r4, sl
 80070f2:	2205      	movs	r2, #5
 80070f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f8:	4851      	ldr	r0, [pc, #324]	; (8007240 <_svfiprintf_r+0x1ec>)
 80070fa:	f7f9 f891 	bl	8000220 <memchr>
 80070fe:	9a04      	ldr	r2, [sp, #16]
 8007100:	b9d8      	cbnz	r0, 800713a <_svfiprintf_r+0xe6>
 8007102:	06d0      	lsls	r0, r2, #27
 8007104:	bf44      	itt	mi
 8007106:	2320      	movmi	r3, #32
 8007108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800710c:	0711      	lsls	r1, r2, #28
 800710e:	bf44      	itt	mi
 8007110:	232b      	movmi	r3, #43	; 0x2b
 8007112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007116:	f89a 3000 	ldrb.w	r3, [sl]
 800711a:	2b2a      	cmp	r3, #42	; 0x2a
 800711c:	d015      	beq.n	800714a <_svfiprintf_r+0xf6>
 800711e:	9a07      	ldr	r2, [sp, #28]
 8007120:	4654      	mov	r4, sl
 8007122:	2000      	movs	r0, #0
 8007124:	f04f 0c0a 	mov.w	ip, #10
 8007128:	4621      	mov	r1, r4
 800712a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800712e:	3b30      	subs	r3, #48	; 0x30
 8007130:	2b09      	cmp	r3, #9
 8007132:	d94e      	bls.n	80071d2 <_svfiprintf_r+0x17e>
 8007134:	b1b0      	cbz	r0, 8007164 <_svfiprintf_r+0x110>
 8007136:	9207      	str	r2, [sp, #28]
 8007138:	e014      	b.n	8007164 <_svfiprintf_r+0x110>
 800713a:	eba0 0308 	sub.w	r3, r0, r8
 800713e:	fa09 f303 	lsl.w	r3, r9, r3
 8007142:	4313      	orrs	r3, r2
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	46a2      	mov	sl, r4
 8007148:	e7d2      	b.n	80070f0 <_svfiprintf_r+0x9c>
 800714a:	9b03      	ldr	r3, [sp, #12]
 800714c:	1d19      	adds	r1, r3, #4
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	9103      	str	r1, [sp, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	bfbb      	ittet	lt
 8007156:	425b      	neglt	r3, r3
 8007158:	f042 0202 	orrlt.w	r2, r2, #2
 800715c:	9307      	strge	r3, [sp, #28]
 800715e:	9307      	strlt	r3, [sp, #28]
 8007160:	bfb8      	it	lt
 8007162:	9204      	strlt	r2, [sp, #16]
 8007164:	7823      	ldrb	r3, [r4, #0]
 8007166:	2b2e      	cmp	r3, #46	; 0x2e
 8007168:	d10c      	bne.n	8007184 <_svfiprintf_r+0x130>
 800716a:	7863      	ldrb	r3, [r4, #1]
 800716c:	2b2a      	cmp	r3, #42	; 0x2a
 800716e:	d135      	bne.n	80071dc <_svfiprintf_r+0x188>
 8007170:	9b03      	ldr	r3, [sp, #12]
 8007172:	1d1a      	adds	r2, r3, #4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	9203      	str	r2, [sp, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	bfb8      	it	lt
 800717c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007180:	3402      	adds	r4, #2
 8007182:	9305      	str	r3, [sp, #20]
 8007184:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007250 <_svfiprintf_r+0x1fc>
 8007188:	7821      	ldrb	r1, [r4, #0]
 800718a:	2203      	movs	r2, #3
 800718c:	4650      	mov	r0, sl
 800718e:	f7f9 f847 	bl	8000220 <memchr>
 8007192:	b140      	cbz	r0, 80071a6 <_svfiprintf_r+0x152>
 8007194:	2340      	movs	r3, #64	; 0x40
 8007196:	eba0 000a 	sub.w	r0, r0, sl
 800719a:	fa03 f000 	lsl.w	r0, r3, r0
 800719e:	9b04      	ldr	r3, [sp, #16]
 80071a0:	4303      	orrs	r3, r0
 80071a2:	3401      	adds	r4, #1
 80071a4:	9304      	str	r3, [sp, #16]
 80071a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071aa:	4826      	ldr	r0, [pc, #152]	; (8007244 <_svfiprintf_r+0x1f0>)
 80071ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071b0:	2206      	movs	r2, #6
 80071b2:	f7f9 f835 	bl	8000220 <memchr>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d038      	beq.n	800722c <_svfiprintf_r+0x1d8>
 80071ba:	4b23      	ldr	r3, [pc, #140]	; (8007248 <_svfiprintf_r+0x1f4>)
 80071bc:	bb1b      	cbnz	r3, 8007206 <_svfiprintf_r+0x1b2>
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	3307      	adds	r3, #7
 80071c2:	f023 0307 	bic.w	r3, r3, #7
 80071c6:	3308      	adds	r3, #8
 80071c8:	9303      	str	r3, [sp, #12]
 80071ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071cc:	4433      	add	r3, r6
 80071ce:	9309      	str	r3, [sp, #36]	; 0x24
 80071d0:	e767      	b.n	80070a2 <_svfiprintf_r+0x4e>
 80071d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d6:	460c      	mov	r4, r1
 80071d8:	2001      	movs	r0, #1
 80071da:	e7a5      	b.n	8007128 <_svfiprintf_r+0xd4>
 80071dc:	2300      	movs	r3, #0
 80071de:	3401      	adds	r4, #1
 80071e0:	9305      	str	r3, [sp, #20]
 80071e2:	4619      	mov	r1, r3
 80071e4:	f04f 0c0a 	mov.w	ip, #10
 80071e8:	4620      	mov	r0, r4
 80071ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ee:	3a30      	subs	r2, #48	; 0x30
 80071f0:	2a09      	cmp	r2, #9
 80071f2:	d903      	bls.n	80071fc <_svfiprintf_r+0x1a8>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0c5      	beq.n	8007184 <_svfiprintf_r+0x130>
 80071f8:	9105      	str	r1, [sp, #20]
 80071fa:	e7c3      	b.n	8007184 <_svfiprintf_r+0x130>
 80071fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007200:	4604      	mov	r4, r0
 8007202:	2301      	movs	r3, #1
 8007204:	e7f0      	b.n	80071e8 <_svfiprintf_r+0x194>
 8007206:	ab03      	add	r3, sp, #12
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	462a      	mov	r2, r5
 800720c:	4b0f      	ldr	r3, [pc, #60]	; (800724c <_svfiprintf_r+0x1f8>)
 800720e:	a904      	add	r1, sp, #16
 8007210:	4638      	mov	r0, r7
 8007212:	f3af 8000 	nop.w
 8007216:	1c42      	adds	r2, r0, #1
 8007218:	4606      	mov	r6, r0
 800721a:	d1d6      	bne.n	80071ca <_svfiprintf_r+0x176>
 800721c:	89ab      	ldrh	r3, [r5, #12]
 800721e:	065b      	lsls	r3, r3, #25
 8007220:	f53f af2c 	bmi.w	800707c <_svfiprintf_r+0x28>
 8007224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007226:	b01d      	add	sp, #116	; 0x74
 8007228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722c:	ab03      	add	r3, sp, #12
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	462a      	mov	r2, r5
 8007232:	4b06      	ldr	r3, [pc, #24]	; (800724c <_svfiprintf_r+0x1f8>)
 8007234:	a904      	add	r1, sp, #16
 8007236:	4638      	mov	r0, r7
 8007238:	f000 f87a 	bl	8007330 <_printf_i>
 800723c:	e7eb      	b.n	8007216 <_svfiprintf_r+0x1c2>
 800723e:	bf00      	nop
 8007240:	08007900 	.word	0x08007900
 8007244:	0800790a 	.word	0x0800790a
 8007248:	00000000 	.word	0x00000000
 800724c:	08006f9d 	.word	0x08006f9d
 8007250:	08007906 	.word	0x08007906

08007254 <_printf_common>:
 8007254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007258:	4616      	mov	r6, r2
 800725a:	4699      	mov	r9, r3
 800725c:	688a      	ldr	r2, [r1, #8]
 800725e:	690b      	ldr	r3, [r1, #16]
 8007260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007264:	4293      	cmp	r3, r2
 8007266:	bfb8      	it	lt
 8007268:	4613      	movlt	r3, r2
 800726a:	6033      	str	r3, [r6, #0]
 800726c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007270:	4607      	mov	r7, r0
 8007272:	460c      	mov	r4, r1
 8007274:	b10a      	cbz	r2, 800727a <_printf_common+0x26>
 8007276:	3301      	adds	r3, #1
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	0699      	lsls	r1, r3, #26
 800727e:	bf42      	ittt	mi
 8007280:	6833      	ldrmi	r3, [r6, #0]
 8007282:	3302      	addmi	r3, #2
 8007284:	6033      	strmi	r3, [r6, #0]
 8007286:	6825      	ldr	r5, [r4, #0]
 8007288:	f015 0506 	ands.w	r5, r5, #6
 800728c:	d106      	bne.n	800729c <_printf_common+0x48>
 800728e:	f104 0a19 	add.w	sl, r4, #25
 8007292:	68e3      	ldr	r3, [r4, #12]
 8007294:	6832      	ldr	r2, [r6, #0]
 8007296:	1a9b      	subs	r3, r3, r2
 8007298:	42ab      	cmp	r3, r5
 800729a:	dc26      	bgt.n	80072ea <_printf_common+0x96>
 800729c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072a0:	1e13      	subs	r3, r2, #0
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	bf18      	it	ne
 80072a6:	2301      	movne	r3, #1
 80072a8:	0692      	lsls	r2, r2, #26
 80072aa:	d42b      	bmi.n	8007304 <_printf_common+0xb0>
 80072ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072b0:	4649      	mov	r1, r9
 80072b2:	4638      	mov	r0, r7
 80072b4:	47c0      	blx	r8
 80072b6:	3001      	adds	r0, #1
 80072b8:	d01e      	beq.n	80072f8 <_printf_common+0xa4>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	68e5      	ldr	r5, [r4, #12]
 80072be:	6832      	ldr	r2, [r6, #0]
 80072c0:	f003 0306 	and.w	r3, r3, #6
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	bf08      	it	eq
 80072c8:	1aad      	subeq	r5, r5, r2
 80072ca:	68a3      	ldr	r3, [r4, #8]
 80072cc:	6922      	ldr	r2, [r4, #16]
 80072ce:	bf0c      	ite	eq
 80072d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d4:	2500      	movne	r5, #0
 80072d6:	4293      	cmp	r3, r2
 80072d8:	bfc4      	itt	gt
 80072da:	1a9b      	subgt	r3, r3, r2
 80072dc:	18ed      	addgt	r5, r5, r3
 80072de:	2600      	movs	r6, #0
 80072e0:	341a      	adds	r4, #26
 80072e2:	42b5      	cmp	r5, r6
 80072e4:	d11a      	bne.n	800731c <_printf_common+0xc8>
 80072e6:	2000      	movs	r0, #0
 80072e8:	e008      	b.n	80072fc <_printf_common+0xa8>
 80072ea:	2301      	movs	r3, #1
 80072ec:	4652      	mov	r2, sl
 80072ee:	4649      	mov	r1, r9
 80072f0:	4638      	mov	r0, r7
 80072f2:	47c0      	blx	r8
 80072f4:	3001      	adds	r0, #1
 80072f6:	d103      	bne.n	8007300 <_printf_common+0xac>
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295
 80072fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007300:	3501      	adds	r5, #1
 8007302:	e7c6      	b.n	8007292 <_printf_common+0x3e>
 8007304:	18e1      	adds	r1, r4, r3
 8007306:	1c5a      	adds	r2, r3, #1
 8007308:	2030      	movs	r0, #48	; 0x30
 800730a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800730e:	4422      	add	r2, r4
 8007310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007318:	3302      	adds	r3, #2
 800731a:	e7c7      	b.n	80072ac <_printf_common+0x58>
 800731c:	2301      	movs	r3, #1
 800731e:	4622      	mov	r2, r4
 8007320:	4649      	mov	r1, r9
 8007322:	4638      	mov	r0, r7
 8007324:	47c0      	blx	r8
 8007326:	3001      	adds	r0, #1
 8007328:	d0e6      	beq.n	80072f8 <_printf_common+0xa4>
 800732a:	3601      	adds	r6, #1
 800732c:	e7d9      	b.n	80072e2 <_printf_common+0x8e>
	...

08007330 <_printf_i>:
 8007330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	7e0f      	ldrb	r7, [r1, #24]
 8007336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007338:	2f78      	cmp	r7, #120	; 0x78
 800733a:	4691      	mov	r9, r2
 800733c:	4680      	mov	r8, r0
 800733e:	460c      	mov	r4, r1
 8007340:	469a      	mov	sl, r3
 8007342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007346:	d807      	bhi.n	8007358 <_printf_i+0x28>
 8007348:	2f62      	cmp	r7, #98	; 0x62
 800734a:	d80a      	bhi.n	8007362 <_printf_i+0x32>
 800734c:	2f00      	cmp	r7, #0
 800734e:	f000 80d8 	beq.w	8007502 <_printf_i+0x1d2>
 8007352:	2f58      	cmp	r7, #88	; 0x58
 8007354:	f000 80a3 	beq.w	800749e <_printf_i+0x16e>
 8007358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800735c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007360:	e03a      	b.n	80073d8 <_printf_i+0xa8>
 8007362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007366:	2b15      	cmp	r3, #21
 8007368:	d8f6      	bhi.n	8007358 <_printf_i+0x28>
 800736a:	a101      	add	r1, pc, #4	; (adr r1, 8007370 <_printf_i+0x40>)
 800736c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007370:	080073c9 	.word	0x080073c9
 8007374:	080073dd 	.word	0x080073dd
 8007378:	08007359 	.word	0x08007359
 800737c:	08007359 	.word	0x08007359
 8007380:	08007359 	.word	0x08007359
 8007384:	08007359 	.word	0x08007359
 8007388:	080073dd 	.word	0x080073dd
 800738c:	08007359 	.word	0x08007359
 8007390:	08007359 	.word	0x08007359
 8007394:	08007359 	.word	0x08007359
 8007398:	08007359 	.word	0x08007359
 800739c:	080074e9 	.word	0x080074e9
 80073a0:	0800740d 	.word	0x0800740d
 80073a4:	080074cb 	.word	0x080074cb
 80073a8:	08007359 	.word	0x08007359
 80073ac:	08007359 	.word	0x08007359
 80073b0:	0800750b 	.word	0x0800750b
 80073b4:	08007359 	.word	0x08007359
 80073b8:	0800740d 	.word	0x0800740d
 80073bc:	08007359 	.word	0x08007359
 80073c0:	08007359 	.word	0x08007359
 80073c4:	080074d3 	.word	0x080074d3
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	1d1a      	adds	r2, r3, #4
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	602a      	str	r2, [r5, #0]
 80073d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d8:	2301      	movs	r3, #1
 80073da:	e0a3      	b.n	8007524 <_printf_i+0x1f4>
 80073dc:	6820      	ldr	r0, [r4, #0]
 80073de:	6829      	ldr	r1, [r5, #0]
 80073e0:	0606      	lsls	r6, r0, #24
 80073e2:	f101 0304 	add.w	r3, r1, #4
 80073e6:	d50a      	bpl.n	80073fe <_printf_i+0xce>
 80073e8:	680e      	ldr	r6, [r1, #0]
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	da03      	bge.n	80073f8 <_printf_i+0xc8>
 80073f0:	232d      	movs	r3, #45	; 0x2d
 80073f2:	4276      	negs	r6, r6
 80073f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f8:	485e      	ldr	r0, [pc, #376]	; (8007574 <_printf_i+0x244>)
 80073fa:	230a      	movs	r3, #10
 80073fc:	e019      	b.n	8007432 <_printf_i+0x102>
 80073fe:	680e      	ldr	r6, [r1, #0]
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007406:	bf18      	it	ne
 8007408:	b236      	sxthne	r6, r6
 800740a:	e7ef      	b.n	80073ec <_printf_i+0xbc>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	6820      	ldr	r0, [r4, #0]
 8007410:	1d19      	adds	r1, r3, #4
 8007412:	6029      	str	r1, [r5, #0]
 8007414:	0601      	lsls	r1, r0, #24
 8007416:	d501      	bpl.n	800741c <_printf_i+0xec>
 8007418:	681e      	ldr	r6, [r3, #0]
 800741a:	e002      	b.n	8007422 <_printf_i+0xf2>
 800741c:	0646      	lsls	r6, r0, #25
 800741e:	d5fb      	bpl.n	8007418 <_printf_i+0xe8>
 8007420:	881e      	ldrh	r6, [r3, #0]
 8007422:	4854      	ldr	r0, [pc, #336]	; (8007574 <_printf_i+0x244>)
 8007424:	2f6f      	cmp	r7, #111	; 0x6f
 8007426:	bf0c      	ite	eq
 8007428:	2308      	moveq	r3, #8
 800742a:	230a      	movne	r3, #10
 800742c:	2100      	movs	r1, #0
 800742e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007432:	6865      	ldr	r5, [r4, #4]
 8007434:	60a5      	str	r5, [r4, #8]
 8007436:	2d00      	cmp	r5, #0
 8007438:	bfa2      	ittt	ge
 800743a:	6821      	ldrge	r1, [r4, #0]
 800743c:	f021 0104 	bicge.w	r1, r1, #4
 8007440:	6021      	strge	r1, [r4, #0]
 8007442:	b90e      	cbnz	r6, 8007448 <_printf_i+0x118>
 8007444:	2d00      	cmp	r5, #0
 8007446:	d04d      	beq.n	80074e4 <_printf_i+0x1b4>
 8007448:	4615      	mov	r5, r2
 800744a:	fbb6 f1f3 	udiv	r1, r6, r3
 800744e:	fb03 6711 	mls	r7, r3, r1, r6
 8007452:	5dc7      	ldrb	r7, [r0, r7]
 8007454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007458:	4637      	mov	r7, r6
 800745a:	42bb      	cmp	r3, r7
 800745c:	460e      	mov	r6, r1
 800745e:	d9f4      	bls.n	800744a <_printf_i+0x11a>
 8007460:	2b08      	cmp	r3, #8
 8007462:	d10b      	bne.n	800747c <_printf_i+0x14c>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	07de      	lsls	r6, r3, #31
 8007468:	d508      	bpl.n	800747c <_printf_i+0x14c>
 800746a:	6923      	ldr	r3, [r4, #16]
 800746c:	6861      	ldr	r1, [r4, #4]
 800746e:	4299      	cmp	r1, r3
 8007470:	bfde      	ittt	le
 8007472:	2330      	movle	r3, #48	; 0x30
 8007474:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007478:	f105 35ff 	addle.w	r5, r5, #4294967295
 800747c:	1b52      	subs	r2, r2, r5
 800747e:	6122      	str	r2, [r4, #16]
 8007480:	f8cd a000 	str.w	sl, [sp]
 8007484:	464b      	mov	r3, r9
 8007486:	aa03      	add	r2, sp, #12
 8007488:	4621      	mov	r1, r4
 800748a:	4640      	mov	r0, r8
 800748c:	f7ff fee2 	bl	8007254 <_printf_common>
 8007490:	3001      	adds	r0, #1
 8007492:	d14c      	bne.n	800752e <_printf_i+0x1fe>
 8007494:	f04f 30ff 	mov.w	r0, #4294967295
 8007498:	b004      	add	sp, #16
 800749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749e:	4835      	ldr	r0, [pc, #212]	; (8007574 <_printf_i+0x244>)
 80074a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074a4:	6829      	ldr	r1, [r5, #0]
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80074ac:	6029      	str	r1, [r5, #0]
 80074ae:	061d      	lsls	r5, r3, #24
 80074b0:	d514      	bpl.n	80074dc <_printf_i+0x1ac>
 80074b2:	07df      	lsls	r7, r3, #31
 80074b4:	bf44      	itt	mi
 80074b6:	f043 0320 	orrmi.w	r3, r3, #32
 80074ba:	6023      	strmi	r3, [r4, #0]
 80074bc:	b91e      	cbnz	r6, 80074c6 <_printf_i+0x196>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	f023 0320 	bic.w	r3, r3, #32
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	2310      	movs	r3, #16
 80074c8:	e7b0      	b.n	800742c <_printf_i+0xfc>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f043 0320 	orr.w	r3, r3, #32
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	2378      	movs	r3, #120	; 0x78
 80074d4:	4828      	ldr	r0, [pc, #160]	; (8007578 <_printf_i+0x248>)
 80074d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074da:	e7e3      	b.n	80074a4 <_printf_i+0x174>
 80074dc:	0659      	lsls	r1, r3, #25
 80074de:	bf48      	it	mi
 80074e0:	b2b6      	uxthmi	r6, r6
 80074e2:	e7e6      	b.n	80074b2 <_printf_i+0x182>
 80074e4:	4615      	mov	r5, r2
 80074e6:	e7bb      	b.n	8007460 <_printf_i+0x130>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	6826      	ldr	r6, [r4, #0]
 80074ec:	6961      	ldr	r1, [r4, #20]
 80074ee:	1d18      	adds	r0, r3, #4
 80074f0:	6028      	str	r0, [r5, #0]
 80074f2:	0635      	lsls	r5, r6, #24
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	d501      	bpl.n	80074fc <_printf_i+0x1cc>
 80074f8:	6019      	str	r1, [r3, #0]
 80074fa:	e002      	b.n	8007502 <_printf_i+0x1d2>
 80074fc:	0670      	lsls	r0, r6, #25
 80074fe:	d5fb      	bpl.n	80074f8 <_printf_i+0x1c8>
 8007500:	8019      	strh	r1, [r3, #0]
 8007502:	2300      	movs	r3, #0
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	4615      	mov	r5, r2
 8007508:	e7ba      	b.n	8007480 <_printf_i+0x150>
 800750a:	682b      	ldr	r3, [r5, #0]
 800750c:	1d1a      	adds	r2, r3, #4
 800750e:	602a      	str	r2, [r5, #0]
 8007510:	681d      	ldr	r5, [r3, #0]
 8007512:	6862      	ldr	r2, [r4, #4]
 8007514:	2100      	movs	r1, #0
 8007516:	4628      	mov	r0, r5
 8007518:	f7f8 fe82 	bl	8000220 <memchr>
 800751c:	b108      	cbz	r0, 8007522 <_printf_i+0x1f2>
 800751e:	1b40      	subs	r0, r0, r5
 8007520:	6060      	str	r0, [r4, #4]
 8007522:	6863      	ldr	r3, [r4, #4]
 8007524:	6123      	str	r3, [r4, #16]
 8007526:	2300      	movs	r3, #0
 8007528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752c:	e7a8      	b.n	8007480 <_printf_i+0x150>
 800752e:	6923      	ldr	r3, [r4, #16]
 8007530:	462a      	mov	r2, r5
 8007532:	4649      	mov	r1, r9
 8007534:	4640      	mov	r0, r8
 8007536:	47d0      	blx	sl
 8007538:	3001      	adds	r0, #1
 800753a:	d0ab      	beq.n	8007494 <_printf_i+0x164>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	079b      	lsls	r3, r3, #30
 8007540:	d413      	bmi.n	800756a <_printf_i+0x23a>
 8007542:	68e0      	ldr	r0, [r4, #12]
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	4298      	cmp	r0, r3
 8007548:	bfb8      	it	lt
 800754a:	4618      	movlt	r0, r3
 800754c:	e7a4      	b.n	8007498 <_printf_i+0x168>
 800754e:	2301      	movs	r3, #1
 8007550:	4632      	mov	r2, r6
 8007552:	4649      	mov	r1, r9
 8007554:	4640      	mov	r0, r8
 8007556:	47d0      	blx	sl
 8007558:	3001      	adds	r0, #1
 800755a:	d09b      	beq.n	8007494 <_printf_i+0x164>
 800755c:	3501      	adds	r5, #1
 800755e:	68e3      	ldr	r3, [r4, #12]
 8007560:	9903      	ldr	r1, [sp, #12]
 8007562:	1a5b      	subs	r3, r3, r1
 8007564:	42ab      	cmp	r3, r5
 8007566:	dcf2      	bgt.n	800754e <_printf_i+0x21e>
 8007568:	e7eb      	b.n	8007542 <_printf_i+0x212>
 800756a:	2500      	movs	r5, #0
 800756c:	f104 0619 	add.w	r6, r4, #25
 8007570:	e7f5      	b.n	800755e <_printf_i+0x22e>
 8007572:	bf00      	nop
 8007574:	08007911 	.word	0x08007911
 8007578:	08007922 	.word	0x08007922

0800757c <memcpy>:
 800757c:	440a      	add	r2, r1
 800757e:	4291      	cmp	r1, r2
 8007580:	f100 33ff 	add.w	r3, r0, #4294967295
 8007584:	d100      	bne.n	8007588 <memcpy+0xc>
 8007586:	4770      	bx	lr
 8007588:	b510      	push	{r4, lr}
 800758a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800758e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007592:	4291      	cmp	r1, r2
 8007594:	d1f9      	bne.n	800758a <memcpy+0xe>
 8007596:	bd10      	pop	{r4, pc}

08007598 <memmove>:
 8007598:	4288      	cmp	r0, r1
 800759a:	b510      	push	{r4, lr}
 800759c:	eb01 0402 	add.w	r4, r1, r2
 80075a0:	d902      	bls.n	80075a8 <memmove+0x10>
 80075a2:	4284      	cmp	r4, r0
 80075a4:	4623      	mov	r3, r4
 80075a6:	d807      	bhi.n	80075b8 <memmove+0x20>
 80075a8:	1e43      	subs	r3, r0, #1
 80075aa:	42a1      	cmp	r1, r4
 80075ac:	d008      	beq.n	80075c0 <memmove+0x28>
 80075ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075b6:	e7f8      	b.n	80075aa <memmove+0x12>
 80075b8:	4402      	add	r2, r0
 80075ba:	4601      	mov	r1, r0
 80075bc:	428a      	cmp	r2, r1
 80075be:	d100      	bne.n	80075c2 <memmove+0x2a>
 80075c0:	bd10      	pop	{r4, pc}
 80075c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075ca:	e7f7      	b.n	80075bc <memmove+0x24>

080075cc <_free_r>:
 80075cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ce:	2900      	cmp	r1, #0
 80075d0:	d044      	beq.n	800765c <_free_r+0x90>
 80075d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075d6:	9001      	str	r0, [sp, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f1a1 0404 	sub.w	r4, r1, #4
 80075de:	bfb8      	it	lt
 80075e0:	18e4      	addlt	r4, r4, r3
 80075e2:	f000 f913 	bl	800780c <__malloc_lock>
 80075e6:	4a1e      	ldr	r2, [pc, #120]	; (8007660 <_free_r+0x94>)
 80075e8:	9801      	ldr	r0, [sp, #4]
 80075ea:	6813      	ldr	r3, [r2, #0]
 80075ec:	b933      	cbnz	r3, 80075fc <_free_r+0x30>
 80075ee:	6063      	str	r3, [r4, #4]
 80075f0:	6014      	str	r4, [r2, #0]
 80075f2:	b003      	add	sp, #12
 80075f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075f8:	f000 b90e 	b.w	8007818 <__malloc_unlock>
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	d908      	bls.n	8007612 <_free_r+0x46>
 8007600:	6825      	ldr	r5, [r4, #0]
 8007602:	1961      	adds	r1, r4, r5
 8007604:	428b      	cmp	r3, r1
 8007606:	bf01      	itttt	eq
 8007608:	6819      	ldreq	r1, [r3, #0]
 800760a:	685b      	ldreq	r3, [r3, #4]
 800760c:	1949      	addeq	r1, r1, r5
 800760e:	6021      	streq	r1, [r4, #0]
 8007610:	e7ed      	b.n	80075ee <_free_r+0x22>
 8007612:	461a      	mov	r2, r3
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b10b      	cbz	r3, 800761c <_free_r+0x50>
 8007618:	42a3      	cmp	r3, r4
 800761a:	d9fa      	bls.n	8007612 <_free_r+0x46>
 800761c:	6811      	ldr	r1, [r2, #0]
 800761e:	1855      	adds	r5, r2, r1
 8007620:	42a5      	cmp	r5, r4
 8007622:	d10b      	bne.n	800763c <_free_r+0x70>
 8007624:	6824      	ldr	r4, [r4, #0]
 8007626:	4421      	add	r1, r4
 8007628:	1854      	adds	r4, r2, r1
 800762a:	42a3      	cmp	r3, r4
 800762c:	6011      	str	r1, [r2, #0]
 800762e:	d1e0      	bne.n	80075f2 <_free_r+0x26>
 8007630:	681c      	ldr	r4, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	6053      	str	r3, [r2, #4]
 8007636:	4421      	add	r1, r4
 8007638:	6011      	str	r1, [r2, #0]
 800763a:	e7da      	b.n	80075f2 <_free_r+0x26>
 800763c:	d902      	bls.n	8007644 <_free_r+0x78>
 800763e:	230c      	movs	r3, #12
 8007640:	6003      	str	r3, [r0, #0]
 8007642:	e7d6      	b.n	80075f2 <_free_r+0x26>
 8007644:	6825      	ldr	r5, [r4, #0]
 8007646:	1961      	adds	r1, r4, r5
 8007648:	428b      	cmp	r3, r1
 800764a:	bf04      	itt	eq
 800764c:	6819      	ldreq	r1, [r3, #0]
 800764e:	685b      	ldreq	r3, [r3, #4]
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	bf04      	itt	eq
 8007654:	1949      	addeq	r1, r1, r5
 8007656:	6021      	streq	r1, [r4, #0]
 8007658:	6054      	str	r4, [r2, #4]
 800765a:	e7ca      	b.n	80075f2 <_free_r+0x26>
 800765c:	b003      	add	sp, #12
 800765e:	bd30      	pop	{r4, r5, pc}
 8007660:	200005d4 	.word	0x200005d4

08007664 <sbrk_aligned>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	4e0e      	ldr	r6, [pc, #56]	; (80076a0 <sbrk_aligned+0x3c>)
 8007668:	460c      	mov	r4, r1
 800766a:	6831      	ldr	r1, [r6, #0]
 800766c:	4605      	mov	r5, r0
 800766e:	b911      	cbnz	r1, 8007676 <sbrk_aligned+0x12>
 8007670:	f000 f8bc 	bl	80077ec <_sbrk_r>
 8007674:	6030      	str	r0, [r6, #0]
 8007676:	4621      	mov	r1, r4
 8007678:	4628      	mov	r0, r5
 800767a:	f000 f8b7 	bl	80077ec <_sbrk_r>
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	d00a      	beq.n	8007698 <sbrk_aligned+0x34>
 8007682:	1cc4      	adds	r4, r0, #3
 8007684:	f024 0403 	bic.w	r4, r4, #3
 8007688:	42a0      	cmp	r0, r4
 800768a:	d007      	beq.n	800769c <sbrk_aligned+0x38>
 800768c:	1a21      	subs	r1, r4, r0
 800768e:	4628      	mov	r0, r5
 8007690:	f000 f8ac 	bl	80077ec <_sbrk_r>
 8007694:	3001      	adds	r0, #1
 8007696:	d101      	bne.n	800769c <sbrk_aligned+0x38>
 8007698:	f04f 34ff 	mov.w	r4, #4294967295
 800769c:	4620      	mov	r0, r4
 800769e:	bd70      	pop	{r4, r5, r6, pc}
 80076a0:	200005d8 	.word	0x200005d8

080076a4 <_malloc_r>:
 80076a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a8:	1ccd      	adds	r5, r1, #3
 80076aa:	f025 0503 	bic.w	r5, r5, #3
 80076ae:	3508      	adds	r5, #8
 80076b0:	2d0c      	cmp	r5, #12
 80076b2:	bf38      	it	cc
 80076b4:	250c      	movcc	r5, #12
 80076b6:	2d00      	cmp	r5, #0
 80076b8:	4607      	mov	r7, r0
 80076ba:	db01      	blt.n	80076c0 <_malloc_r+0x1c>
 80076bc:	42a9      	cmp	r1, r5
 80076be:	d905      	bls.n	80076cc <_malloc_r+0x28>
 80076c0:	230c      	movs	r3, #12
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	2600      	movs	r6, #0
 80076c6:	4630      	mov	r0, r6
 80076c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076cc:	4e2e      	ldr	r6, [pc, #184]	; (8007788 <_malloc_r+0xe4>)
 80076ce:	f000 f89d 	bl	800780c <__malloc_lock>
 80076d2:	6833      	ldr	r3, [r6, #0]
 80076d4:	461c      	mov	r4, r3
 80076d6:	bb34      	cbnz	r4, 8007726 <_malloc_r+0x82>
 80076d8:	4629      	mov	r1, r5
 80076da:	4638      	mov	r0, r7
 80076dc:	f7ff ffc2 	bl	8007664 <sbrk_aligned>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	4604      	mov	r4, r0
 80076e4:	d14d      	bne.n	8007782 <_malloc_r+0xde>
 80076e6:	6834      	ldr	r4, [r6, #0]
 80076e8:	4626      	mov	r6, r4
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	d140      	bne.n	8007770 <_malloc_r+0xcc>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	4631      	mov	r1, r6
 80076f2:	4638      	mov	r0, r7
 80076f4:	eb04 0803 	add.w	r8, r4, r3
 80076f8:	f000 f878 	bl	80077ec <_sbrk_r>
 80076fc:	4580      	cmp	r8, r0
 80076fe:	d13a      	bne.n	8007776 <_malloc_r+0xd2>
 8007700:	6821      	ldr	r1, [r4, #0]
 8007702:	3503      	adds	r5, #3
 8007704:	1a6d      	subs	r5, r5, r1
 8007706:	f025 0503 	bic.w	r5, r5, #3
 800770a:	3508      	adds	r5, #8
 800770c:	2d0c      	cmp	r5, #12
 800770e:	bf38      	it	cc
 8007710:	250c      	movcc	r5, #12
 8007712:	4629      	mov	r1, r5
 8007714:	4638      	mov	r0, r7
 8007716:	f7ff ffa5 	bl	8007664 <sbrk_aligned>
 800771a:	3001      	adds	r0, #1
 800771c:	d02b      	beq.n	8007776 <_malloc_r+0xd2>
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	442b      	add	r3, r5
 8007722:	6023      	str	r3, [r4, #0]
 8007724:	e00e      	b.n	8007744 <_malloc_r+0xa0>
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	1b52      	subs	r2, r2, r5
 800772a:	d41e      	bmi.n	800776a <_malloc_r+0xc6>
 800772c:	2a0b      	cmp	r2, #11
 800772e:	d916      	bls.n	800775e <_malloc_r+0xba>
 8007730:	1961      	adds	r1, r4, r5
 8007732:	42a3      	cmp	r3, r4
 8007734:	6025      	str	r5, [r4, #0]
 8007736:	bf18      	it	ne
 8007738:	6059      	strne	r1, [r3, #4]
 800773a:	6863      	ldr	r3, [r4, #4]
 800773c:	bf08      	it	eq
 800773e:	6031      	streq	r1, [r6, #0]
 8007740:	5162      	str	r2, [r4, r5]
 8007742:	604b      	str	r3, [r1, #4]
 8007744:	4638      	mov	r0, r7
 8007746:	f104 060b 	add.w	r6, r4, #11
 800774a:	f000 f865 	bl	8007818 <__malloc_unlock>
 800774e:	f026 0607 	bic.w	r6, r6, #7
 8007752:	1d23      	adds	r3, r4, #4
 8007754:	1af2      	subs	r2, r6, r3
 8007756:	d0b6      	beq.n	80076c6 <_malloc_r+0x22>
 8007758:	1b9b      	subs	r3, r3, r6
 800775a:	50a3      	str	r3, [r4, r2]
 800775c:	e7b3      	b.n	80076c6 <_malloc_r+0x22>
 800775e:	6862      	ldr	r2, [r4, #4]
 8007760:	42a3      	cmp	r3, r4
 8007762:	bf0c      	ite	eq
 8007764:	6032      	streq	r2, [r6, #0]
 8007766:	605a      	strne	r2, [r3, #4]
 8007768:	e7ec      	b.n	8007744 <_malloc_r+0xa0>
 800776a:	4623      	mov	r3, r4
 800776c:	6864      	ldr	r4, [r4, #4]
 800776e:	e7b2      	b.n	80076d6 <_malloc_r+0x32>
 8007770:	4634      	mov	r4, r6
 8007772:	6876      	ldr	r6, [r6, #4]
 8007774:	e7b9      	b.n	80076ea <_malloc_r+0x46>
 8007776:	230c      	movs	r3, #12
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	4638      	mov	r0, r7
 800777c:	f000 f84c 	bl	8007818 <__malloc_unlock>
 8007780:	e7a1      	b.n	80076c6 <_malloc_r+0x22>
 8007782:	6025      	str	r5, [r4, #0]
 8007784:	e7de      	b.n	8007744 <_malloc_r+0xa0>
 8007786:	bf00      	nop
 8007788:	200005d4 	.word	0x200005d4

0800778c <_realloc_r>:
 800778c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007790:	4680      	mov	r8, r0
 8007792:	4614      	mov	r4, r2
 8007794:	460e      	mov	r6, r1
 8007796:	b921      	cbnz	r1, 80077a2 <_realloc_r+0x16>
 8007798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800779c:	4611      	mov	r1, r2
 800779e:	f7ff bf81 	b.w	80076a4 <_malloc_r>
 80077a2:	b92a      	cbnz	r2, 80077b0 <_realloc_r+0x24>
 80077a4:	f7ff ff12 	bl	80075cc <_free_r>
 80077a8:	4625      	mov	r5, r4
 80077aa:	4628      	mov	r0, r5
 80077ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b0:	f000 f838 	bl	8007824 <_malloc_usable_size_r>
 80077b4:	4284      	cmp	r4, r0
 80077b6:	4607      	mov	r7, r0
 80077b8:	d802      	bhi.n	80077c0 <_realloc_r+0x34>
 80077ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80077be:	d812      	bhi.n	80077e6 <_realloc_r+0x5a>
 80077c0:	4621      	mov	r1, r4
 80077c2:	4640      	mov	r0, r8
 80077c4:	f7ff ff6e 	bl	80076a4 <_malloc_r>
 80077c8:	4605      	mov	r5, r0
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d0ed      	beq.n	80077aa <_realloc_r+0x1e>
 80077ce:	42bc      	cmp	r4, r7
 80077d0:	4622      	mov	r2, r4
 80077d2:	4631      	mov	r1, r6
 80077d4:	bf28      	it	cs
 80077d6:	463a      	movcs	r2, r7
 80077d8:	f7ff fed0 	bl	800757c <memcpy>
 80077dc:	4631      	mov	r1, r6
 80077de:	4640      	mov	r0, r8
 80077e0:	f7ff fef4 	bl	80075cc <_free_r>
 80077e4:	e7e1      	b.n	80077aa <_realloc_r+0x1e>
 80077e6:	4635      	mov	r5, r6
 80077e8:	e7df      	b.n	80077aa <_realloc_r+0x1e>
	...

080077ec <_sbrk_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d06      	ldr	r5, [pc, #24]	; (8007808 <_sbrk_r+0x1c>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	f7f9 fe06 	bl	8001408 <_sbrk>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_sbrk_r+0x1a>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	b103      	cbz	r3, 8007806 <_sbrk_r+0x1a>
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	200005dc 	.word	0x200005dc

0800780c <__malloc_lock>:
 800780c:	4801      	ldr	r0, [pc, #4]	; (8007814 <__malloc_lock+0x8>)
 800780e:	f000 b811 	b.w	8007834 <__retarget_lock_acquire_recursive>
 8007812:	bf00      	nop
 8007814:	200005e0 	.word	0x200005e0

08007818 <__malloc_unlock>:
 8007818:	4801      	ldr	r0, [pc, #4]	; (8007820 <__malloc_unlock+0x8>)
 800781a:	f000 b80c 	b.w	8007836 <__retarget_lock_release_recursive>
 800781e:	bf00      	nop
 8007820:	200005e0 	.word	0x200005e0

08007824 <_malloc_usable_size_r>:
 8007824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007828:	1f18      	subs	r0, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	bfbc      	itt	lt
 800782e:	580b      	ldrlt	r3, [r1, r0]
 8007830:	18c0      	addlt	r0, r0, r3
 8007832:	4770      	bx	lr

08007834 <__retarget_lock_acquire_recursive>:
 8007834:	4770      	bx	lr

08007836 <__retarget_lock_release_recursive>:
 8007836:	4770      	bx	lr

08007838 <_init>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr

08007844 <_fini>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	bf00      	nop
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr
